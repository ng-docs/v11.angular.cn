{"id":"guide/interpolation","title":"Text interpolation","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/interpolation.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"text-interpolation\" translation-result=\"on\">文本插值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#text-interpolation\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"text-interpolation\">Text interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#text-interpolation\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">文本插值允许你将动态字符串值合并到 HTML 模板中。通过插值，你可以动态更改应用视图中显示的内容，例如显示包含用户名的自定义问候语。</p><p translation-origin=\"off\">Text interpolation allows you to incorporate dynamic string values into your HTML templates.\nWith interpolation, you can dynamically change what appears in an application view, such as displaying a custom greeting that includes the user's name.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">要了解本指南中涉及的语法和代码片段，请参阅 <live-example></live-example>。</p><p translation-origin=\"off\">See the <live-example></live-example> for all of the syntax and code snippets in this guide.</p>\n\n</div>\n<h2 id=\"displaying-values-with-interpolation\" translation-result=\"on\">使用插值语法显示值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#displaying-values-with-interpolation\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"displaying-values-with-interpolation\">Displaying values with interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#displaying-values-with-interpolation\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">插值是指将表达式嵌入到被标记的文本中。默认情况下，插值使用双花括号 <code>{{</code> 和 <code>}}</code> 作为定界符。</p><p translation-origin=\"off\">Interpolation refers to embedding expressions into marked up text.\nBy default, interpolation uses the double curly braces <code>{{</code> and <code>}}</code>  as delimiters.</p>\n\n<p translation-result=\"on\">为了说明插值的工作原理，请考虑一个包含 <code>currentCustomer</code> 变量的 Angular 组件：</p><p translation-origin=\"off\">To illustrate how interpolation works, consider an Angular component that contains a <code>currentCustomer</code> variable:</p>\n\n<code-example path=\"interpolation/src/app/app.component.ts\" region=\"customer\" header=\"src/app/app.component.ts\">\ncurrentCustomer = 'Maria';\n\n</code-example>\n<p translation-result=\"on\">你可以使用插值在相应的组件模板中显示此变量的值：</p><p translation-origin=\"off\">You can use interpolation to display the value of this variable in the corresponding component template:</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"interpolation-example1\" header=\"src/app/app.component.html\">\n&#x3C;h3>Current customer: {{ currentCustomer }}&#x3C;/h3>\n\n</code-example>\n<p translation-result=\"on\">Angular 会用相应组件属性的字符串值替换掉 <code>currentCustomer</code>。在这里，它的值是 <code>Maria</code>。</p><p translation-origin=\"off\">Angular replaces <code>currentCustomer</code> with the string value of the corresponding component property.\nIn this case, the value is <code>Maria</code>.</p>\n\n<p translation-result=\"on\">在以下示例中，Angular 会求出 <code>title</code> 和 <code>itemImageUrl</code> 属性的值，以显示一些标题文本和图像。</p><p translation-origin=\"off\">In the following example, Angular evaluates the <code>title</code> and <code>itemImageUrl</code> properties to display some title text and an image.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-property\" header=\"src/app/app.component.html\">\n&#x3C;p>{{title}}&#x3C;/p>\n&#x3C;div>&#x3C;img src=\"{{itemImageUrl}}\">&#x3C;/div>\n\n</code-example>\n<h2 id=\"template-expressions\" translation-result=\"on\">模板表达式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#template-expressions\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-expressions\">Template expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#template-expressions\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">模板<strong>表达式</strong>会产生一个值，它出现在双花括号 <code>{{ }}</code> 中。 Angular 解析该表达式并将其赋值给绑定目标的某个属性。目标可以是 HTML 元素、组件或指令。</p><p translation-origin=\"off\">A template <strong>expression</strong> produces a value and appears within double curly braces, <code>{{ }}</code>.\nAngular resolves the expression and assigns it to a property of a binding target.\nThe target could be an HTML element, a component, or a directive.</p>\n\n<h3 id=\"resolving-expressions-with-interpolation\" translation-result=\"on\">用插值解析表达式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#resolving-expressions-with-interpolation\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"resolving-expressions-with-interpolation\">Resolving expressions with interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#resolving-expressions-with-interpolation\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">一般来说，括号间的文本是一个模板表达式，Angular 先对它求值，再把它转换成字符串。\n下列插值通过把括号中的两个数字相加说明了这一点：</p><p translation-origin=\"off\">More generally, the text between the braces is a template expression that Angular first evaluates and then converts to a string.\nThe following interpolation illustrates the point by adding two numbers:</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"convert-string\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is 2\" -->\n&#x3C;p>The sum of 1 + 1 is {{1 + 1}}.&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">这些表达式也可以调用宿主组件的方法，就像下面用的 <code>getVal()</code>：</p><p translation-origin=\"off\">Expressions can also invoke methods of the host component such as <code>getVal()</code> in the following example:</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"invoke-method\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is not 4\" -->\n&#x3C;p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}.&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">通过插值，Angular 执行以下任务：</p><p translation-origin=\"off\">With interpolation, Angular performs the following tasks:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">计算所有位于双花括号中的表达式。</p><p translation-origin=\"off\">Evaluates all expressions in double curly braces.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">将这些表达式的结果转换为字符串。</p><p translation-origin=\"off\">Converts the expression results to strings.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">将这些结果融入相邻的字符串文本中。</p><p translation-origin=\"off\">Links the results to any adjacent literal strings.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">将融合后的结果赋值给元素或指令的属性。</p><p translation-origin=\"off\">Assigns the composite to an element or directive property.</p>\n\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果你想用别的分隔符来代替 <code>{{</code> 和 <code>}}</code>，也可以通过 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> 元数据中的 <a href=\"api/core/Component#interpolation\">interpolation</a> 选项来配置插值分隔符。</p><p translation-origin=\"off\">You can configure the interpolation delimiter with the <a href=\"api/core/Component#interpolation\">interpolation</a> option in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> metadata.</p>\n\n</div>\n<h3 id=\"syntax\" translation-result=\"on\">语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#syntax\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"syntax\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#syntax\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">模板表达式和 JavaScript 很相似。许多 JavaScript 表达式都是合法的模板表达式，但以下情况除外。</p><p translation-origin=\"off\">Template expressions are similar to JavaScript.\nMany JavaScript expressions are legal template expressions, with the following exceptions.</p>\n\n<p translation-result=\"on\">你不能使用那些具有或可能引发副作用的 JavaScript 表达式，包括：</p><p translation-origin=\"off\">You can't use JavaScript expressions that have or promote side effects, including:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">赋值 (<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>)</p><p translation-origin=\"off\">Assignments (<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>)</p>\n\n</li>\n<li>\n<p translation-result=\"on\">运算符，比如 <code>new</code>、<code>typeof</code> 或 <code>instanceof</code> 等。</p><p translation-origin=\"off\">Operators such as <code>new</code>, <code>typeof</code>, or <code>instanceof</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 使用 <code>;</code> 或 <code>,</code> 串联起来的表达式</p><p translation-origin=\"off\">Chaining expressions with <code>;</code> or <code>,</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 自增和自减运算符：<code>++</code> 和 <code>--</code></p><p translation-origin=\"off\">The increment and decrement operators <code>++</code> and <code>--</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 一些 ES2015+ 版本的运算符</p><p translation-origin=\"off\">Some of the ES2015+ operators</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">和 JavaScript 语法的其它显著差异包括：</p><p translation-origin=\"off\">Other notable differences from JavaScript syntax include:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 不支持位运算，比如 <code>|</code> 和 <code>&#x26;</code></p><p translation-origin=\"off\">No support for the bitwise operators such as <code>|</code> and <code>&#x26;</code></p>\n\n</li>\n<li>\n<p translation-result=\"on\">新的<a href=\"guide/template-expression-operators\">模板表达式运算符</a>，例如 <code>|</code>，<code>?.</code> 和 <code>!</code></p><p translation-origin=\"off\">New <a href=\"guide/template-expression-operators\">template expression operators</a>, such as <code>|</code>, <code>?.</code> and <code>!</code></p>\n\n</li>\n</ul>\n<h2 id=\"expression-context\" translation-result=\"on\">表达式上下文<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#expression-context\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"expression-context\">Expression context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#expression-context\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">插值表达式具有上下文 —— 表达式所属应用中的特定部分。通常，此上下文就是组件实例。</p><p translation-origin=\"off\">Interpolated expressions have a context—a particular part of the application to which the expression belongs.\nTypically, this context is the component instance.</p>\n\n<p translation-result=\"on\">在下面的代码片段中，表达式 <code>recommended</code> 和 <code>itemImageUrl2</code> 表达式所引用的都是 <code>AppComponent</code> 中的属性。</p><p translation-origin=\"off\">In the following snippet, the expression <code>recommended</code> and the expression <code>itemImageUrl2</code> refer to properties of the <code>AppComponent</code>.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&#x3C;h4>{{recommended}}&#x3C;/h4>\n&#x3C;img [src]=\"itemImageUrl2\">\n\n</code-example>\n<p translation-result=\"on\">表达式也可以引用<em>模板</em>上下文中的属性，例如<a href=\"guide/structural-directives#shorthand\">模板输入变量</a>或<a href=\"guide/template-reference-variables\">模板引用变量</a>。</p><p translation-origin=\"off\">An expression can also refer to properties of the <em>template's</em> context such as a <a href=\"guide/structural-directives#shorthand\">template input variable</a> or a <a href=\"guide/template-reference-variables\">template reference variable</a>.</p>\n\n<p translation-result=\"on\">下面的例子就使用了模板输入变量 <code>customer</code>。</p><p translation-origin=\"off\">The following example uses a template input variable of <code>customer</code>.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\">{{customer.name}}&#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p translation-result=\"on\">接下来的例子使用了模板引用变量 <code>#customerInput</code>。</p><p translation-origin=\"off\">This next example features a template reference variable, <code>#customerInput</code>.</p>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&#x3C;label><a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &#x3C;input #customerInput>{{customerInput.value}}\n&#x3C;/label>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">模板表达式不能引用全局命名空间中的任何东西，比如 <code>window</code> 或 <code>document</code>。它们也不能调用 <code>console.log</code> 或 <code>Math.max</code>。\n它们只能引用表达式上下文中的成员。</p><p translation-origin=\"off\">Template expressions cannot refer to anything in the global namespace, except <code>undefined</code>.\nThey can't refer to <code>window</code> or <code>document</code>.\nAdditionally, they can't call <code>console.log()</code> or <code>Math.max()</code> and they are restricted to referencing members of the expression context.</p>\n\n</div>\n<h3 id=\"preventing-name-collisions\" translation-result=\"on\">防止命名冲突<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#preventing-name-collisions\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"preventing-name-collisions\">Preventing name collisions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#preventing-name-collisions\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">表达式求值的上下文是模板变量、指令的上下文对象（如果有的话）以及组件成员的并集。如果所引用的名称在多个命名空间都有，则 Angular 将应用以下逻辑来确定上下文：</p><p translation-origin=\"off\">The context against which an expression evaluates is the union of the template variables, the directive's context object—if it has one—and the component's members.\nIf you reference a name that belongs to more than one of these namespaces, Angular applies the following logic to determine the context:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">模板变量的名称。</p><p translation-origin=\"off\">The template variable name.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">指令上下文中的名称。</p><p translation-origin=\"off\">A name in the directive's context.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">组件成员的名称。</p><p translation-origin=\"off\">The component's member names.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">为避免变量遮盖另一个上下文中的变量，请保持变量名称唯一。在以下示例中，<code>AppComponent</code> 模板在问候 <code>customer</code> Padma。</p><p translation-origin=\"off\">To avoid variables shadowing variables in another context, keep variable names unique.\nIn the following example, the <code>AppComponent</code> template greets the <code>customer</code>, Padma.</p>\n\n<p translation-result=\"on\">然后，一个 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 列出了 <code>customers</code> 数组中的每个 <code>customer</code>。</p><p translation-origin=\"off\">An <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> then lists each <code>customer</code> in the <code>customers</code> array.</p>\n\n<code-example path=\"interpolation/src/app/app.component.1.ts\" region=\"var-collision\" header=\"src/app/app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &#x3C;div>\n      &#x3C;!-- Hello, Padma -->\n      &#x3C;h1>Hello, {{customer}}&#x3C;/h1>\n      &#x3C;ul>\n        &#x3C;!-- Ebony and Chiho in a list-->\n        &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\">{{ customer.value }}&#x3C;/li>\n      &#x3C;/ul>\n    &#x3C;/div>\n  `\n})\nclass AppComponent {\n  customers = [{value: 'Ebony'}, {value: 'Chiho'}];\n  customer = 'Padma';\n}\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 中的 <code>customer</code> 处于一个 <code>&#x3C;ng-template></code> 的上下文中，所以它指向的是 <code>customers</code> 数组中的 <code>customer</code>，在这里是 Ebony 和 Chiho。此列表中不包含 Padma，因为那个 <code>customer</code> 位于 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 以外的另一个上下文中。反之，<code>&#x3C;h1></code> 中的 <code>customer</code> 不包括 Ebony 或 Chiho，因为该 <code>customer</code> 的上下文是组件类，而这个类中 <code>customer</code> 的值是 Padma。</p><p translation-origin=\"off\">The <code>customer</code> within the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is in the context of an <code>&#x3C;ng-template></code> and so refers to the <code>customer</code> in the <code>customers</code> array, in this case Ebony and Chiho.\nThis list does not feature Padma because <code>customer</code> outside of the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is in a different context.\nConversely, <code>customer</code> in the <code>&#x3C;h1></code> doesn't include Ebony or Chiho because the context for this <code>customer</code> is the class and the class value for <code>customer</code> is Padma.</p>\n\n<h2 id=\"expression-best-practices\" translation-result=\"on\">表达式最佳实践<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#expression-best-practices\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"expression-best-practices\">Expression best practices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#expression-best-practices\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用模板表达式时，请遵循以下最佳实践：</p><p translation-origin=\"off\">When using template expressions, follow these best practices:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><strong>使用短表达式</strong></p><p translation-origin=\"off\"><strong>Use short expressions</strong></p>\n\n<p translation-result=\"on\">尽可能使用属性名称或方法调用。将应用和业务逻辑保留在易于开发和测试的组件中。</p><p translation-origin=\"off\">Use property names or method calls whenever possible.\nKeep application and business logic in the component, where it is easier to develop and test.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><strong>快速执行</strong></p><p translation-origin=\"off\"><strong>Quick execution</strong></p>\n\n<p translation-result=\"on\">Angular 会在每个<a href=\"guide/glossary#change-detection\">变更检测</a>周期之后执行模板表达式。许多异步活动都会触发变更检测周期，例如解析 Promise、HTTP 结果、计时器事件、按键和鼠标移动。</p><p translation-origin=\"off\">Angular executes template expressions after every <a href=\"guide/glossary#change-detection\">change detection</a> cycle.\nMany asynchronous activities trigger change detection cycles, such as promise resolutions, HTTP results, timer events, key presses and mouse moves.</p>\n\n<p translation-result=\"on\">表达式应尽快完成，以保持用户体验的性能，尤其是在速度较慢的设备上。当计算值需要更多资源时，请考虑缓存值。</p><p translation-origin=\"off\">Expressions should finish quickly to keep the user experience as efficient as possible, especially on slower devices.\nConsider caching values when their computation requires greater resources.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">  <strong>没有可见的副作用</strong></p><p translation-origin=\"off\"><strong>No visible side effects</strong></p>\n\n<p translation-result=\"on\">    根据 Angular 的<a href=\"guide/glossary#unidirectional-data-flow\">单向数据流模型</a>，除了目标属性的值之外，模板表达式不应更改任何应用状态。读取组件值不应更改其他显示值。该视图应在整个渲染过程中保持稳定。</p><p translation-origin=\"off\">    According to Angular's <a href=\"guide/glossary#unidirectional-data-flow\">unidirectional data flow model</a>, a template expression should not change any application state other than the value of the target property.\nReading a component value should not change some other displayed value.\nThe view should be stable throughout a single rendering pass.</p>\n\n    <div class=\"callout is-important\">\n      <header translation-result=\"on\">幂等表达式能减少副作用</header><header translation-origin=\"off\">Idempotent expressions reduce side effects</header>\n      \n<p translation-result=\"on\">    <a href=\"https://en.wikipedia.org/wiki/Idempotence\">幂等</a>的表达式是最理想的，因为它没有副作用，并且可以提高 Angular 的变更检测性能。\n用 Angular 术语来说，幂等表达式总会返回<em>完全相同的东西</em>，除非其依赖值之一发生了变化。</p><p translation-origin=\"off\">    An <a href=\"https://en.wikipedia.org/wiki/Idempotence\">idempotent</a> expression is free of side effects and improves Angular's change detection performance.\nIn Angular terms, an idempotent expression always returns <em>exactly the same thing</em> until one of its dependent values changes.</p>\n\n</div></li>\n</ul>\n<p translation-result=\"on\">  在单独的一次事件循环中，被依赖的值不应该改变。\n如果幂等的表达式返回一个字符串或数字，如果连续调用它两次，会返回相同的字符串或数字。\n如果幂等的表达式返回一个对象（包括 <code>Date</code> 或 <code>Array</code>），如果连续调用它两次，会返回同一个对象的<em>引用</em>。</p><p translation-origin=\"off\">Dependent values should not change during a single turn of the event loop.\nIf an idempotent expression returns a string or a number, it returns the same string or number if you call it twice consecutively.\nIf the expression returns an object, including an <code>array</code>, it returns the same object <em>reference</em> if you call it twice consecutively.</p>\n\n\n  <div class=\"alert is-important\">\n<p translation-result=\"on\">  对于 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>，这种行为有一个例外。<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 具有 <code>trackBy</code> 功能，在迭代对象时它可以正确处理对象值的变化。详情参见 <a href=\"guide/built-in-directives#ngfor-with-trackby\">带 <code>trackBy</code> 的 *ngFor</a>。</p><p translation-origin=\"off\">  There is one exception to this behavior that applies to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>.\n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> has <code>trackBy</code> functionality that can deal with changing values in objects when iterating over them.\nSee <a href=\"guide/built-in-directives#ngfor-with-trackby\">*ngFor with <code>trackBy</code></a> for details.</p>\n\n</div>\n\n  \n</div>\n\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/binding-syntax\n - guide/example-apps-list\n - guide/glossary\n - guide/property-binding\n - guide/template-statements\n - guide/template-syntax\n - guide/user-input\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/core/Component\n - api/core/Component#interpolation\n - api/core/Type\n - guide/built-in-directives#ngfor-with-trackby\n - guide/glossary#change-detection\n - guide/glossary#unidirectional-data-flow\n - guide/interpolation#displaying-values-with-interpolation\n - guide/interpolation#expression-best-practices\n - guide/interpolation#expression-context\n - guide/interpolation#preventing-name-collisions\n - guide/interpolation#resolving-expressions-with-interpolation\n - guide/interpolation#syntax\n - guide/interpolation#template-expressions\n - guide/interpolation#text-interpolation\n - guide/structural-directives#shorthand\n - guide/template-expression-operators\n - guide/template-reference-variables\n - https://en.wikipedia.org/wiki/Idempotence\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/interpolation.md?message=docs%3A%20请简述你的修改...\n-->"}