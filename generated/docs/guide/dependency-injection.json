{"id":"guide/dependency-injection","title":"Dependency injection in Angular","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/dependency-injection.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"dependency-injection-in-angular\" translation-result=\"on\">Angular 中的依赖注入<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#dependency-injection-in-angular\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"dependency-injection-in-angular\">Dependency injection in Angular<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#dependency-injection-in-angular\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">依赖项是指某个类执行其功能所需的服务或对象。依赖项注入（DI）是一种设计模式，在这种设计模式中，类会从外部源请求依赖项而不是创建它们。</p><p translation-origin=\"off\">Dependencies are services or objects that a class needs to perform its function.\nDependency injection, or DI, is a design pattern in which a class requests dependencies from external sources rather than creating them.</p>\n\n<p translation-result=\"on\">Angular 的 DI 框架会在实例化某个类时为其提供依赖。你可以使用 Angular DI 来提高应用程序的灵活性和模块化程度。</p><p translation-origin=\"off\">Angular's DI framework provides dependencies to a class upon instantiation.\nYou can use Angular DI to increase flexibility and modularity in your applications.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">包含本指南中代码片段的可工作示例，请参见<live-example></live-example>。</p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<h2 id=\"creating-an-injectable-service\" translation-result=\"on\">创建可注入服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#creating-an-injectable-service\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"creating-an-injectable-service\">Creating an injectable service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#creating-an-injectable-service\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要想在 <code>src/app/heroes</code> 目录下生成一个新的 <code>HeroService</code> 类，请使用下列 <a href=\"cli\">Angular CLI</a> 命令。</p><p translation-origin=\"off\">To generate a new <code>HeroService</code> class in the <code>src/app/heroes</code> folder use the following <a href=\"cli\">Angular CLI</a> command.</p>\n\n<code-example language=\"sh\">\nng generate service heroes/hero\n</code-example>\n<p translation-result=\"on\">下列命令会创建默认的 <code>HeroService</code>。</p><p translation-origin=\"off\">This command creates the following default <code>HeroService</code>.</p>\n\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.0.ts\" header=\"src/app/heroes/hero.service.ts (CLI-generated)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n  constructor() { }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 装饰器会指定 Angular 可以在 DI 体系中使用此类。元数据 <code>providedIn: 'root'</code> 表示 <code>HeroService</code> 在整个应用程序中都是可见的。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator specifies that Angular can use this class in the DI system.\nThe metadata, <code>providedIn: 'root'</code>, means that the <code>HeroService</code> is visible throughout the application.</p>\n\n<p translation-result=\"on\">接下来，要获取英雄的模拟数据，请添加一个 <code>getHeroes()</code> 方法，该方法会从 <code>mock.heroes.ts</code> 中返回英雄。</p><p translation-origin=\"off\">Next, to get the hero mock data, add a <code>getHeroes()</code> method that returns the heroes from <code>mock.heroes.ts</code>.</p>\n\n<code-example path=\"dependency-injection/src/app/heroes/hero.service.3.ts\" header=\"src/app/heroes/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  // declares that this service should be created\n  // by the root application injector.\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n\n\n</code-example>\n<p translation-result=\"on\">为了清晰和可维护性，建议你在单独的文件中定义组件和服务。</p><p translation-origin=\"off\">For clarity and maintainability, it is recommended that you define components and services in separate files.</p>\n\n<p translation-result=\"on\">如果你确实要将组件和服务合并在同一个文件中，则必须先定义服务，再定义组件，这一点很重要。如果在服务之前定义组件，Angular 将返回运行时的空引用错误。</p><p translation-origin=\"off\">If you do combine a component and service in the same file, it is important to define the service first, and then the component.\nIf you define the component before the service, Angular returns a run-time null reference error.</p>\n\n<a id=\"injector-config\"></a>\n<a id=\"bootstrap\"></a>\n<h2 id=\"injecting-services\" translation-result=\"on\">注入服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#injecting-services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"injecting-services\">Injecting services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#injecting-services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">注入某些服务会使它们对组件可见。</p><p translation-origin=\"off\">Injecting services results in making them visible to a component.</p>\n\n<p translation-result=\"on\">要将依赖项注入组件的 <code>constructor()</code> 中，请提供具有此依赖项类型的构造函数参数。下面的示例在 <code>HeroListComponent</code> 的构造函数中指定了 <code>HeroService</code>。<code>heroService</code> 的类型是 <code>HeroService</code>。</p><p translation-origin=\"off\">To inject a dependency in a component's <code>constructor()</code>, supply a constructor argument with the dependency type.\nThe following example specifies the <code>HeroService</code> in the <code>HeroListComponent</code> constructor.\nThe type of <code>heroService</code> is <code>HeroService</code>.</p>\n\n<code-example header=\"src/app/heroes/hero-list.component (constructor signature)\" path=\"dependency-injection/src/app/heroes/hero-list.component.ts\" region=\"ctor-signature\">\nconstructor(heroService: HeroService)\n\n</code-example>\n<p translation-result=\"on\">有关更多信息，请参阅<a href=\"guide/providers\">在模块中提供依赖</a>和<a href=\"guide/hierarchical-dependency-injection\">分层注入器</a>。</p><p translation-origin=\"off\">For more information, see <a href=\"guide/providers\">Providing dependencies in modules</a> and <a href=\"guide/hierarchical-dependency-injection\">Hierarchical injectors</a>.</p>\n\n<a id=\"service-needs-service\"></a>\n<h2 id=\"using-services-in-other-services\" translation-result=\"on\">在其他服务中使用这些服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#using-services-in-other-services\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"using-services-in-other-services\">Using services in other services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#using-services-in-other-services\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当某个服务依赖于另一个服务时，请遵循与注入组件相同的模式。在这里，<code>HeroService</code> 要依靠 <code>Logger</code> 服务来报告其活动。</p><p translation-origin=\"off\">When a service depends on another service, follow the same pattern as injecting into a component.\nIn the following example <code>HeroService</code> depends on a <code>Logger</code> service to report its activities.</p>\n\n<p translation-result=\"on\">首先，导入 <code>Logger</code> 服务。接下来，通过在括号中指定 <code>private logger: Logger</code>，来在 <code>HeroService</code> 的 <code>constructor()</code> 中注入 <code>Logger</code> 服务。</p><p translation-origin=\"off\">First, import the <code>Logger</code> service.\nNext, inject the <code>Logger</code> service in the <code>HeroService</code> <code>constructor()</code> by specifying <code>private logger: Logger</code> within the parentheses.</p>\n\n<p translation-result=\"on\">当创建一个其 <code>constructor()</code> 带有参数的类时，请指定其类型和关于这些参数的元数据，以便 Angular 可以注入正确的服务。</p><p translation-origin=\"off\">When you create a class whose <code>constructor()</code> has parameters, specify the type and metadata about those parameters so that Angular can inject the correct service.</p>\n\n<p translation-result=\"on\">在这里，<code>constructor()</code> 指定了 <code>Logger</code> 的类型，并把 <code>Logger</code> 的实例存储在名叫 <code>logger</code> 的私有字段中。</p><p translation-origin=\"off\">Here, the <code>constructor()</code> specifies a type of <code>Logger</code> and stores the instance of <code>Logger</code> in a private field called <code>logger</code>.</p>\n\n<p translation-result=\"on\">下列代码具有 <code>Logger</code> 服务和两个版本的 <code>HeroService</code>。<code>HeroService</code> 的第一个版本不依赖于 <code>Logger</code> 服务。修改后的第二个版本依赖于 <code>Logger</code> 服务。</p><p translation-origin=\"off\">The following code tabs feature the <code>Logger</code> service and two versions of <code>HeroService</code>.\nThe first version of <code>HeroService</code> does not depend on the <code>Logger</code> service.\nThe revised second version does depend on <code>Logger</code> service.</p>\n\n<code-tabs>\n\n  <code-pane header=\"src/app/heroes/hero.service (v2)\" path=\"dependency-injection/src/app/heroes/hero.service.2.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\nimport { Logger } from '../logger.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n\n  constructor(private logger: Logger) {  }\n\n  getHeroes() {\n    this.logger.log('Getting heroes ...');\n    return HEROES;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/hero.service (v1)\" path=\"dependency-injection/src/app/heroes/hero.service.1.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/logger.service\" path=\"dependency-injection/src/app/logger.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class Logger {\n  logs: string[] = []; // capture logs for testing\n\n  log(message: string) {\n    this.logs.push(message);\n    console.log(message);\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p translation-result=\"on\">在这个例子中，<code>getHeroes()</code> 方法通过在获取英雄时通过 <code>Logger</code> 来记录一条消息。</p><p translation-origin=\"off\">In this example, the <code>getHeroes()</code> method uses the <code>Logger</code> service by logging a message when fetching heroes.</p>\n\n<h2 id=\"whats-next\" translation-result=\"on\">下一步是什么？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"whats-next\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"guide/dependency-injection-providers\">依赖提供者</a></p><p translation-origin=\"off\"><a href=\"guide/dependency-injection-providers\">Dependency providers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/dependency-injection-providers\">DI 令牌和提供者</a></p><p translation-origin=\"off\"><a href=\"guide/dependency-injection-providers\">DI tokens and providers</a></p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"guide/dependency-injection-in-action\">依赖注入实战</a> </p><p translation-origin=\"off\"><a href=\"guide/dependency-injection-in-action\">Dependency Injection in Action</a></p>\n\n</li>\n</ul>\n\n  \n</div>\n\n\n<!-- links to this doc:\n - api/core/ClassProvider\n - api/core/ClassSansProvider\n - api/core/ConstructorProvider\n - api/core/ConstructorSansProvider\n - api/core/ExistingProvider\n - api/core/ExistingSansProvider\n - api/core/FactoryProvider\n - api/core/FactorySansProvider\n - api/core/Inject-1\n - api/core/Injectable\n - api/core/Optional\n - api/core/Provider\n - api/core/StaticClassProvider\n - api/core/TypeProvider\n - api/core/ValueProvider\n - errors/NG0201\n - guide/architecture-next-steps\n - guide/architecture-services\n - guide/attribute-binding\n - guide/attribute-directives\n - guide/docs-style-guide\n - guide/example-apps-list\n - guide/glossary\n - guide/http\n - guide/ngmodule-api\n - guide/router\n - guide/testing-services\n - guide/upgrade\n - guide/what-is-angular\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/core/Injectable\n - cli\n - guide/dependency-injection#creating-an-injectable-service\n - guide/dependency-injection#dependency-injection-in-angular\n - guide/dependency-injection#injecting-services\n - guide/dependency-injection#using-services-in-other-services\n - guide/dependency-injection#whats-next\n - guide/dependency-injection-in-action\n - guide/dependency-injection-providers\n - guide/hierarchical-dependency-injection\n - guide/providers\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/dependency-injection.md?message=docs%3A%20请简述你的修改...\n-->"}