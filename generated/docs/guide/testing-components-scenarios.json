{"id":"guide/testing-components-scenarios","title":"Component testing scenarios","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/testing-components-scenarios.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"component-testing-scenarios\" translation-result=\"on\">组件测试场景<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-testing-scenarios\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"component-testing-scenarios\">Component testing scenarios<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-testing-scenarios\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本指南探讨了一些常见的组件测试用例。</p><p translation-origin=\"off\">This guide explores common component testing use cases.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  对于本测试指南中描述的范例应用，参阅<live-example name=\"testing\" embedded-style=\"\" nodownload=\"\">范例应用</live-example>。</p><p translation-origin=\"off\">  For the sample app that the testing guides describe, see the <live-example name=\"testing\" embedded-style=\"\" nodownload=\"\">sample app</live-example>.</p>\n\n<p translation-result=\"on\">  要了解本测试指南中涉及的测试特性，请参阅<live-example name=\"testing\" stackblitz=\"specs\" nodownload=\"\">tests</live-example>。</p><p translation-origin=\"off\">  For the tests features in the testing guides, see <live-example name=\"testing\" stackblitz=\"specs\" nodownload=\"\">tests</live-example>.</p>\n\n</div>\n<h2 id=\"component-binding\" translation-result=\"on\">组件绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-binding\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"component-binding\">Component binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-binding\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在范例应用中，<code>BannerComponent</code> 在 HTML 模板中展示了静态的标题文本。</p><p translation-origin=\"off\">In the example app, the <code>BannerComponent</code> presents static title text in the HTML template.</p>\n\n<p translation-result=\"on\">在少许更改之后，<code>BannerComponent</code> 就会通过绑定组件的 <code>title</code> 属性来渲染动态标题。</p><p translation-origin=\"off\">After a few changes, the <code>BannerComponent</code> presents a dynamic title by binding to\nthe component's <code>title</code> property like this.</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.ts\" region=\"component\" header=\"app/banner/banner.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-banner',\n  template: '&#x3C;h1>{{title}}&#x3C;/h1>',\n  styles: ['h1 { color: green; font-size: 350%}']\n})\nexport class BannerComponent {\n  title = 'Test Tour of Heroes';\n}\n\n</code-example>\n<p translation-result=\"on\">尽管这很小，但你还是决定要添加一个测试来确认该组件实际显示的是你认为合适的内容。</p><p translation-origin=\"off\">As minimal as this is, you decide to add a test to confirm that component\nactually displays the right content where you think it should.</p>\n\n<h4 id=\"query-for-the-h1\" translation-result=\"on\">查询 <em>&#x3C;h1></em> 元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#query-for-the-h1\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"query-for-the-h1\">Query for the <em>&#x3C;h1></em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#query-for-the-h1\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你将编写一系列测试来检查 <code>&#x3C;h1></code> 元素中包裹的 <em>title</em> 属性插值绑定。</p><p translation-origin=\"off\">You'll write a sequence of tests that inspect the value of the <code>&#x3C;h1></code> element\nthat wraps the <em>title</em> property interpolation binding.</p>\n\n<p translation-result=\"on\">你可以修改 <code>beforeEach</code> 以找到带有标准 HTML <code>querySelector</code> 的元素，并把它赋值给 <code>h1</code> 变量。</p><p translation-origin=\"off\">You update the <code>beforeEach</code> to find that element with a standard HTML <code>querySelector</code>\nand assign it to the <code>h1</code> variable.</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"setup\" header=\"app/banner/banner.component.spec.ts (setup)\">\nlet component: BannerComponent;\nlet fixture: <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;BannerComponent>;\nlet h1: HTMLElement;\n\nbeforeEach(async () => {\n  await TestBed.configureTestingModule({\n    declarations: [ BannerComponent ],\n  });\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance; // BannerComponent test instance\n  h1 = fixture.nativeElement.querySelector('h1');\n});\n\n</code-example>\n<a id=\"detect-changes\"></a>\n<h4 id=\"createcomponent-does-not-bind-data\" translation-result=\"on\"><em>createComponent()</em> 不绑定数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#createcomponent-does-not-bind-data\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"createcomponent-does-not-bind-data\"><em>createComponent()</em> does not bind data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#createcomponent-does-not-bind-data\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">对于你的第一个测试，你希望屏幕上显示默认的 <code>title</code> 。你的直觉就是编写一个能立即检查 <code>&#x3C;h1></code> 的测试，就像这样：</p><p translation-origin=\"off\">For your first test you'd like to see that the screen displays the default <code>title</code>.\nYour instinct is to write a test that immediately inspects the <code>&#x3C;h1></code> like this:</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"expect-h1-default-v1\">\nit('should display original title', () => {\n  expect(h1.textContent).toContain(component.title);\n});\n\n</code-example>\n<p translation-result=\"on\"><em>那个测试失败</em>了：</p><p translation-origin=\"off\"><em>That test fails</em> with the message:</p>\n\n<code-example language=\"javascript\">\nexpected '' to contain 'Test Tour of Heroes'.\n</code-example>\n<p translation-result=\"on\"><strong>当 Angular 执行变更检测</strong>时就会发生绑定。</p><p translation-origin=\"off\">Binding happens when Angular performs <strong>change detection</strong>.</p>\n\n<p translation-result=\"on\">在生产环境中，当 Angular 创建一个组件，或者用户输入按键，或者异步活动（比如 AJAX）完成时，就会自动进行变更检测。</p><p translation-origin=\"off\">In production, change detection kicks in automatically\nwhen Angular creates a component or the user enters a keystroke or\nan asynchronous activity (e.g., AJAX) completes.</p>\n\n<p translation-result=\"on\">该 <code>TestBed.createComponent</code> <em>不会</em>触发变化检测，修改后的测试可以证实这一点：</p><p translation-origin=\"off\">The <code>TestBed.createComponent</code> does <em>not</em> trigger change detection; a fact confirmed in the revised test:</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"test-w-o-detect-changes\">\nit('no title in the DOM after createComponent()', () => {\n  expect(h1.textContent).toEqual('');\n});\n\n</code-example>\n<h4 id=\"detectchanges\"><em>detectChanges()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#detectchanges\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">你必须通过调用 <code>fixture.detectChanges()</code> 来告诉 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 执行数据绑定。只有这样， <code>&#x3C;h1></code> 才能拥有预期的标题。</p><p translation-origin=\"off\">You must tell the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> to perform data binding by calling <code>fixture.detectChanges()</code>.\nOnly then does the <code>&#x3C;h1></code> have the expected title.</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"expect-h1-default\">\nit('should display original title after detectChanges()', () => {\n  fixture.detectChanges();\n  expect(h1.textContent).toContain(component.title);\n});\n\n</code-example>\n<p translation-result=\"on\">这里延迟变更检测时机是故意而且有用的。这样才能让测试者在 Angular 启动数据绑定并调用<a href=\"guide/lifecycle-hooks\">生命周期钩子</a>之前，查看并更改组件的状态。</p><p translation-origin=\"off\">Delayed change detection is intentional and useful.\nIt gives the tester an opportunity to inspect and change the state of\nthe component <em>before Angular initiates data binding and calls <a href=\"guide/lifecycle-hooks\">lifecycle hooks</a></em>.</p>\n\n<p translation-result=\"on\">这是另一个测试，它会在调用 <code>fixture.detectChanges()</code> <em>之前</em>改变组件的 <code>title</code> 属性。</p><p translation-origin=\"off\">Here's another test that changes the component's <code>title</code> property <em>before</em> calling <code>fixture.detectChanges()</code>.</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"after-change\">\nit('should display a different test title', () => {\n  component.title = 'Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>';\n  fixture.detectChanges();\n  expect(h1.textContent).toContain('Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>');\n});\n\n</code-example>\n<a id=\"auto-detect-changes\"></a>\n<h4 id=\"automatic-change-detection\" translation-result=\"on\">自动变更检测<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#automatic-change-detection\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"automatic-change-detection\">Automatic change detection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#automatic-change-detection\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>BannerComponent</code> 测试会经常调用 <code>detectChanges</code>。一些测试人员更喜欢让 Angular 测试环境自动运行变更检测。</p><p translation-origin=\"off\">The <code>BannerComponent</code> tests frequently call <code>detectChanges</code>.\nSome testers prefer that the Angular test environment run change detection automatically.</p>\n\n<p translation-result=\"on\">可以通过配置带有 <code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code> 提供者的 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 来实现这一点。我们首先从测试工具函数库中导入它：</p><p translation-origin=\"off\">That's possible by configuring the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> with the <code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code> provider.\nFirst import it from the testing utility library:</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.detect-changes.spec.ts\" region=\"import-ComponentFixtureAutoDetect\" header=\"app/banner/banner.component.detect-changes.spec.ts (import)\">\nimport { <a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a> } from '@angular/core/testing';\n\n</code-example>\n<p translation-result=\"on\">然后把它添加到测试模块配置的 <code>providers</code> 中：</p><p translation-origin=\"off\">Then add it to the <code>providers</code> array of the testing module configuration:</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.detect-changes.spec.ts\" region=\"auto-detect\" header=\"app/banner/banner.component.detect-changes.spec.ts (AutoDetect)\">\nTestBed.configureTestingModule({\n  declarations: [ BannerComponent ],\n  providers: [\n    { provide: <a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a>, useValue: true }\n  ]\n});\n\n</code-example>\n<p translation-result=\"on\">这里有三个测试来说明自动变更检测是如何工作的。</p><p translation-origin=\"off\">Here are three tests that illustrate how automatic change detection works.</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.detect-changes.spec.ts\" region=\"auto-detect-tests\" header=\"app/banner/banner.component.detect-changes.spec.ts (AutoDetect Tests)\">\nit('should display original title', () => {\n  // Hooray! No `fixture.detectChanges()` needed\n  expect(h1.textContent).toContain(comp.title);\n});\n\nit('should still see original title after comp.title change', () => {\n  const oldTitle = comp.title;\n  comp.title = 'Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>';\n  // Displayed title is old because Angular didn't hear the change :(\n  expect(h1.textContent).toContain(oldTitle);\n});\n\nit('should display updated title after detectChanges', () => {\n  comp.title = 'Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>';\n  fixture.detectChanges(); // detect changes explicitly\n  expect(h1.textContent).toContain(comp.title);\n});\n\n</code-example>\n<p translation-result=\"on\">第一个测试显示了自动变更检测的优点。</p><p translation-origin=\"off\">The first test shows the benefit of automatic change detection.</p>\n\n<p translation-result=\"on\">第二个和第三个测试则揭示了一个重要的限制。该 Angular 测试环境<em>不</em>知道测试改变了组件的 <code>title</code>。 <code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code> 服务会响应<em>异步活动，</em>例如 Promise、定时器和 DOM 事件。但却看不见对组件属性的直接同步更新。该测试必须用 <code>fixture.detectChanges()</code> 来触发另一个变更检测周期。</p><p translation-origin=\"off\">The second and third test reveal an important limitation.\nThe Angular testing environment does <em>not</em> know that the test changed the component's <code>title</code>.\nThe <code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code> service responds to <em>asynchronous activities</em> such as promise resolution, timers, and DOM events.\nBut a direct, synchronous update of the component property is invisible.\nThe test must call <code>fixture.detectChanges()</code> manually to trigger another cycle of change detection.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">本指南中的范例总是会<em>显式</em>调用 <code>detectChanges()</code> ，而不用困惑于测试夹具何时会或不会执行变更检测。更频繁的调用 <code>detectChanges()</code> 毫无危害，没必要只在非常必要时才调用它。</p><p translation-origin=\"off\">Rather than wonder when the test fixture will or won't perform change detection,\nthe samples in this guide <em>always call</em> <code>detectChanges()</code> <em>explicitly</em>.\nThere is no harm in calling <code>detectChanges()</code> more often than is strictly necessary.</p>\n\n</div>\n<a id=\"dispatch-event\"></a>\n<h4 id=\"change-an-input-value-with-dispatchevent\" translation-result=\"on\">使用 <em>dispatchEvent()</em> 改变输入框的值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#change-an-input-value-with-dispatchevent\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"change-an-input-value-with-dispatchevent\">Change an input value with <em>dispatchEvent()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#change-an-input-value-with-dispatchevent\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">要模拟用户输入，你可以找到 input 元素并设置它的 <code>value</code> 属性。</p><p translation-origin=\"off\">To simulate user input, you can find the input element and set its <code>value</code> property.</p>\n\n<p translation-result=\"on\">你会调用 <code>fixture.detectChanges()</code> 来触发 Angular 的变更检测。但还有一个重要的中间步骤。</p><p translation-origin=\"off\">You will call <code>fixture.detectChanges()</code> to trigger Angular's change detection.\nBut there is an essential, intermediate step.</p>\n\n<p translation-result=\"on\">Angular 并不知道你为 input 设置过 <code>value</code> 属性。在通过调用 <code>dispatchEvent()</code> 分发 <code>input</code> 事件之前，它不会读取该属性。<em>紧接着</em>你就调用了 <code>detectChanges()</code> 。</p><p translation-origin=\"off\">Angular doesn't know that you set the input element's <code>value</code> property.\nIt won't read that property until you raise the element's <code>input</code> event by calling <code>dispatchEvent()</code>.\n<em>Then</em> you call <code>detectChanges()</code>.</p>\n\n<p translation-result=\"on\">下列例子说明了正确的顺序。</p><p translation-origin=\"off\">The following example demonstrates the proper sequence.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"title-case-pipe\" header=\"app/hero/hero-detail.component.spec.ts (pipe test)\">\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () => {\n  // get the name's input and display elements from the DOM\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  // simulate user entering a new name into the input box\n  nameInput.value = 'quick BROWN  fOx';\n\n  // Dispatch a DOM event so that Angular learns of input value change.\n  // In older browsers, such as IE, you might need a CustomEvent instead. See\n  // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n  nameInput.dispatchEvent(new <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>('input'));\n\n  // Tell Angular to update the display binding through the title pipe\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n</code-example>\n<h2 id=\"component-with-external-files\" translation-result=\"on\">包含外部文件的组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-with-external-files\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"component-with-external-files\">Component with external files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-with-external-files\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">上面的 <code>BannerComponent</code> 是用<em>内联模板</em>和<em>内联 css</em> 定义的，它们分别是在 <code>@<a href=\"api/core/Component#template\" class=\"code-anchor\">Component.template</a></code> 和 <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> 属性中指定的。</p><p translation-origin=\"off\">The <code>BannerComponent</code> above is defined with an <em>inline template</em> and <em>inline css</em>, specified in the <code>@<a href=\"api/core/Component#template\" class=\"code-anchor\">Component.template</a></code> and <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> properties respectively.</p>\n\n<p translation-result=\"on\">很多组件都会分别用 <code>@<a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">Component.templateUrl</a></code> 和 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code>属性来指定<em>外部模板</em>和<em>外部 css</em>，就像下面的 <code>BannerComponent</code> 变体一样。</p><p translation-origin=\"off\">Many components specify <em>external templates</em> and <em>external css</em> with the\n<code>@<a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">Component.templateUrl</a></code> and <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> properties respectively,\nas the following variant of <code>BannerComponent</code> does.</p>\n\n<code-example path=\"testing/src/app/banner/banner-external.component.ts\" region=\"metadata\" header=\"app/banner/banner-external.component.ts (metadata)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-banner',\n  templateUrl: './banner-external.component.html',\n  styleUrls:  ['./banner-external.component.css']\n})\n\n</code-example>\n<p translation-result=\"on\">这个语法告诉 Angular 编译器要在组件编译时读取外部文件。</p><p translation-origin=\"off\">This syntax tells the Angular compiler to read the external files during component compilation.</p>\n\n<p translation-result=\"on\">当运行 <code>ng test</code> 命令时，这不是问题，因为它会<em>在运行测试之前编译应用</em>。</p><p translation-origin=\"off\">That's not a problem when you run the CLI <code>ng test</code> command because it\n<em>compiles the app before running the tests</em>.</p>\n\n<p translation-result=\"on\">但是，如果在<strong>非 CLI 环境中</strong>运行这些测试，那么这个组件的测试可能会失败。例如，如果你在一个 web 编程环境（比如 <a href=\"https://plnkr.co/\">plunker</a> 中运行 <code>BannerComponent</code> 测试，你会看到如下消息：</p><p translation-origin=\"off\">However, if you run the tests in a <strong>non-CLI environment</strong>,\ntests of this component may fail.\nFor example, if you run the <code>BannerComponent</code> tests in a web coding environment such as <a href=\"https://plnkr.co/\">plunker</a>, you'll see a message like this one:</p>\n\n<code-example language=\"sh\" hidecopy=\"\">\nError: This test module uses the component BannerComponent\nwhich is using a \"templateUrl\" or \"styleUrls\", but they were never compiled.\nPlease call \"TestBed.compileComponents\" before your test.\n</code-example>\n<p translation-result=\"on\">当运行环境在测试过程中需要编译源代码时，就会得到这条测试失败的消息。</p><p translation-origin=\"off\">You get this test failure message when the runtime environment\ncompiles the source code <em>during the tests themselves</em>.</p>\n\n<p translation-result=\"on\">要解决这个问题，可以调用 <code>compileComponents()</code>，<a href=\"guide/testing-components-scenarios#compile-components\">如下所示</a>。</p><p translation-origin=\"off\">To correct the problem, call <code>compileComponents()</code> as explained <a href=\"guide/testing-components-scenarios#compile-components\">below</a>.</p>\n\n<a id=\"component-with-dependency\"></a>\n<h2 id=\"component-with-a-dependency\" translation-result=\"on\">具有依赖的组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-with-a-dependency\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"component-with-a-dependency\">Component with a dependency<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-with-a-dependency\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">组件通常都有服务依赖。</p><p translation-origin=\"off\">Components often have service dependencies.</p>\n\n<p translation-result=\"on\"><code>WelcomeComponent</code> 会向登录用户显示一条欢迎信息。它可以基于注入进来的 <code>UserService</code> 的一个属性了解到用户是谁：</p><p translation-origin=\"off\">The <code>WelcomeComponent</code> displays a welcome message to the logged in user.\nIt knows who the user is based on a property of the injected <code>UserService</code>:</p>\n\n<code-example path=\"testing/src/app/welcome/welcome.component.ts\" header=\"app/welcome/welcome.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { UserService } from '../model/user.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-welcome',\n  template: '&#x3C;h3 class=\"welcome\">&#x3C;i>{{welcome}}&#x3C;/i>&#x3C;/h3>'\n})\nexport class WelcomeComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  welcome: string;\n  constructor(private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.welcome = this.userService.isLoggedIn ?\n      'Welcome, ' + this.userService.user.name : 'Please log in.';\n  }\n}\n\n\n</code-example>\n<p translation-result=\"on\"><code>WelcomeComponent</code> 拥有与该服务交互的决策逻辑，该逻辑让这个组件值得测试。这是 spec 文件的测试模块配置：</p><p translation-origin=\"off\">The <code>WelcomeComponent</code> has decision logic that interacts with the service, logic that makes this component worth testing.\nHere's the testing module configuration for the spec file:</p>\n\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"config-test-module\" header=\"app/welcome/welcome.component.spec.ts\">\nTestBed.configureTestingModule({\n   declarations: [ WelcomeComponent ],\n// providers: [ UserService ],  // NO! Don't provide the real service!\n                                // Provide a test-double instead\n   providers: [ { provide: UserService, useValue: userServiceStub } ],\n});\n\n</code-example>\n<p translation-result=\"on\">这次，除了声明<em>被测组件外</em>，该配置还在 <code>providers</code> 列表中加入了 <code>UserService</code> 提供者。但它不是真正的 <code>UserService</code> 。</p><p translation-origin=\"off\">This time, in addition to declaring the <em>component-under-test</em>,\nthe configuration adds a <code>UserService</code> provider to the <code>providers</code> list.\nBut not the real <code>UserService</code>.</p>\n\n<a id=\"service-test-doubles\"></a>\n<h4 id=\"provide-service-test-doubles\" translation-result=\"on\">为服务提供测试替身<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#provide-service-test-doubles\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"provide-service-test-doubles\">Provide service test doubles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#provide-service-test-doubles\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><em>待测组件</em>不必注入真正的服务。事实上，如果它们是测试替身（stubs，fakes，spies 或 mocks），通常会更好。该测试规约的目的是测试组件，而不是服务，使用真正的服务可能会遇到麻烦。</p><p translation-origin=\"off\">A <em>component-under-test</em> doesn't have to be injected with real services.\nIn fact, it is usually better if they are test doubles (stubs, fakes, spies, or mocks).\nThe purpose of the spec is to test the component, not the service,\nand real services can be trouble.</p>\n\n<p translation-result=\"on\">注入真正的 <code>UserService</code> 可能是个噩梦。真正的服务可能要求用户提供登录凭据，并尝试访问认证服务器。这些行为可能难以拦截。为它创建并注册一个测试专用版来代替真正的 <code>UserService</code> 要容易得多，也更安全。</p><p translation-origin=\"off\">Injecting the real <code>UserService</code> could be a nightmare.\nThe real service might ask the user for login credentials and\nattempt to reach an authentication server.\nThese behaviors can be hard to intercept.\nIt is far easier and safer to create and register a test double in place of the real <code>UserService</code>.</p>\n\n<p translation-result=\"on\">这个特定的测试套件提供了 <code>UserService</code> 的最小化模拟，它满足了 <code>WelcomeComponent</code> 及其测试的需求：</p><p translation-origin=\"off\">This particular test suite supplies a minimal mock of the <code>UserService</code> that satisfies the needs of the <code>WelcomeComponent</code> and its tests:</p>\n\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"user-service-stub\" header=\"app/welcome/welcome.component.spec.ts\">\nlet userServiceStub: Partial&#x3C;UserService>;\n\n  userServiceStub = {\n    isLoggedIn: true,\n    user: { name: 'Test User' },\n  };\n\n</code-example>\n<a id=\"get-injected-service\"></a>\n<h4 id=\"get-injected-services\" translation-result=\"on\">取得所注入的服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#get-injected-services\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"get-injected-services\">Get injected services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#get-injected-services\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">这些测试需要访问注入到 <code>WelcomeComponent</code> 中的 <code>UserService</code> 桩。</p><p translation-origin=\"off\">The tests need access to the (stub) <code>UserService</code> injected into the <code>WelcomeComponent</code>.</p>\n\n<p translation-result=\"on\">Angular 有一个分层注入系统。它具有多个层级的注入器，从 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 创建的根注入器开始，直到组件树中的各个层级。</p><p translation-origin=\"off\">Angular has a hierarchical injection system.\nThere can be injectors at multiple levels, from the root injector created by the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>\ndown through the component tree.</p>\n\n<p translation-result=\"on\">获得注入服务的最安全的方式（<strong>始终有效</strong>），就是<strong><em>从被测组件</em>的注入器中获取它</strong>。组件注入器是测试夹具所提供的 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> 中的一个属性。</p><p translation-origin=\"off\">The safest way to get the injected service, the way that <strong><em>always works</em></strong>,\nis to <strong>get it from the injector of the <em>component-under-test</em></strong>.\nThe component injector is a property of the fixture's <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>.</p>\n\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"injected-service\" header=\"WelcomeComponent&#x27;s injector\">\n// UserService actually injected into the component\nuserService = fixture.debugElement.injector.get(UserService);\n\n</code-example>\n<a id=\"testbed-inject\"></a>\n<h4 id=\"testbedinject\"><em>TestBed.inject()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#testbedinject\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">你<em>可能</em>还可以通过 <code>TestBed.inject()</code> 来从根注入器获得服务。这更容易记忆，也不那么啰嗦。但这只有当 Angular 要把根注入器中的服务实例注入测试组件时才是可行的。</p><p translation-origin=\"off\">You <em>may</em> also be able to get the service from the root injector via <code>TestBed.inject()</code>.\nThis is easier to remember and less verbose.\nBut it only works when Angular injects the component with the service instance in the test's root injector.</p>\n\n<p translation-result=\"on\">在下面这个测试套件中， <code>UserService</code><em>唯一的</em>提供者是根测试模块，因此可以安全地调用 <code>TestBed.inject()</code> ，如下所示：</p><p translation-origin=\"off\">In this test suite, the <em>only</em> provider of <code>UserService</code> is the root testing module,\nso it is safe to call <code>TestBed.inject()</code> as follows:</p>\n\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"inject-from-testbed\" header=\"TestBed injector\">\n// UserService from the root injector\nuserService = TestBed.inject(UserService);\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code>TestBed.inject()</code> 不起作用的用例，参阅<a href=\"guide/testing-components-scenarios#component-override\"><em>“覆盖组件提供者”</em></a>部分，它解释了何时以及为什么必须从该组件自身的注入器中获取该服务。</p><p translation-origin=\"off\">For a use case in which <code>TestBed.inject()</code> does not work,\nsee the <a href=\"guide/testing-components-scenarios#component-override\"><em>Override component providers</em></a> section that\nexplains when and why you must get the service from the component's injector instead.</p>\n\n</div>\n<a id=\"welcome-spec-setup\"></a>\n<h4 id=\"final-setup-and-tests\" translation-result=\"on\">最后的设置与测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#final-setup-and-tests\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"final-setup-and-tests\">Final setup and tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#final-setup-and-tests\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">这里是完成的 <code>beforeEach()</code> ，它使用了 <code>TestBed.inject()</code> ：</p><p translation-origin=\"off\">Here's the complete <code>beforeEach()</code>, using <code>TestBed.inject()</code>:</p>\n\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"setup\" header=\"app/welcome/welcome.component.spec.ts\">\nlet userServiceStub: Partial&#x3C;UserService>;\n\nbeforeEach(() => {\n  // stub UserService for test purposes\n  userServiceStub = {\n    isLoggedIn: true,\n    user: { name: 'Test User' },\n  };\n\n  TestBed.configureTestingModule({\n     declarations: [ WelcomeComponent ],\n     providers: [ { provide: UserService, useValue: userServiceStub } ],\n  });\n\n  fixture = TestBed.createComponent(WelcomeComponent);\n  comp    = fixture.componentInstance;\n\n  // UserService from the root injector\n  userService = TestBed.inject(UserService);\n\n  //  get the \"welcome\" element by CSS selector (e.g., by class name)\n  el = fixture.nativeElement.querySelector('.welcome');\n});\n\n</code-example>\n<p translation-result=\"on\">以下是一些测试：</p><p translation-origin=\"off\">And here are some tests:</p>\n\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"tests\" header=\"app/welcome/welcome.component.spec.ts\">\nit('should welcome the user', () => {\n  fixture.detectChanges();\n  const content = el.textContent;\n  expect(content).toContain('Welcome', '\"Welcome ...\"');\n  expect(content).toContain('Test User', 'expected name');\n});\n\nit('should welcome \"Bubba\"', () => {\n  userService.user.name = 'Bubba'; // welcome message hasn't been shown yet\n  fixture.detectChanges();\n  expect(el.textContent).toContain('Bubba');\n});\n\nit('should request login if not logged in', () => {\n  userService.isLoggedIn = false; // welcome message hasn't been shown yet\n  fixture.detectChanges();\n  const content = el.textContent;\n  expect(content).not.toContain('Welcome', 'not welcomed');\n  expect(content).toMatch(/log in/i, '\"log in\"');\n});\n\n</code-example>\n<p translation-result=\"on\">首先是一个健全性测试；它确认了桩服务 <code>UserService</code> 被调用过并能正常工作。</p><p translation-origin=\"off\">The first is a sanity test; it confirms that the stubbed <code>UserService</code> is called and working.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">Jasmine 匹配器的第二个参数（例如 <code>'expected name'</code> ）是一个可选的失败标签。如果此期望失败，Jasmine 就会把这个标签贴到期望失败的消息中。在具有多个期望的测试规约中，它可以帮我们澄清出现了什么问题以及都有哪些期望失败了。</p><p translation-origin=\"off\">The second parameter to the Jasmine matcher (e.g., <code>'expected name'</code>) is an optional failure label.\nIf the expectation fails, Jasmine appends this label to the expectation failure message.\nIn a spec with multiple expectations, it can help clarify what went wrong and which expectation failed.</p>\n\n</div>\n<p translation-result=\"on\">当该服务返回不同的值时，其余的测试会确认该组件的逻辑。第二个测试验证了更改用户名的效果。当用户未登录时，第三个测试会检查组件是否显示了正确的消息。</p><p translation-origin=\"off\">The remaining tests confirm the logic of the component when the service returns different values.\nThe second test validates the effect of changing the user name.\nThe third test checks that the component displays the proper message when there is no logged-in user.</p>\n\n<a id=\"component-with-async-service\"></a>\n<h2 id=\"component-with-async-service\" translation-result=\"on\">带异步服务的组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-with-async-service\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"component-with-async-service\">Component with async service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-with-async-service\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在这个例子中，<code>AboutComponent</code> 模板托管了一个 <code>TwainComponent</code> 。<code>TwainComponent</code> 会显示马克·吐温的名言。</p><p translation-origin=\"off\">In this sample, the <code>AboutComponent</code> template hosts a <code>TwainComponent</code>.\nThe <code>TwainComponent</code> displays Mark Twain quotes.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.ts\" region=\"template\" header=\"app/twain/twain.component.ts (template)\">\ntemplate: `\n  &#x3C;p class=\"twain\">&#x3C;i>{{quote | <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a>}}&#x3C;/i>&#x3C;/p>\n  &#x3C;button (click)=\"getQuote()\">Next quote&#x3C;/button>\n  &#x3C;p class=\"error\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"errorMessage\">{{ errorMessage }}&#x3C;/p>`,\n\n</code-example>\n<p translation-result=\"on\">注意，组件的 <code>quote</code> 属性值会传给 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>。这意味着该属性返回了 <code>Promise</code> 或 <code>Observable</code> 。</p><p translation-origin=\"off\">Note that the value of the component's <code>quote</code> property passes through an <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>.\nThat means the property returns either a <code>Promise</code> or an <code>Observable</code>.</p>\n\n<p translation-result=\"on\">在这个例子中， <code>TwainComponent.getQuote()</code> 方法告诉你 <code>quote</code> 属性会返回一个 <code>Observable</code> 。</p><p translation-origin=\"off\">In this example, the <code>TwainComponent.getQuote()</code> method tells you that\nthe <code>quote</code> property returns an <code>Observable</code>.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.ts\" region=\"get-quote\" header=\"app/twain/twain.component.ts (getQuote)\">\ngetQuote() {\n  this.errorMessage = '';\n  this.quote = this.twainService.getQuote().pipe(\n    startWith('...'),\n    catchError( (err: any) => {\n      // Wait a turn because errorMessage already set once this turn\n      setTimeout(() => this.errorMessage = err.message || err.toString());\n      return of('...'); // reset message to placeholder\n    })\n  );\n\n</code-example>\n<p translation-result=\"on\">该 <code>TwainComponent</code> 从注入的 <code>TwainService</code> 中获取名言。该在服务能返回第一条名言之前，该服务会先返回一个占位流（<code>'...'</code>）。</p><p translation-origin=\"off\">The <code>TwainComponent</code> gets quotes from an injected <code>TwainService</code>.\nThe component starts the returned <code>Observable</code> with a placeholder value (<code>'...'</code>),\nbefore the service can return its first quote.</p>\n\n<p translation-result=\"on\"><code>catchError</code> 会拦截服务错误，准备一条错误信息，并在流的成功通道上返回占位值。它必须等一拍（tick）才能设置 <code>errorMessage</code>，以免在同一个更改检测周期内更新此消息两次。</p><p translation-origin=\"off\">The <code>catchError</code> intercepts service errors, prepares an error message,\nand returns the placeholder value on the success channel.\nIt must wait a tick to set the <code>errorMessage</code>\nin order to avoid updating that message twice in the same change detection cycle.</p>\n\n<p translation-result=\"on\">这些都是你想要测试的特性。</p><p translation-origin=\"off\">These are all features you'll want to test.</p>\n\n<h4 id=\"testing-with-a-spy\" translation-result=\"on\">使用间谍（spy）进行测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#testing-with-a-spy\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"testing-with-a-spy\">Testing with a spy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#testing-with-a-spy\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">在测试组件时，只有该服务的公开 API 才有意义。通常，测试本身不应该调用远程服务器。它们应该模拟这样的调用。这个 <code>app/twain/twain.component.spec.ts</code> 中的环境准备工作展示了一种方法：</p><p translation-origin=\"off\">When testing a component, only the service's public API should matter.\nIn general, tests themselves should not make calls to remote servers.\nThey should emulate such calls. The setup in this <code>app/twain/twain.component.spec.ts</code> shows one way to do that:</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"setup\" header=\"app/twain/twain.component.spec.ts (setup)\">\nbeforeEach(() => {\n  testQuote = 'Test Quote';\n\n  // Create a fake TwainService object with a `getQuote()` spy\n  const twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n  // Make the spy return a synchronous Observable with the test data\n  getQuoteSpy = twainService.getQuote.and.returnValue(of(testQuote));\n\n  TestBed.configureTestingModule({\n    declarations: [TwainComponent],\n    providers: [{provide: TwainService, useValue: twainService}]\n  });\n\n  fixture = TestBed.createComponent(TwainComponent);\n  component = fixture.componentInstance;\n  quoteEl = fixture.nativeElement.querySelector('.twain');\n});\n\n</code-example>\n<a id=\"service-spy\"></a>\n<p translation-result=\"on\">仔细看一下这个间谍。</p><p translation-origin=\"off\">Focus on the spy.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"spy\">\n// Create a fake TwainService object with a `getQuote()` spy\nconst twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n// Make the spy return a synchronous Observable with the test data\ngetQuoteSpy = twainService.getQuote.and.returnValue(of(testQuote));\n\n</code-example>\n<p translation-result=\"on\">这个间谍的设计目标是让所有对 <code>getQuote</code> 的调用都会收到一个带有测试名言的可观察对象。与真正的 <code>getQuote()</code> 方法不同，这个间谍会绕过服务器，并返回一个立即同步提供可用值的可观察对象。</p><p translation-origin=\"off\">The spy is designed such that any call to <code>getQuote</code> receives an observable with a test quote.\nUnlike the real <code>getQuote()</code> method, this spy bypasses the server\nand returns a synchronous observable whose value is available immediately.</p>\n\n<p translation-result=\"on\">虽然这个 <code>Observable</code> 是同步的，但你也可以用这个间谍编写很多有用的测试。</p><p translation-origin=\"off\">You can write many useful tests with this spy, even though its <code>Observable</code> is synchronous.</p>\n\n<a id=\"sync-tests\"></a>\n<h4 id=\"synchronous-tests\" translation-result=\"on\">同步测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#synchronous-tests\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"synchronous-tests\">Synchronous tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#synchronous-tests\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">同步 <code>Observable</code> 的一个关键优势是，你通常可以把异步过程转换成同步测试。</p><p translation-origin=\"off\">A key advantage of a synchronous <code>Observable</code> is that\nyou can often turn asynchronous processes into synchronous tests.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"sync-test\">\nit('should show quote after component initialized', () => {\n  fixture.detectChanges();  // onInit()\n\n  // sync spy result shows testQuote immediately after init\n  expect(quoteEl.textContent).toBe(testQuote);\n  expect(getQuoteSpy.calls.any()).toBe(true, 'getQuote called');\n});\n\n</code-example>\n<p translation-result=\"on\">当间谍的结果同步返回时， <code>getQuote()</code> 方法会在第一个更改检测周期（Angular 在这里调用 <code>ngOnInit</code>）<em>后</em>立即更新屏幕上的消息。</p><p translation-origin=\"off\">Because the spy result returns synchronously, the <code>getQuote()</code> method updates\nthe message on screen immediately <em>after</em>\nthe first change detection cycle during which Angular calls <code>ngOnInit</code>.</p>\n\n<p translation-result=\"on\">你在测试错误路径时就没有这么幸运了。虽然服务间谍会同步返回一个错误，但该组件方法会调用 <code>setTimeout()</code>。在值可用之前，测试必须等待 JavaScript 引擎的至少一个周期。因此，该测试必须是<em>异步的</em>。</p><p translation-origin=\"off\">You're not so lucky when testing the error path.\nAlthough the service spy will return an error synchronously,\nthe component method calls <code>setTimeout()</code>.\nThe test must wait at least one full turn of the JavaScript engine before the\nvalue becomes available. The test must become <em>asynchronous</em>.</p>\n\n<a id=\"fake-async\"></a>\n<h4 id=\"async-test-with-fakeasync\" translation-result=\"on\">使用 <em>fakeAsync()</em> 进行异步测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#async-test-with-fakeasync\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"async-test-with-fakeasync\">Async test with <em>fakeAsync()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#async-test-with-fakeasync\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">要使用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 功能，你必须在测试的环境设置文件中导入 <code>zone.js/testing</code>。如果是用 Angular CLI 创建的项目，那么其 <code>src/test.ts</code> 中已经配置好了 <code>zone-testing</code>。</p><p translation-origin=\"off\">To use <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> functionality, you must import <code>zone.js/testing</code> in your test setup file.\nIf you created your project with the Angular CLI, <code>zone-testing</code> is already imported in <code>src/test.ts</code>.</p>\n\n<p translation-result=\"on\">当该服务返回 <code>ErrorObservable</code> 时，下列测试会对其预期行为进行确认。</p><p translation-origin=\"off\">The following test confirms the expected behavior when the service returns an <code>ErrorObservable</code>.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"error-test\">\nit('should display error when TwainService fails', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     // tell spy to return an error observable\n     getQuoteSpy.and.returnValue(throwError('TwainService test failure'));\n\n     fixture.detectChanges();  // onInit()\n     // sync spy errors immediately after init\n\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();  // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the component's setTimeout()\n\n     fixture.detectChanges();  // update errorMessage within setTimeout()\n\n     expect(errorMessage()).toMatch(/test failure/, 'should display error');\n     expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n   }));\n\n</code-example>\n<p translation-result=\"on\">注意， <code>it()</code> 函数会要求如下形式的参数。</p><p translation-origin=\"off\">Note that the <code>it()</code> function receives an argument of the following form.</p>\n\n<code-example language=\"javascript\">\n<a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => { /* test body */ })\n</code-example>\n<p translation-result=\"on\">通过在一个特殊的 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> test zone</code>（译注：Zone.js 的一个特例） 中运行测试体，<code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 函数可以启用线性编码风格。这个测试体看上去是同步的。没有像 <code>Promise.then()</code> 这样的嵌套语法来破坏控制流。</p><p translation-origin=\"off\">The <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> function enables a linear coding style by running the test body in a special <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> test zone</code>.\nThe test body appears to be synchronous.\nThere is no nested syntax (like a <code>Promise.then()</code>) to disrupt the flow of control.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">限制：如果测试体要进行 <code>XMLHttpRequest</code> （XHR）调用，则 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 函数无效。很少会需要在测试中进行 XHR 调用，但如果你确实要这么做，请参阅下面的 <a href=\"guide/testing-components-scenarios#waitForAsync\"><code>waitForAsync()</code></a> 部分。</p><p translation-origin=\"off\">Limitation: The <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> function won't work if the test body makes an <code>XMLHttpRequest</code> (XHR) call.\nXHR calls within a test are rare, but if you need to call XHR, see <a href=\"guide/testing-components-scenarios#waitForAsync\"><code>waitForAsync()</code></a>, below.</p>\n\n</div>\n<a id=\"tick\"></a>\n<h4 id=\"the-tick-function\" translation-result=\"on\"><em>tick()</em> 函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-tick-function\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"the-tick-function\">The <em>tick()</em> function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-tick-function\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你必须调用 <a href=\"api/core/testing/tick\">tick()</a> 来推进（虚拟）时钟。</p><p translation-origin=\"off\">You do have to call <a href=\"api/core/testing/tick\">tick()</a> to advance the (virtual) clock.</p>\n\n<p translation-result=\"on\">调用 <a href=\"api/core/testing/tick\">tick()</a> 时会在所有挂起的异步活动完成之前模拟时间的流逝。在这种情况下，它会等待错误处理程序中的 <code>setTimeout()</code> 。</p><p translation-origin=\"off\">Calling <a href=\"api/core/testing/tick\">tick()</a> simulates the passage of time until all pending asynchronous activities finish.\nIn this case, it waits for the error handler's <code>setTimeout()</code>.</p>\n\n<p translation-result=\"on\"><a href=\"api/core/testing/tick\">tick()</a> 函数接受毫秒数(milliseconds) 和 tick 选项(tickOptions) 作为参数，毫秒数（默认值为 0）参数表示虚拟时钟要前进多少。比如，如果你在 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 测试中有一个 <code>setTimeout(fn, 100)</code>，你就需要使用 tick(100) 来触发其 fn 回调。 tickOptions 是一个可选参数，它带有一个名为 <code>processNewMacroTasksSynchronously</code> 的属性（默认为 true），表示在 tick 时是否要调用新生成的宏任务。</p><p translation-origin=\"off\">The <a href=\"api/core/testing/tick\">tick()</a> function accepts milliseconds and tickOptions as parameters, the millisecond (defaults to 0 if not provided) parameter represents how much the virtual clock advances. For example, if you have a <code>setTimeout(fn, 100)</code> in a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test, you need to use tick(100) to trigger the fn callback. The tickOptions is an optional parameter with a property called <code>processNewMacroTasksSynchronously</code> (defaults to true) that represents whether to invoke new generated macro tasks when ticking.</p>\n\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-tick\">\nit('should run timeout callback with delay after call <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> with millis', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     let called = false;\n     setTimeout(() => {\n       called = true;\n     }, 100);\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(100);\n     expect(called).toBe(true);\n   }));\n\n</code-example>\n<p translation-result=\"on\"><a href=\"api/core/testing/tick\">tick()</a> 函数是你用 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 导入的 Angular 测试工具函数之一。它是 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 的伴生工具，你只能在 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 测试体内调用它。</p><p translation-origin=\"off\">The <a href=\"api/core/testing/tick\">tick()</a> function is one of the Angular testing utilities that you import with <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.\nIt's a companion to <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> and you can only call it within a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> body.</p>\n\n<h4 id=\"tickoptions\">tickOptions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#tickoptions\"><i class=\"material-icons\">link</i></a></h4>\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-tick-new-macro-task-sync\">\nit('should run new macro task callback with delay after call <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> with millis',\n   <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     function nestedTimer(cb: () => any): void {\n       setTimeout(() => setTimeout(() => cb()));\n     }\n     const callback = jasmine.createSpy('callback');\n     nestedTimer(callback);\n     expect(callback).not.toHaveBeenCalled();\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(0);\n     // the nested timeout will also be triggered\n     expect(callback).toHaveBeenCalled();\n   }));\n\n</code-example>\n<p translation-result=\"on\">在这个例子中，我们有一个新的宏任务（嵌套的 setTimeout），默认情况下，当我们 <code><a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a></code> 时 的 setTimeout 的 <code>outside</code> 和 <code>nested</code> 都会被触发。</p><p translation-origin=\"off\">In this example, we have a new macro task (nested setTimeout), by default, when we <code><a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a></code>, the setTimeout <code>outside</code> and <code>nested</code> will both be triggered.</p>\n\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-tick-new-macro-task-async\">\nit('should not run new macro task callback with delay after call <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> with millis',\n   <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     function nestedTimer(cb: () => any): void {\n       setTimeout(() => setTimeout(() => cb()));\n     }\n     const callback = jasmine.createSpy('callback');\n     nestedTimer(callback);\n     expect(callback).not.toHaveBeenCalled();\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(0, {processNewMacroTasksSynchronously: false});\n     // the nested timeout will not be triggered\n     expect(callback).not.toHaveBeenCalled();\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(0);\n     expect(callback).toHaveBeenCalled();\n   }));\n\n</code-example>\n<p translation-result=\"on\">在某种情况下，我们不希望在 tick 时触发新的宏任务，我们可以使用 <code><a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(milliseconds, {processNewMacroTasksSynchronously: false})</code> 来要求不调用新的宏任务。</p><p translation-origin=\"off\">And in some case, we don't want to trigger the new macro task when ticking, we can use <code><a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(milliseconds, {processNewMacroTasksSynchronously: false})</code> to not invoke new macro task.</p>\n\n<h4 id=\"comparing-dates-inside-fakeasync\" translation-result=\"on\">比较 fakeAsync() 内部的日期<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#comparing-dates-inside-fakeasync\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"comparing-dates-inside-fakeasync\">Comparing dates inside fakeAsync()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#comparing-dates-inside-fakeasync\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 可以模拟时间的流逝，以便让你计算出 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 里面的日期差。</p><p translation-origin=\"off\"><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> simulates passage of time, which allows you to calculate the difference between dates inside <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>.</p>\n\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-date\">\nit('should get Date diff correctly in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     const start = Date.now();\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(100);\n     const end = Date.now();\n     expect(end - start).toBe(100);\n   }));\n\n</code-example>\n<h4 id=\"jasmineclock-with-fakeasync\" translation-result=\"on\">jasmine.clock 与 fakeAsync() 联用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#jasmineclock-with-fakeasync\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"jasmineclock-with-fakeasync\">jasmine.clock with fakeAsync()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#jasmineclock-with-fakeasync\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">Jasmine 还为模拟日期提供了 <code>clock</code> 特性。而 Angular 会在 <code>jasmine.clock().install()</code> 于 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 方法内调用时自动运行这些测试。直到调用了 <code>jasmine.clock().uninstall()</code> 为止。 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 不是必须的，如果嵌套它就抛出错误。</p><p translation-origin=\"off\">Jasmine also provides a <code>clock</code> feature to mock dates. Angular automatically runs tests that are run after\n<code>jasmine.clock().install()</code> is called inside a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> method until <code>jasmine.clock().uninstall()</code> is called. <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> is not needed and throws an error if nested.</p>\n\n<p translation-result=\"on\">默认情况下，此功能处于禁用状态。要启用它，请在导入 <code>zone-testing</code> 之前先设置全局标志。</p><p translation-origin=\"off\">By default, this feature is disabled. To enable it, set a global flag before importing <code>zone-testing</code>.</p>\n\n<p translation-result=\"on\">如果你使用的是 Angular CLI，请在 <code>src/test.ts</code> 中配置这个标志。</p><p translation-origin=\"off\">If you use the Angular CLI, configure this flag in <code>src/test.ts</code>.</p>\n\n<code-example>\n(window as any)['__zone_symbol__fakeAsyncPatchLock'] = true;\nimport 'zone.js/testing';\n</code-example>\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-clock\">\ndescribe('use jasmine.clock()', () => {\n  // need to config __zone_symbol__fakeAsyncPatchLock flag\n  // before loading zone.js/testing\n  beforeEach(() => {\n    jasmine.clock().install();\n  });\n  afterEach(() => {\n    jasmine.clock().uninstall();\n  });\n  it('should auto enter <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>', () => {\n    // is in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> now, don't need to call <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(testFn)\n    let called = false;\n    setTimeout(() => {\n      called = true;\n    }, 100);\n    jasmine.clock().tick(100);\n    expect(called).toBe(true);\n  });\n});\n\n</code-example>\n<h4 id=\"using-the-rxjs-scheduler-inside-fakeasync\" translation-result=\"on\">在 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 中使用 RxJS 调度器<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#using-the-rxjs-scheduler-inside-fakeasync\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"using-the-rxjs-scheduler-inside-fakeasync\">Using the RxJS scheduler inside fakeAsync()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#using-the-rxjs-scheduler-inside-fakeasync\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 使用 RxJS 的调度器，就像使用 <code>setTimeout()</code> 或 <code>setInterval()</code> 一样，但你需要导入 <code>zone.js/plugins/zone-patch-rxjs-fake-async</code> 来给 RxJS 调度器打补丁。</p><p translation-origin=\"off\">You can also use RxJS scheduler in <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> just like using <code>setTimeout()</code> or <code>setInterval()</code>, but you need to import <code>zone.js/plugins/zone-patch-rxjs-fake-async</code> to patch RxJS scheduler.\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-rxjs\">\nit('should get Date diff correctly in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> with rxjs scheduler', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     // need to add `import 'zone.js/plugins/zone-patch-rxjs-fake-async'\n     // to patch rxjs scheduler\n     let result = null;\n     of('hello').pipe(delay(1000)).subscribe(v => {\n       result = v;\n     });\n     expect(result).toBeNull();\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(1000);\n     expect(result).toBe('hello');\n\n     const start = new Date().getTime();\n     let dateDiff = 0;\n     interval(1000).pipe(take(2)).subscribe(() => dateDiff = (new Date().getTime() - start));\n\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(1000);\n     expect(dateDiff).toBe(1000);\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(1000);\n     expect(dateDiff).toBe(2000);\n   }));\n\n</code-example></p>\n\n<h4 id=\"support-more-macrotasks\" translation-result=\"on\">支持更多的 macroTasks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#support-more-macrotasks\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"support-more-macrotasks\">Support more macroTasks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#support-more-macrotasks\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 默认支持以下宏任务：</p><p translation-origin=\"off\">By default, <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> supports the following macro tasks.</p>\n\n<ul>\n<li><code>setTimeout</code></li>\n<li><code>setInterval</code></li>\n<li><code>requestAnimationFrame</code></li>\n<li><code>webkitRequestAnimationFrame</code></li>\n<li><code>mozRequestAnimationFrame</code></li>\n</ul>\n<p translation-result=\"on\">如果你运行其他宏任务，比如 <code>HTMLCanvasElement.toBlob()</code> ，就会抛出 <em>\"Unknown macroTask scheduled in fake async test\"</em> 错误。*</p><p translation-origin=\"off\">If you run other macro tasks such as <code>HTMLCanvasElement.toBlob()</code>, an <em>\"Unknown macroTask scheduled in fake async test\"</em> error will be thrown.</p>\n\n<code-tabs>\n  <code-pane header=\"src/app/shared/canvas.component.spec.ts (failing)\" path=\"testing/src/app/shared/canvas.component.spec.ts\" region=\"without-toBlob-macrotask\">\nimport { <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>, <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>, <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> } from '@angular/core/testing';\n\nimport { CanvasComponent } from './canvas.component';\n\ndescribe('CanvasComponent', () => {\n  beforeEach(async () => {\n    await <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n        .configureTestingModule({\n          declarations: [CanvasComponent],\n        })\n        .compileComponents();\n  });\n\n  it('should be able to generate blob data from canvas', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n       const fixture = TestBed.createComponent(CanvasComponent);\n       const canvasComp = fixture.componentInstance;\n\n       fixture.detectChanges();\n       expect(canvasComp.blobSize).toBe(0);\n\n       <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n       expect(canvasComp.blobSize).toBeGreaterThan(0);\n     }));\n});\n\n</code-pane>\n  <code-pane header=\"src/app/shared/canvas.component.ts\" path=\"testing/src/app/shared/canvas.component.ts\" region=\"main\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a>, <a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'sample-canvas',\n  template: '&#x3C;canvas #sampleCanvas width=\"200\" height=\"200\">&#x3C;/canvas>',\n})\nexport class CanvasComponent implements <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a> {\n  blobSize = 0;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('sampleCanvas') sampleCanvas: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>;\n\n  ngAfterViewInit() {\n    const canvas: HTMLCanvasElement = this.sampleCanvas.nativeElement;\n    const context = canvas.getContext('2d');\n\n    context.clearRect(0, 0, 200, 200);\n    context.fillStyle = '#FF1122';\n    context.fillRect(0, 0, 200, 200);\n\n    canvas.toBlob(blob => {\n      this.blobSize = blob.size;\n    });\n  }\n}\n\n</code-pane>\n</code-tabs>\n<p translation-result=\"on\">如果你想支持这种情况，就要在 <code>beforeEach()</code> 定义你要支持的宏任务。例如：</p><p translation-origin=\"off\">If you want to support such a case, you need to define the macro task you want to support in <code>beforeEach()</code>.\nFor example:</p>\n\n<code-example header=\"src/app/shared/canvas.component.spec.ts (excerpt)\" path=\"testing/src/app/shared/canvas.component.spec.ts\" region=\"enable-toBlob-macrotask\">\nbeforeEach(() => {\n  (window as any).__zone_symbol__FakeAsyncTestMacroTask = [\n    {\n      source: 'HTMLCanvasElement.toBlob',\n      callbackArgs: [{size: 200}],\n    },\n  ];\n});\n\n</code-example>\n<p translation-result=\"on\">注意，要在依赖 Zone.js 的应用中使用 <code>&#x3C;canvas></code> 元素，你需要导入 <code>zone-patch-canvas</code> 补丁（或者在 <code>polyfills.ts</code> 中，或者在用到 <code>&#x3C;canvas></code> 的那个文件中）：</p><p translation-origin=\"off\">Note that in order to make the <code>&#x3C;canvas></code> element Zone.js-aware in your app, you need to import the <code>zone-patch-canvas</code> patch (either in <code>polyfills.ts</code> or in the specific file that uses <code>&#x3C;canvas></code>):</p>\n\n<code-example header=\"src/polyfills.ts or src/app/shared/canvas.component.ts\" path=\"testing/src/app/shared/canvas.component.ts\" region=\"import-canvas-patch\">\n// Import patch to make async `HTMLCanvasElement` methods (such as `.toBlob()`) Zone.js-aware.\n// Either import in `polyfills.ts` (if used in more than one places in the app) or in the component\n// file using `HTMLCanvasElement` (if it is only used in a single file).\nimport 'zone.js/plugins/zone-patch-canvas';\n\n</code-example>\n<h4 id=\"async-observables\" translation-result=\"on\">异步可观察对象<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#async-observables\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"async-observables\">Async observables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#async-observables\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你可能已经对前面这些测试的测试覆盖率感到满意。</p><p translation-origin=\"off\">You might be satisfied with the test coverage of these tests.</p>\n\n<p translation-result=\"on\">但是，你可能也会为另一个事实感到不安：真实的服务并不是这样工作的。真实的服务会向远程服务器发送请求。服务器需要一定的时间才能做出响应，并且其响应体肯定不会像前面两个测试中一样是立即可用的。</p><p translation-origin=\"off\">However, you might be troubled by the fact that the real service doesn't quite behave this way.\nThe real service sends requests to a remote server.\nA server takes time to respond and the response certainly won't be available immediately\nas in the previous two tests.</p>\n\n<p translation-result=\"on\">如果能像下面这样从 <code>getQuote()</code> 间谍中返回一个<em>异步的</em>可观察对象，你的测试就会更真实地反映现实世界。</p><p translation-origin=\"off\">Your tests will reflect the real world more faithfully if you return an <em>asynchronous</em> observable\nfrom the <code>getQuote()</code> spy like this.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"async-setup\">\n// Simulate delayed observable values with the `asyncData()` helper\ngetQuoteSpy.and.returnValue(asyncData(testQuote));\n\n</code-example>\n<h4 id=\"async-observable-helpers\" translation-result=\"on\">异步可观察对象测试助手<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#async-observable-helpers\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"async-observable-helpers\">Async observable helpers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#async-observable-helpers\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">异步可观察对象可以由测试助手 <code>asyncData</code> 生成。测试助手 <code>asyncData</code> 是一个你必须自行编写的工具函数，当然也可以从下面的范例代码中复制它。</p><p translation-origin=\"off\">The async observable was produced by an <code>asyncData</code> helper.\nThe <code>asyncData</code> helper is a utility function that you'll have to write yourself, or you can copy this one from the sample code.</p>\n\n<code-example path=\"testing/src/testing/async-observable-helpers.ts\" region=\"async-data\" header=\"testing/async-observable-helpers.ts\">\n/**\n * Create async observable that emits-once and completes\n * after a JS engine turn\n */\nexport function asyncData&#x3C;T>(data: T) {\n  return defer(() => Promise.resolve(data));\n}\n\n</code-example>\n<p translation-result=\"on\">这个助手返回的可观察对象会在 JavaScript 引擎的下一个周期中发送 <code>data</code> 值。</p><p translation-origin=\"off\">This helper's observable emits the <code>data</code> value in the next turn of the JavaScript engine.</p>\n\n<p translation-result=\"on\"><a href=\"http://reactivex.io/documentation/operators/defer.html\">RxJS 的 <code>defer()</code> 操作符</a>返回一个可观察对象。它的参数是一个返回 Promise 或可观察对象的工厂函数。当某个订阅者订阅 <em>defer</em> 生成的可观察对象时，defer 就会调用此工厂函数生成新的可观察对象，并让该订阅者订阅这个新对象。</p><p translation-origin=\"off\">The <a href=\"http://reactivex.io/documentation/operators/defer.html\">RxJS <code>defer()</code> operator</a> returns an observable.\nIt takes a factory function that returns either a promise or an observable.\nWhen something subscribes to <em>defer</em>'s observable,\nit adds the subscriber to a new observable created with that factory.</p>\n\n<p translation-result=\"on\"><code>defer()</code> 操作符会把 <code>Promise.resolve()</code> 转换成一个新的可观察对象，它和 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 一样只会发送一次然后立即结束（complete）。这样，当订阅者收到数据后就会自动取消订阅。</p><p translation-origin=\"off\">The <code>defer()</code> operator transforms the <code>Promise.resolve()</code> into a new observable that,\nlike <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, emits once and completes.\nSubscribers are unsubscribed after they receive the data value.</p>\n\n<p translation-result=\"on\">还有一个类似的用来生成异步错误的测试助手。</p><p translation-origin=\"off\">There's a similar helper for producing an async error.</p>\n\n<code-example path=\"testing/src/testing/async-observable-helpers.ts\" region=\"async-error\">\n/**\n * Create async observable error that errors\n * after a JS engine turn\n */\nexport function asyncError&#x3C;T>(errorObject: any) {\n  return defer(() => Promise.reject(errorObject));\n}\n\n</code-example>\n<h4 id=\"more-async-tests\" translation-result=\"on\">更多异步测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#more-async-tests\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"more-async-tests\">More async tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#more-async-tests\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">现在，<code>getQuote()</code> 间谍正在返回异步可观察对象，你的大多数测试都必须是异步的。</p><p translation-origin=\"off\">Now that the <code>getQuote()</code> spy is returning async observables,\nmost of your tests will have to be async as well.</p>\n\n<p translation-result=\"on\">下面是一个 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 测试，用于演示你在真实世界中所期望的数据流。</p><p translation-origin=\"off\">Here's a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test that demonstrates the data flow you'd expect\nin the real world.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"fake-async-test\">\nit('should show quote after getQuote (<a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>)', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     fixture.detectChanges();  // ngOnInit()\n     expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();                   // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the observable to get the quote\n     fixture.detectChanges();  // update view\n\n     expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n     expect(errorMessage()).toBeNull('should not show error');\n   }));\n\n</code-example>\n<p translation-result=\"on\">注意，quote 元素会在 <code>ngOnInit()</code> 之后显示占位符 <code>'...'</code>。因为第一句名言尚未到来。</p><p translation-origin=\"off\">Notice that the quote element displays the placeholder value (<code>'...'</code>) after <code>ngOnInit()</code>.\nThe first quote hasn't arrived yet.</p>\n\n<p translation-result=\"on\">要清除可观察对象中的第一句名言，你可以调用 <a href=\"api/core/testing/tick\">tick()</a> 。然后调用 <code>detectChanges()</code> 来告诉 Angular 更新屏幕。</p><p translation-origin=\"off\">To flush the first quote from the observable, you call <a href=\"api/core/testing/tick\">tick()</a>.\nThen call <code>detectChanges()</code> to tell Angular to update the screen.</p>\n\n<p translation-result=\"on\">然后，你可以断言 quote 元素是否显示了预期的文本。</p><p translation-origin=\"off\">Then you can assert that the quote element displays the expected text.</p>\n\n<a id=\"waitForAsync\"></a>\n<h4 id=\"async-test-with-waitforasync\" translation-result=\"on\">用 <em>waitForAsync()</em> 进行异步测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#async-test-with-waitforasync\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"async-test-with-waitforasync\">Async test with <em>waitForAsync()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#async-test-with-waitforasync\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">要使用 <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 函数，你必须在 test 的设置文件中导入 <code>zone.js/testing</code>。如果你是用 Angular CLI 创建的项目，那就已经在 <code>src/test.ts</code> 中导入过 <code>zone-testing</code> 了。</p><p translation-origin=\"off\">To use <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> functionality, you must import <code>zone.js/testing</code> in your test setup file.\nIf you created your project with the Angular CLI, <code>zone-testing</code> is already imported in <code>src/test.ts</code>.</p>\n\n<p translation-result=\"on\">这是之前的 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 测试，用 <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 工具函数重写的版本。</p><p translation-origin=\"off\">Here's the previous <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test, re-written with the <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> utility.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"waitForAsync-test\">\nit('should show quote after getQuote (<a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>)', <a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>(() => {\n     fixture.detectChanges();  // ngOnInit()\n     expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n     fixture.whenStable().then(() => {  // wait for async getQuote\n       fixture.detectChanges();         // update view with quote\n       expect(quoteEl.textContent).toBe(testQuote);\n       expect(errorMessage()).toBeNull('should not show error');\n     });\n   }));\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 工具函数通过把测试代码安排到在特殊的<em>异步测试区（async test zone）</em>下运行来隐藏某些用来处理异步的样板代码。你不需要把 Jasmine 的 <code>done()</code> 传给测试并让测试调用 <code>done()</code>，因为它在 Promise 或者可观察对象的回调函数中是 <code>undefined</code>。</p><p translation-origin=\"off\">The <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> utility hides some asynchronous boilerplate by arranging for the tester's code\nto run in a special <em>async test zone</em>.\nYou don't need to pass Jasmine's <code>done()</code> into the test and call <code>done()</code> because it is <code>undefined</code> in promise or observable callbacks.</p>\n\n<p translation-result=\"on\">但是，可以通过调用 <code>fixture.whenStable()</code> 函数来揭示本测试的异步性，因为该函数打破了线性的控制流。</p><p translation-origin=\"off\">But the test's asynchronous nature is revealed by the call to <code>fixture.whenStable()</code>,\nwhich breaks the linear flow of control.</p>\n\n<p translation-result=\"on\">在 <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 中使用 <code>intervalTimer()</code>（比如 <code>setInterval()</code>）时，别忘了在测试后通过 <code>clearInterval()</code> 取消这个定时器，否则 <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 永远不会结束。</p><p translation-origin=\"off\">When using an <code>intervalTimer()</code> such as <code>setInterval()</code> in <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code>, remember to cancel the timer with <code>clearInterval()</code> after the test, otherwise the <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> never ends.</p>\n\n<a id=\"when-stable\"></a>\n<h4 id=\"whenstable\"><em>whenStable</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#whenstable\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">测试必须等待 <code>getQuote()</code> 可观察对象发出下一句名言。它并没有调用 <a href=\"api/core/testing/tick\">tick()</a>，而是调用了 <code>fixture.whenStable()</code> 。</p><p translation-origin=\"off\">The test must wait for the <code>getQuote()</code> observable to emit the next quote.\nInstead of calling <a href=\"api/core/testing/tick\">tick()</a>, it calls <code>fixture.whenStable()</code>.</p>\n\n<p translation-result=\"on\"><code>fixture.whenStable()</code> 返回一个 Promise，它会在 JavaScript 引擎的任务队列变空时解析。在这个例子中，当可观察对象发出第一句名言时，任务队列就会变为空。</p><p translation-origin=\"off\">The <code>fixture.whenStable()</code> returns a promise that resolves when the JavaScript engine's\ntask queue becomes empty.\nIn this example, the task queue becomes empty when the observable emits the first quote.</p>\n\n<p translation-result=\"on\">测试会在该 Promise 的回调中继续进行，它会调用 <code>detectChanges()</code> 来用期望的文本更新 quote 元素。</p><p translation-origin=\"off\">The test resumes within the promise callback, which calls <code>detectChanges()</code> to\nupdate the quote element with the expected text.</p>\n\n<a id=\"jasmine-done\"></a>\n<h4 id=\"jasmine-done\">Jasmine <em>done()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#jasmine-done\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">虽然 <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 和 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 函数可以大大简化 Angular 的异步测试，但你仍然可以回退到传统技术，并给 <code>it</code> 传一个以 <a href=\"https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support\"><code>done</code> 回调</a>为参数的函数。</p><p translation-origin=\"off\">While the <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> and <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> functions greatly\nsimplify Angular asynchronous testing,\nyou can still fall back to the traditional technique\nand pass <code>it</code> a function that takes a\n<a href=\"https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support\"><code>done</code> callback</a>.</p>\n\n<p translation-result=\"on\">但你不能在 <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 或 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 函数中调用 <code>done()</code>，因为那里的 <code>done</code> 参数是 <code>undefined</code>。</p><p translation-origin=\"off\">You can't call <code>done()</code> in <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> or <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> functions, because the <code>done parameter</code>\nis <code>undefined</code>.</p>\n\n<p translation-result=\"on\">现在，你要自己负责串联各种 Promise、处理错误，并在适当的时机调用 <code>done()</code>。</p><p translation-origin=\"off\">Now you are responsible for chaining promises, handling errors, and calling <code>done()</code> at the appropriate moments.</p>\n\n<p translation-result=\"on\">编写带有 <code>done()</code> 的测试函数要比用 <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 和 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 的形式笨重。但是当代码涉及到像 <code>setInterval</code> 这样的 <code>intervalTimer()</code> 时，它往往是必要的。</p><p translation-origin=\"off\">Writing test functions with <code>done()</code>, is more cumbersome than <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code>and <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>, but it is occasionally necessary when code involves the <code>intervalTimer()</code> like <code>setInterval</code>.</p>\n\n<p translation-result=\"on\">这里是上一个测试的另外两种版本，用 <code>done()</code> 编写。第一个订阅了通过组件的 <code>quote</code> 属性暴露给模板的 <code>Observable</code>。</p><p translation-origin=\"off\">Here are two more versions of the previous test, written with <code>done()</code>.\nThe first one subscribes to the <code>Observable</code> exposed to the template by the component's <code>quote</code> property.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"quote-done-test\">\nit('should show last quote (quote done)', (done: DoneFn) => {\n  fixture.detectChanges();\n\n  component.quote.pipe(last()).subscribe(() => {\n    fixture.detectChanges();  // update view with quote\n    expect(quoteEl.textContent).toBe(testQuote);\n    expect(errorMessage()).toBeNull('should not show error');\n    done();\n  });\n});\n\n</code-example>\n<p translation-result=\"on\">RxJS 的 <code>last()</code> 操作符会在完成之前发出可观察对象的最后一个值，它同样是测试名言。<code>subscribe</code> 回调会调用 <code>detectChanges()</code> 来使用测试名言刷新的 quote 元素，方法与之前的测试一样。</p><p translation-origin=\"off\">The RxJS <code>last()</code> operator emits the observable's last value before completing, which will be the test quote.\nThe <code>subscribe</code> callback calls <code>detectChanges()</code> to\nupdate the quote element with the test quote, in the same manner as the earlier tests.</p>\n\n<p translation-result=\"on\">在某些测试中，你可能更关心注入的服务方法是如何被调的以及它返回了什么值，而不是屏幕显示的内容。</p><p translation-origin=\"off\">In some tests, you're more interested in how an injected service method was called and what values it returned,\nthan what appears on screen.</p>\n\n<p translation-result=\"on\">服务间谍，比如伪 <code>TwainService</code> 上的 <code>qetQuote()</code> 间谍，可以给你那些信息，并对视图的状态做出断言。</p><p translation-origin=\"off\">A service spy, such as the <code>qetQuote()</code> spy of the fake <code>TwainService</code>,\ncan give you that information and make assertions about the state of the view.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"spy-done-test\">\nit('should show quote after getQuote (spy done)', (done: DoneFn) => {\n  fixture.detectChanges();\n\n  // the spy's most recent call returns the observable with the test quote\n  getQuoteSpy.calls.mostRecent().returnValue.subscribe(() => {\n    fixture.detectChanges();  // update view with quote\n    expect(quoteEl.textContent).toBe(testQuote);\n    expect(errorMessage()).toBeNull('should not show error');\n    done();\n  });\n});\n\n</code-example>\n<a id=\"marble-testing\"></a>\n<h2 id=\"component-marble-tests\" translation-result=\"on\">组件的弹珠测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-marble-tests\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"component-marble-tests\">Component marble tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-marble-tests\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">前面的 <code>TwainComponent</code> 测试通过 <code>asyncData</code> 和 <code>asyncError</code> 工具函数模拟了一个来自 <code>TwainService</code> 的异步响应体可观察对象。</p><p translation-origin=\"off\">The previous <code>TwainComponent</code> tests simulated an asynchronous observable response\nfrom the <code>TwainService</code> with the <code>asyncData</code> and <code>asyncError</code> utilities.</p>\n\n<p translation-result=\"on\">你可以自己编写这些简短易用的函数。不幸的是，对于很多常见的场景来说，它们太简单了。可观察对象经常会发送很多次，可能是在经过一段显著的延迟之后。组件可以用重叠的值序列和错误序列来协调多个可观察对象。</p><p translation-origin=\"off\">These are short, simple functions that you can write yourself.\nUnfortunately, they're too simple for many common scenarios.\nAn observable often emits multiple times, perhaps after a significant delay.\nA component may coordinate multiple observables\nwith overlapping sequences of values and errors.</p>\n\n<p translation-result=\"on\"><strong>RxJS 弹珠测试</strong>是一种测试可观察场景的好方法，它既简单又复杂。你很可能已经看过用于说明可观察对象是如何工作<a href=\"https://rxmarbles.com/\">弹珠图</a>。弹珠测试使用类似的弹珠语言来指定测试中的可观察流和期望值。</p><p translation-origin=\"off\"><strong>RxJS marble testing</strong> is a great way to test observable scenarios,\nboth simple and complex.\nYou've likely seen the <a href=\"https://rxmarbles.com/\">marble diagrams</a>\nthat illustrate how observables work.\nMarble testing uses a similar marble language to\nspecify the observable streams and expectations in your tests.</p>\n\n<p translation-result=\"on\">下面的例子用弹珠测试再次实现了 <code>TwainComponent</code> 中的两个测试。</p><p translation-origin=\"off\">The following examples revisit two of the <code>TwainComponent</code> tests\nwith marble testing.</p>\n\n<p translation-result=\"on\">首先安装 npm 包 <code>jasmine-marbles</code>。然后导入你需要的符号。</p><p translation-origin=\"off\">Start by installing the <code>jasmine-marbles</code> npm package.\nThen import the symbols you need.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"import-marbles\" header=\"app/twain/twain.component.marbles.spec.ts (import marbles)\">\nimport { cold, getTestScheduler } from 'jasmine-marbles';\n\n</code-example>\n<p translation-result=\"on\">获取名言的完整测试方法如下：</p><p translation-origin=\"off\">Here's the complete test for getting a quote:</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"get-quote-test\">\nit('should show quote after getQuote (marbles)', () => {\n  // observable test quote value and complete(), after delay\n  const q$ = cold('---x|', { x: testQuote });\n  getQuoteSpy.and.returnValue( q$ );\n\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  getTestScheduler().flush(); // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the observables\n\n  fixture.detectChanges(); // update view\n\n  expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n  expect(errorMessage()).toBeNull('should not show error');\n});\n\n</code-example>\n<p translation-result=\"on\">注意，这个 Jasmine 测试是同步的。没有 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>。 弹珠测试使用测试调度程序（scheduler）来模拟同步测试中的时间流逝。</p><p translation-origin=\"off\">Notice that the Jasmine test is synchronous. There's no <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>.\nMarble testing uses a test scheduler to simulate the passage of time\nin a synchronous test.</p>\n\n<p translation-result=\"on\">弹珠测试的美妙之处在于对可观察对象流的视觉定义。这个测试定义了一个<a href=\"guide/testing-components-scenarios#cold-observable\"><em>冷</em>可观察对象</a>，它等待三<a href=\"guide/testing-components-scenarios#marble-frame\">帧</a>（ <code>---</code> ），发出一个值（ <code>x</code> ），并完成（ <code>|</code> ）。在第二个参数中，你把值标记（ <code>x</code> ）映射到了发出的值（ <code>testQuote</code> ）。</p><p translation-origin=\"off\">The beauty of marble testing is in the visual definition of the observable streams.\nThis test defines a <a href=\"guide/testing-components-scenarios#cold-observable\"><em>cold</em> observable</a> that waits\nthree <a href=\"guide/testing-components-scenarios#marble-frame\">frames</a> (<code>---</code>),\nemits a value (<code>x</code>), and completes (<code>|</code>).\nIn the second argument you map the value marker (<code>x</code>) to the emitted value (<code>testQuote</code>).</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"test-quote-marbles\">\nconst q$ = cold('---x|', { x: testQuote });\n\n</code-example>\n<p translation-result=\"on\">这个弹珠库会构造出相应的可观察对象，测试程序把它用作 <code>getQuote</code> 间谍的返回值。</p><p translation-origin=\"off\">The marble library constructs the corresponding observable, which the\ntest sets as the <code>getQuote</code> spy's return value.</p>\n\n<p translation-result=\"on\">当你准备好激活弹珠的可观察对象时，就告诉 <code>TestScheduler</code> 把它准备好的任务队列<em>刷新</em>一下。</p><p translation-origin=\"off\">When you're ready to activate the marble observables,\nyou tell the <code>TestScheduler</code> to <em>flush</em> its queue of prepared tasks like this.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"test-scheduler-flush\">\ngetTestScheduler().flush(); // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the observables\n\n</code-example>\n<p translation-result=\"on\">这个步骤的作用类似于之前的 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 和 <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> 例子中的 <a href=\"api/core/testing/tick\">tick()</a> 和 <code>whenStable()</code> 测试。对这种测试的权衡策略与那些例子是一样的。</p><p translation-origin=\"off\">This step serves a purpose analogous to <a href=\"api/core/testing/tick\">tick()</a> and <code>whenStable()</code> in the\nearlier <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> and <code><a href=\"api/core/testing/waitForAsync\" class=\"code-anchor\">waitForAsync</a>()</code> examples.\nThe balance of the test is the same as those examples.</p>\n\n<h4 id=\"marble-error-testing\" translation-result=\"on\">弹珠错误测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#marble-error-testing\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"marble-error-testing\">Marble error testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#marble-error-testing\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">下面是 <code>getQuote()</code> 错误测试的弹珠测试版。</p><p translation-origin=\"off\">Here's the marble testing version of the <code>getQuote()</code> error test.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"error-test\">\nit('should display error when TwainService fails', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  // observable error after delay\n  const q$ = cold('---#|', null, new Error('TwainService test failure'));\n  getQuoteSpy.and.returnValue( q$ );\n\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  getTestScheduler().flush(); // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the observables\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();                     // component shows error after a setTimeout()\n  fixture.detectChanges();    // update error message\n\n  expect(errorMessage()).toMatch(/test failure/, 'should display error');\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n}));\n\n</code-example>\n<p translation-result=\"on\">它仍然是异步测试，调用 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 和 <a href=\"api/core/testing/tick\">tick()</a>，因为该组件在处理错误时会调用 <code>setTimeout()</code>。</p><p translation-origin=\"off\">It's still an async test, calling <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> and <a href=\"api/core/testing/tick\">tick()</a>, because the component itself\ncalls <code>setTimeout()</code> when processing errors.</p>\n\n<p translation-result=\"on\">看看这个弹珠的可观察定义。</p><p translation-origin=\"off\">Look at the marble observable definition.</p>\n\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"error-marbles\">\nconst q$ = cold('---#|', null, new Error('TwainService test failure'));\n\n</code-example>\n<p translation-result=\"on\">这是一个<em>冷</em>可观察对象，等待三帧，然后发出一个错误，井号（<code>#</code>）标出了在第三个参数中指定错误的发生时间。第二个参数为 null，因为该可观察对象永远不会发出值。</p><p translation-origin=\"off\">This is a <em>cold</em> observable that waits three frames and then emits an error,\nThe hash (<code>#</code>) indicates the timing of the error that is specified in the third argument.\nThe second argument is null because the observable never emits a value.</p>\n\n<h4 id=\"learn-about-marble-testing\" translation-result=\"on\">了解弹珠测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#learn-about-marble-testing\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"learn-about-marble-testing\">Learn about marble testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#learn-about-marble-testing\"><i class=\"material-icons\">link</i></a></h4>\n\n<a id=\"marble-frame\"></a>\n<p translation-result=\"on\"><em>弹珠帧</em>是测试时间线上的虚拟单位。每个符号（ <code>-</code> ， <code>x</code> ， <code>|</code> ， <code>#</code> ）都表示经过了一帧。</p><p translation-origin=\"off\">A <em>marble frame</em> is a virtual unit of testing time.\nEach symbol (<code>-</code>, <code>x</code>, <code>|</code>, <code>#</code>) marks the passing of one frame.</p>\n\n<a id=\"cold-observable\"></a>\n<p translation-result=\"on\"><em>冷</em>可观察对象在你订阅它之前不会产生值。你的大多数应用中可观察对象都是冷的。所有的 <a href=\"guide/http\"><em>HttpClient</em></a> 方法返回的都是冷可观察对象。</p><p translation-origin=\"off\">A <em>cold</em> observable doesn't produce values until you subscribe to it.\nMost of your application observables are cold.\nAll <a href=\"guide/http\"><em>HttpClient</em></a> methods return cold observables.</p>\n\n<p translation-result=\"on\">而<em>热</em>可观察对象在订阅它<em>之前</em>就已经在生成了这些值。用来报告路由器活动的 <a href=\"api/router/Router#events\"><em>Router.events</em></a> 可观察对象就是一种<em>热</em>可观察对象。</p><p translation-origin=\"off\">A <em>hot</em> observable is already producing values <em>before</em> you subscribe to it.\nThe <a href=\"api/router/Router#events\"><em>Router.events</em></a> observable,\nwhich reports router activity, is a <em>hot</em> observable.</p>\n\n<p translation-result=\"on\">RxJS 弹珠测试这个主题非常丰富，超出了本指南的范围。你可以在网上了解它，先从其<a href=\"https://rxjs.dev/guide/testing/marble-testing\">官方文档</a>开始。</p><p translation-origin=\"off\">RxJS marble testing is a rich subject, beyond the scope of this guide.\nLearn about it on the web, starting with the\n<a href=\"https://rxjs.dev/guide/testing/marble-testing\">official documentation</a>.</p>\n\n<a id=\"component-with-input-output\"></a>\n<h2 id=\"component-with-inputs-and-outputs\" translation-result=\"on\">具有输入和输出属性的组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-with-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"component-with-inputs-and-outputs\">Component with inputs and outputs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-with-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">具有输入和输出属性的组件通常会出现在宿主组件的视图模板中。宿主使用属性绑定来设置输入属性，并使用事件绑定来监听输出属性引发的事件。</p><p translation-origin=\"off\">A component with inputs and outputs typically appears inside the view template of a host component.\nThe host uses a property binding to set the input property and an event binding to\nlisten to events raised by the output property.</p>\n\n<p translation-result=\"on\">本测试的目标是验证这些绑定是否如预期般工作。这些测试应该设置输入值并监听输出事件。</p><p translation-origin=\"off\">The testing goal is to verify that such bindings work as expected.\nThe tests should set input values and listen for output events.</p>\n\n<p translation-result=\"on\"><code>DashboardHeroComponent</code> 是这类组件的一个小例子。它会显示由 <code>DashboardComponent</code> 提供的一个英雄。点击这个英雄就会告诉 <code>DashboardComponent</code>，用户已经选择了此英雄。</p><p translation-origin=\"off\">The <code>DashboardHeroComponent</code> is a tiny example of a component in this role.\nIt displays an individual hero provided by the <code>DashboardComponent</code>.\nClicking that hero tells the <code>DashboardComponent</code> that the user has selected the hero.</p>\n\n<p translation-result=\"on\"><code>DashboardHeroComponent</code> 会像这样内嵌在 <code>DashboardComponent</code> 模板中的：</p><p translation-origin=\"off\">The <code>DashboardHeroComponent</code> is embedded in the <code>DashboardComponent</code> template like this:</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard.component.html\" region=\"dashboard-hero\" header=\"app/dashboard/dashboard.component.html (excerpt)\">\n&#x3C;dashboard-hero *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"  class=\"col-1-4\"\n  [hero]=hero  (selected)=\"gotoDetail($event)\" >\n&#x3C;/dashboard-hero>\n\n</code-example>\n<p translation-result=\"on\"><code>DashboardHeroComponent</code> 出现在 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 复写器中，把它的输入属性 <code>hero</code> 设置为当前的循环变量，并监听该组件的 <code>selected</code> 事件。</p><p translation-origin=\"off\">The <code>DashboardHeroComponent</code> appears in an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater, which sets each component's <code>hero</code> input property\nto the looping value and listens for the component's <code>selected</code> event.</p>\n\n<p translation-result=\"on\">这里是组件的完整定义：</p><p translation-origin=\"off\">Here's the component's full definition:</p>\n\n<a id=\"dashboard-hero-component\"></a>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.ts\" region=\"component\" header=\"app/dashboard/dashboard-hero.component.ts (component)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'dashboard-hero',\n  template: `\n    &#x3C;div (click)=\"click()\" class=\"hero\">\n      {{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}\n    &#x3C;/div>`,\n  styleUrls: [ './dashboard-hero.component.css' ]\n})\nexport class DashboardHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() selected = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;Hero>();\n  click() { this.selected.emit(this.hero); }\n}\n\n</code-example>\n<p translation-result=\"on\">在测试一个组件时，像这样简单的场景没什么内在价值，但值得了解它。你可以继续尝试这些方法：</p><p translation-origin=\"off\">While testing a component this simple has little intrinsic value, it's worth knowing how.\nYou can use one of these approaches:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">用 <code>DashboardComponent</code> 来测试它。</p><p translation-origin=\"off\">Test it as used by <code>DashboardComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">把它作为一个独立的组件进行测试。</p><p translation-origin=\"off\">Test it as a stand-alone component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">用 <code>DashboardComponent</code> 的一个替代品来测试它。</p><p translation-origin=\"off\">Test it as used by a substitute for <code>DashboardComponent</code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">快速看一眼 <code>DashboardComponent</code> 构造函数就知道不建议采用第一种方法：</p><p translation-origin=\"off\">A quick look at the <code>DashboardComponent</code> constructor discourages the first approach:</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard.component.ts\" region=\"ctor\" header=\"app/dashboard/dashboard.component.ts (constructor)\">\nconstructor(\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private heroService: HeroService) {\n}\n\n</code-example>\n<p translation-result=\"on\"><code>DashboardComponent</code> 依赖于 Angular 的路由器和 <code>HeroService</code> 。你可能不得不用测试替身来代替它们，这有很多工作。路由器看上去特别有挑战性。</p><p translation-origin=\"off\">The <code>DashboardComponent</code> depends on the Angular router and the <code>HeroService</code>.\nYou'd probably have to replace them both with test doubles, which is a lot of work.\nThe router seems particularly challenging.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><a href=\"guide/testing-components-scenarios#routing-component\">下面</a>的讨论涵盖了如何测试那些需要用到路由器的组件。</p><p translation-origin=\"off\">The <a href=\"guide/testing-components-scenarios#routing-component\">discussion below</a> covers testing components that require the router.</p>\n\n</div>\n<p translation-result=\"on\">当前的目标是测试 <code>DashboardHeroComponent</code> ，而不是 <code>DashboardComponent</code> ，所以试试第二个和第三个选项。</p><p translation-origin=\"off\">The immediate goal is to test the <code>DashboardHeroComponent</code>, not the <code>DashboardComponent</code>,\nso, try the second and third options.</p>\n\n<a id=\"dashboard-standalone\"></a>\n<h4 id=\"test-dashboardherocomponent-stand-alone\" translation-result=\"on\">单独测试 <em>DashboardHeroComponent</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#test-dashboardherocomponent-stand-alone\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"test-dashboardherocomponent-stand-alone\">Test <em>DashboardHeroComponent</em> stand-alone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#test-dashboardherocomponent-stand-alone\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">这里是 spec 文件中环境设置部分的内容。</p><p translation-origin=\"off\">Here's the meat of the spec file setup.</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"setup\" header=\"app/dashboard/dashboard-hero.component.spec.ts (setup)\">\n<a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n    .configureTestingModule({declarations: [DashboardHeroComponent]})\nfixture = TestBed.createComponent(DashboardHeroComponent);\ncomp = fixture.componentInstance;\n\n// find the hero's <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> and element\nheroDe = fixture.debugElement.query(By.css('.hero'));\nheroEl = heroDe.nativeElement;\n\n// mock the hero supplied by the parent component\nexpectedHero = {id: 42, name: 'Test Name'};\n\n// simulate the parent setting the input property with that hero\ncomp.hero = expectedHero;\n\n// <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> initial data binding\nfixture.detectChanges();\n\n</code-example>\n<p translation-result=\"on\">注意这些设置代码如何把一个测试英雄（ <code>expectedHero</code> ）赋值给组件的 <code>hero</code> 属性的，它模仿了 <code>DashboardComponent</code> 在其复写器中通过属性绑定来设置它的方式。</p><p translation-origin=\"off\">Note how the setup code assigns a test hero (<code>expectedHero</code>) to the component's <code>hero</code> property,\nemulating the way the <code>DashboardComponent</code> would set it\nvia the property binding in its repeater.</p>\n\n<p translation-result=\"on\">下面的测试验证了英雄名是通过绑定传播到模板的。</p><p translation-origin=\"off\">The following test verifies that the hero name is propagated to the template via a binding.</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"name-test\">\nit('should display hero name in uppercase', () => {\n  const expectedPipedName = expectedHero.name.toUpperCase();\n  expect(heroEl.textContent).toContain(expectedPipedName);\n});\n\n</code-example>\n<p translation-result=\"on\">因为<a href=\"guide/testing-components-scenarios#dashboard-hero-component\">模板</a>把英雄的名字传给了 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a></code>，所以测试必须要让元素值与其大写形式的名字一致。</p><p translation-origin=\"off\">Because the <a href=\"guide/testing-components-scenarios#dashboard-hero-component\">template</a> passes the hero name through the Angular <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a></code>,\nthe test must match the element value with the upper-cased name.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">这个小测试演示了 Angular 测试会如何验证一个组件的可视化表示形式 - 这是<a href=\"guide/testing-components-basics#component-class-testing\">组件类测试</a>所无法实现的 - 成本相对较低，无需进行更慢、更复杂的端到端测试。</p><p translation-origin=\"off\">This small test demonstrates how Angular tests can verify a component's visual\nrepresentation—something not possible with\n<a href=\"guide/testing-components-basics#component-class-testing\">component class tests</a>—at\nlow cost and without resorting to much slower and more complicated end-to-end tests.</p>\n\n</div>\n<h4 id=\"clicking\" translation-result=\"on\">点击<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#clicking\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"clicking\">Clicking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#clicking\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">单击该英雄应该会让一个宿主组件（可能是 <code>DashboardComponent</code>）监听到 <code>selected</code> 事件。</p><p translation-origin=\"off\">Clicking the hero should raise a <code>selected</code> event that\nthe host component (<code>DashboardComponent</code> presumably) can hear:</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"click-test\">\nit('should raise selected event when clicked (triggerEventHandler)', () => {\n  let selectedHero: Hero;\n  comp.selected.subscribe((hero: Hero) => selectedHero = hero);\n\n  heroDe.triggerEventHandler('click', null);\n  expect(selectedHero).toBe(expectedHero);\n});\n\n</code-example>\n<p translation-result=\"on\">该组件的 <code>selected</code> 属性给消费者返回了一个 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>，它看起来像是 RxJS 的同步 <code>Observable</code>。 该测试只有在宿主组件<em>隐式</em>触发时才需要<em>显式</em>订阅它。</p><p translation-origin=\"off\">The component's <code>selected</code> property returns an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>,\nwhich looks like an RxJS synchronous <code>Observable</code> to consumers.\nThe test subscribes to it <em>explicitly</em> just as the host component does <em>implicitly</em>.</p>\n\n<p translation-result=\"on\">当组件的行为符合预期时，单击此英雄的元素就会告诉组件的 <code>selected</code> 属性发出了一个 <code>hero</code> 对象。</p><p translation-origin=\"off\">If the component behaves as expected, clicking the hero's element\nshould tell the component's <code>selected</code> property to emit the <code>hero</code> object.</p>\n\n<p translation-result=\"on\">该测试通过对 <code>selected</code> 的订阅来检测该事件。</p><p translation-origin=\"off\">The test detects that event through its subscription to <code>selected</code>.</p>\n\n<a id=\"trigger-event-handler\"></a>\n<h4 id=\"triggereventhandler\"><em>triggerEventHandler</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#triggereventhandler\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">前面测试中的 <code>heroDe</code> 是一个指向英雄条目 <code>&#x3C;div></code> 的 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>。</p><p translation-origin=\"off\">The <code>heroDe</code> in the previous test is a <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> that represents the hero <code>&#x3C;div></code>.</p>\n\n<p translation-result=\"on\">它有一些用于抽象与原生元素交互的 Angular 属性和方法。\n这个测试会使用事件名称 <code>click</code> 来调用 <code>DebugElement.triggerEventHandler</code>。\n<code>click</code> 的事件绑定到了 <code>DashboardHeroComponent.click()</code>。</p><p translation-origin=\"off\">It has Angular properties and methods that abstract interaction with the native element.\nThis test calls the <code>DebugElement.triggerEventHandler</code> with the \"click\" event name.\nThe \"click\" event binding responds by calling <code>DashboardHeroComponent.click()</code>.</p>\n\n<p translation-result=\"on\">Angular 的 <code>DebugElement.triggerEventHandler</code> 可以用<strong>事件的名字</strong>触发<strong>任何数据绑定事件</strong>。\n第二个参数是传给事件处理器的事件对象。</p><p translation-origin=\"off\">The Angular <code>DebugElement.triggerEventHandler</code> can raise <em>any data-bound event</em> by its <em>event name</em>.\nThe second parameter is the event object passed to the handler.</p>\n\n<p translation-result=\"on\">该测试使用事件对象 <code>null</code> 触发了一次 <code>click</code> 事件。</p><p translation-origin=\"off\">The test triggered a \"click\" event with a <code>null</code> event object.</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"trigger-event-handler\">\nheroDe.triggerEventHandler('click', null);\n\n</code-example>\n<p translation-result=\"on\">测试程序假设（在这里应该这样)运行时间的事件处理器（组件的 <code>click()</code> 方法）不关心事件对象。</p><p translation-origin=\"off\">The test assumes (correctly in this case) that the runtime\nevent handler—the component's <code>click()</code> method—doesn't\ncare about the event object.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">其它处理器的要求比较严格。比如，<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令期望一个带有 <code>button</code> 属性的对象，该属性用于指出点击时按下的是哪个鼠标按钮。\n如果不给出这个事件对象，<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令就会抛出一个错误。</p><p translation-origin=\"off\">Other handlers are less forgiving. For example, the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>\ndirective expects an object with a <code>button</code> property\nthat identifies which mouse button (if any) was pressed during the click.\nThe <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive throws an error if the event object is missing.</p>\n\n</div>\n<h4 id=\"click-the-element\" translation-result=\"on\">点击该元素<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#click-the-element\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"click-the-element\">Click the element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#click-the-element\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">下面这个测试改为调用原生元素自己的 <code>click()</code> 方法，它对于<em>这个组件</em>来说相当完美。</p><p translation-origin=\"off\">The following test alternative calls the native element's own <code>click()</code> method,\nwhich is perfectly fine for <em>this component</em>.</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"click-test-2\">\nit('should raise selected event when clicked (element.click)', () => {\n  let selectedHero: Hero;\n  comp.selected.subscribe((hero: Hero) => selectedHero = hero);\n\n  heroEl.click();\n  expect(selectedHero).toBe(expectedHero);\n});\n\n</code-example>\n<a id=\"click-helper\"></a>\n<h4 id=\"click-helper\" translation-result=\"on\"><em>click()</em> 辅助函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#click-helper\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"click-helper\"><em>click()</em> helper<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#click-helper\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">点击按钮、链接或者任意 HTML 元素是很常见的测试任务。</p><p translation-origin=\"off\">Clicking a button, an anchor, or an arbitrary HTML element is a common test task.</p>\n\n<p translation-result=\"on\">把<em>点击事件</em>的处理过程包装到如下的 <code>click()</code> 辅助函数中，可以让这项任务更一致、更简单：</p><p translation-origin=\"off\">Make that consistent and easy by encapsulating the <em>click-triggering</em> process\nin a helper such as the <code>click()</code> function below:</p>\n\n<code-example path=\"testing/src/testing/index.ts\" region=\"click-event\" header=\"testing/index.ts (click helper)\">\n/** Button events to pass to `DebugElement.triggerEventHandler` for <a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a> event handler */\nexport const ButtonClickEvents = {\n   left:  { button: 0 },\n   right: { button: 2 }\n};\n\n/** Simulate element click. Defaults to mouse left-button click event. */\nexport function click(el: <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> | HTMLElement, eventObj: any = ButtonClickEvents.left): void {\n  if (el instanceof HTMLElement) {\n    el.click();\n  } else {\n    el.triggerEventHandler('click', eventObj);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">第一个参数是<strong>用来点击的元素</strong>。如果你愿意，可以将自定义的事件对象传给第二个参数。\n默认的是（局部的）<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\" target=\"_blank\">鼠标左键事件对象</a>，\n它被许多事件处理器接受，包括 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令。</p><p translation-origin=\"off\">The first parameter is the <em>element-to-click</em>. If you wish, you can pass a\ncustom event object as the second parameter. The default is a (partial)\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\">left-button mouse event object</a>\naccepted by many handlers including the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\"><code>click()</code> 辅助函数<strong>不是</strong>Angular 测试工具之一。\n它是在<strong>本章的例子代码</strong>中定义的函数方法，被所有测试例子所用。\n如果你喜欢它，将它添加到你自己的辅助函数集。</p><p translation-origin=\"off\">The <code>click()</code> helper function is <strong>not</strong> one of the Angular testing utilities.\nIt's a function defined in <em>this guide's sample code</em>.\nAll of the sample tests use it.\nIf you like it, add it to your own collection of helpers.</p>\n\n</div>\n<p translation-result=\"on\">下面是把前面的测试用 <code>click</code> 辅助函数重写后的版本。</p><p translation-origin=\"off\">Here's the previous test, rewritten using the click helper.</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"click-test-3\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test with click helper)\">\nit('should raise selected event when clicked (click helper)', () => {\n  let selectedHero: Hero;\n  comp.selected.subscribe((hero: Hero) => selectedHero = hero);\n\n  click(heroDe);  // click helper with <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>\n  click(heroEl);  // click helper with native element\n\n  expect(selectedHero).toBe(expectedHero);\n});\n\n</code-example>\n<a id=\"component-inside-test-host\"></a>\n<h2 id=\"component-inside-a-test-host\" translation-result=\"on\">位于测试宿主中的组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-inside-a-test-host\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"component-inside-a-test-host\">Component inside a test host<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#component-inside-a-test-host\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">前面的这些测试都是自己扮演宿主元素 <code>DashboardComponent</code> 的角色。\n但是当 <code>DashboardHeroComponent</code> 真的绑定到某个宿主元素时还能正常工作吗？</p><p translation-origin=\"off\">The previous tests played the role of the host <code>DashboardComponent</code> themselves.\nBut does the <code>DashboardHeroComponent</code> work correctly when properly data-bound to a host component?</p>\n\n<p translation-result=\"on\">固然，你也可以测试真实的 <code>DashboardComponent</code>。\n但要想这么做需要做很多准备工作，特别是它的模板中使用了某些特性，如 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>、\n其它组件、布局 HTML、附加绑定、注入了多个服务的构造函数、如何用正确的方式与那些服务交互等。</p><p translation-origin=\"off\">You could test with the actual <code>DashboardComponent</code>.\nBut doing so could require a lot of setup,\nespecially when its template features an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater,\nother components, layout HTML, additional bindings,\na constructor that injects multiple services,\nand it starts interacting with those services right away.</p>\n\n<p translation-result=\"on\">想出这么多需要努力排除的干扰，只是为了证明一点 —— 可以造出这样一个令人满意的<em>测试宿主</em>：</p><p translation-origin=\"off\">Imagine the effort to disable these distractions, just to prove a point\nthat can be made satisfactorily with a <em>test host</em> like this one:</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"test-host\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test host)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &#x3C;dashboard-hero\n      [hero]=\"hero\" (selected)=\"onSelected($event)\">\n    &#x3C;/dashboard-hero>`\n})\nclass TestHostComponent {\n  hero: Hero = {id: 42, name: 'Test Name'};\n  selectedHero: Hero;\n  onSelected(hero: Hero) {\n    this.selectedHero = hero;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">这个测试宿主像 <code>DashboardComponent</code> 那样绑定了 <code>DashboardHeroComponent</code>，但是没有 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>、\n没有 <code>HeroService</code>，也没有 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>。</p><p translation-origin=\"off\">This test host binds to <code>DashboardHeroComponent</code> as the <code>DashboardComponent</code> would\nbut without the noise of the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>, the <code>HeroService</code>, or the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater.</p>\n\n<p translation-result=\"on\">这个测试宿主使用其测试用的英雄设置了组件的输入属性 <code>hero</code>。\n它使用 <code>onSelected</code> 事件处理器绑定了组件的 <code>selected</code> 事件，其中把事件中发出的英雄记录到了 <code>selectedHero</code> 属性中。</p><p translation-origin=\"off\">The test host sets the component's <code>hero</code> input property with its test hero.\nIt binds the component's <code>selected</code> event with its <code>onSelected</code> handler,\nwhich records the emitted hero in its <code>selectedHero</code> property.</p>\n\n<p translation-result=\"on\">稍后，这个测试就可以轻松检查 <code>selectedHero</code> 以验证 <code>DashboardHeroComponent.selected</code> 事件确实发出了所期望的英雄。</p><p translation-origin=\"off\">Later, the tests will be able to easily check <code>selectedHero</code> to verify that the\n<code>DashboardHeroComponent.selected</code> event emitted the expected hero.</p>\n\n<p translation-result=\"on\">这个<em>测试宿主</em>中的准备代码和独立测试中的准备过程类似：</p><p translation-origin=\"off\">The setup for the <em>test-host</em> tests is similar to the setup for the stand-alone tests:</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"test-host-setup\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test host setup)\">\n<a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n    .configureTestingModule({declarations: [DashboardHeroComponent, TestHostComponent]})\n// create TestHostComponent instead of DashboardHeroComponent\nfixture = TestBed.createComponent(TestHostComponent);\ntestHost = fixture.componentInstance;\nheroEl = fixture.nativeElement.querySelector('.hero');\nfixture.detectChanges();  // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> initial data binding\n\n</code-example>\n<p translation-result=\"on\">这个测试模块的配置信息有三个重要的不同点：</p><p translation-origin=\"off\">This testing module configuration shows three important differences:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">它同时<strong>声明</strong>了 <code>DashboardHeroComponent</code> 和 <code>TestHostComponent</code>。</p><p translation-origin=\"off\">It <em>declares</em> both the <code>DashboardHeroComponent</code> and the <code>TestHostComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">它<strong>创建</strong>了 <code>TestHostComponent</code>，而非 <code>DashboardHeroComponent</code>。</p><p translation-origin=\"off\">It <em>creates</em> the <code>TestHostComponent</code> instead of the <code>DashboardHeroComponent</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>TestHostComponent</code> 通过绑定机制设置了 <code>DashboardHeroComponent.hero</code>。</p><p translation-origin=\"off\">The <code>TestHostComponent</code> sets the <code>DashboardHeroComponent.hero</code> with a binding.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\"><code>createComponent</code> 返回的 <code>fixture</code> 里有 <code>TestHostComponent</code> 实例，而非 <code>DashboardHeroComponent</code> 组件实例。</p><p translation-origin=\"off\">The <code>createComponent</code> returns a <code>fixture</code> that holds an instance of <code>TestHostComponent</code> instead of an instance of <code>DashboardHeroComponent</code>.</p>\n\n<p translation-result=\"on\">当然，创建 <code>TestHostComponent</code> 有创建 <code>DashboardHeroComponent</code> 的副作用，因为后者出现在前者的模板中。\n英雄元素（<code>heroEl</code>)的查询语句仍然可以在测试 DOM 中找到它，尽管元素树比以前更深。</p><p translation-origin=\"off\">Creating the <code>TestHostComponent</code> has the side-effect of creating a <code>DashboardHeroComponent</code>\nbecause the latter appears within the template of the former.\nThe query for the hero element (<code>heroEl</code>) still finds it in the test DOM,\nalbeit at greater depth in the element tree than before.</p>\n\n<p translation-result=\"on\">这些测试本身和它们的孤立版本几乎相同：</p><p translation-origin=\"off\">The tests themselves are almost identical to the stand-alone version:</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"test-host-tests\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test-host)\">\nit('should display hero name', () => {\n  const expectedPipedName = testHost.hero.name.toUpperCase();\n  expect(heroEl.textContent).toContain(expectedPipedName);\n});\n\nit('should raise selected event when clicked', () => {\n  click(heroEl);\n  // selected hero should be the same data bound hero\n  expect(testHost.selectedHero).toBe(testHost.hero);\n});\n\n</code-example>\n<p translation-result=\"on\">只有 selected 事件的测试不一样。它确保被选择的 <code>DashboardHeroComponent</code> 英雄确实通过事件绑定被传递到宿主组件。</p><p translation-origin=\"off\">Only the selected event test differs. It confirms that the selected <code>DashboardHeroComponent</code> hero\nreally does find its way up through the event binding to the host component.</p>\n\n<a id=\"routing-component\"></a>\n<h2 id=\"routing-component\" translation-result=\"on\">路由组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#routing-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"routing-component\">Routing component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#routing-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">所谓<em>路由组件</em>就是指会要求 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 导航到其它组件的组件。\n<code>DashboardComponent</code> 就是一个<em>路由组件</em>，因为用户可以通过点击仪表盘中的某个<em>英雄按钮</em>来导航到 <code>HeroDetailComponent</code>。</p><p translation-origin=\"off\">A <em>routing component</em> is a component that tells the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> to navigate to another component.\nThe <code>DashboardComponent</code> is a <em>routing component</em> because the user can\nnavigate to the <code>HeroDetailComponent</code> by clicking on one of the <em>hero buttons</em> on the dashboard.</p>\n\n<p translation-result=\"on\">路由确实很复杂。\n测试 <code>DashboardComponent</code> 看上去有点令人生畏，因为它牵扯到和 <code>HeroService</code> 一起注入进来的 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。</p><p translation-origin=\"off\">Routing is pretty complicated.\nTesting the <code>DashboardComponent</code> seemed daunting in part because it involves the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>,\nwhich it injects together with the <code>HeroService</code>.</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard.component.ts\" region=\"ctor\" header=\"app/dashboard/dashboard.component.ts (constructor)\">\nconstructor(\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private heroService: HeroService) {\n}\n\n</code-example>\n<p translation-result=\"on\">使用间谍来 Mock <code>HeroService</code> 是一个<a href=\"guide/testing-components-scenarios#component-with-async-service\">熟悉的故事</a>。\n但是 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 的 API 很复杂，并且与其它服务和应用的前置条件纠缠在一起。它应该很难进行 Mock 吧？</p><p translation-origin=\"off\">Mocking the <code>HeroService</code> with a spy is a <a href=\"guide/testing-components-scenarios#component-with-async-service\">familiar story</a>.\nBut the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> has a complicated API and is entwined with other services and application preconditions. Might it be difficult to mock?</p>\n\n<p translation-result=\"on\">庆幸的是，在这个例子中不会，因为 <code>DashboardComponent</code> 并没有深度使用 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>。</p><p translation-origin=\"off\">Fortunately, not in this case because the <code>DashboardComponent</code> isn't doing much with the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code></p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard.component.ts\" region=\"goto-detail\" header=\"app/dashboard/dashboard.component.ts (goToDetail)\">\ngotoDetail(hero: Hero) {\n  const url = `/heroes/${hero.id}`;\n  this.router.navigateByUrl(url);\n}\n\n</code-example>\n<p translation-result=\"on\">这是<em>路由组件</em>中的通例。\n一般来说，你应该测试组件而不是路由器，应该只关心组件有没有根据给定的条件导航到正确的地址。</p><p translation-origin=\"off\">This is often the case with <em>routing components</em>.\nAs a rule you test the component, not the router,\nand care only if the component navigates with the right address under the given conditions.</p>\n\n<p translation-result=\"on\">为<em>这个组件</em>的测试套件提供路由器的间谍就像提供 <code>HeroService</code> 的间谍一样简单。</p><p translation-origin=\"off\">Providing a router spy for <em>this component</em> test suite happens to be as easy\nas providing a <code>HeroService</code> spy.</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard.component.spec.ts\" region=\"router-spy\" header=\"app/dashboard/dashboard.component.spec.ts (spies)\">\nconst routerSpy = jasmine.createSpyObj('<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>', ['navigateByUrl']);\nconst heroServiceSpy = jasmine.createSpyObj('HeroService', ['getHeroes']);\n\n<a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n    .configureTestingModule({\n      providers: [\n        {provide: HeroService, useValue: heroServiceSpy}, {provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, useValue: routerSpy}\n      ]\n    })\n\n</code-example>\n<p translation-result=\"on\">下面这个测试会点击正在显示的英雄，并确认 <code>Router.navigateByUrl</code> 曾用所期待的 URL 调用过。</p><p translation-origin=\"off\">The following test clicks the displayed hero and confirms that\n<code>Router.navigateByUrl</code> is called with the expected url.</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard.component.spec.ts\" region=\"navigate-test\" header=\"app/dashboard/dashboard.component.spec.ts (navigate test)\">\nit('should tell ROUTER to navigate when hero clicked', () => {\n  heroClick();  // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> click on first inner &#x3C;div class=\"hero\">\n\n  // args passed to router.navigateByUrl() spy\n  const spy = router.navigateByUrl as jasmine.Spy;\n  const navArgs = spy.calls.first().args[0];\n\n  // expecting to navigate to id of the component's first hero\n  const id = comp.heroes[0].id;\n  expect(navArgs).toBe('/heroes/' + id, 'should nav to HeroDetail for first hero');\n});\n\n</code-example>\n<a id=\"routed-component-w-param\"></a>\n<h2 id=\"routed-components\" translation-result=\"on\">路由目标组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#routed-components\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"routed-components\">Routed components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#routed-components\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><em>路由目标组件</em>是指 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 导航到的目标。\n它测试起来可能很复杂，特别是当路由到的这个组件<em>包含参数</em>的时候。\n<code>HeroDetailComponent</code> 就是一个<em>路由目标组件</em>，它是某个路由定义指向的目标。</p><p translation-origin=\"off\">A <em>routed component</em> is the destination of a <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> navigation.\nIt can be trickier to test, especially when the route to the component <em>includes parameters</em>.\nThe <code>HeroDetailComponent</code> is a <em>routed component</em> that is the destination of such a route.</p>\n\n<p translation-result=\"on\">当用户点击<em>仪表盘</em>中的英雄时，<code>DashboardComponent</code> 会要求 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 导航到 <code>heroes/:id</code>。\n<code>:id</code> 是一个路由参数，它的值就是所要编辑的英雄的 <code>id</code>。</p><p translation-origin=\"off\">When a user clicks a <em>Dashboard</em> hero, the <code>DashboardComponent</code> tells the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>\nto navigate to <code>heroes/:id</code>.\nThe <code>:id</code> is a route parameter whose value is the <code>id</code> of the hero to edit.</p>\n\n<p translation-result=\"on\">该 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 会根据那个 URL 匹配到一个指向 <code>HeroDetailComponent</code> 的路由。\n它会创建一个带有路由信息的 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 对象，并把它注入到一个 <code>HeroDetailComponent</code> 的新实例中。</p><p translation-origin=\"off\">The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> matches that URL to a route to the <code>HeroDetailComponent</code>.\nIt creates an <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> object with the routing information and\ninjects it into a new instance of the <code>HeroDetailComponent</code>.</p>\n\n<p translation-result=\"on\">下面是 <code>HeroDetailComponent</code> 的构造函数：</p><p translation-origin=\"off\">Here's the <code>HeroDetailComponent</code> constructor:</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.ts\" region=\"ctor\" header=\"app/hero/hero-detail.component.ts (constructor)\">\nconstructor(\n  private heroDetailService: HeroDetailService,\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n}\n\n</code-example>\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 组件需要一个 <code>id</code> 参数，以便通过 <code>HeroDetailService</code> 获取相应的英雄。\n该组件只能从 <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> 属性中获取这个 <code>id</code>，这个属性是一个 <code>Observable</code>。</p><p translation-origin=\"off\">The <code>HeroDetail</code> component needs the <code>id</code> parameter so it can fetch\nthe corresponding hero via the <code>HeroDetailService</code>.\nThe component has to get the <code>id</code> from the <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> property\nwhich is an <code>Observable</code>.</p>\n\n<p translation-result=\"on\">它不能仅仅引用 <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> 的 <code>id</code> 属性。\n该组件不得不<em>订阅</em> <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> 这个可观察对象，要做好它在生命周期中随时会发生变化的准备。</p><p translation-origin=\"off\">It can't just reference the <code>id</code> property of the <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code>.\nThe component has to <em>subscribe</em> to the <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> observable and be prepared\nfor the <code>id</code> to change during its lifetime.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.ts\" region=\"ng-on-init\" header=\"app/hero/hero-detail.component.ts (ngOnInit)\">\nngOnInit(): void {\n  // get hero when `id` param changes\n  this.route.paramMap.subscribe(pmap => this.getHero(pmap.get('id')));\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><a href=\"guide/router-tutorial-toh\">路由教程：英雄之旅</a>一章的 <a href=\"guide/router-tutorial-toh#activated-route-in-action\">ActivatedRoute 实战</a>部分详细讲解了 <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code>。</p><p translation-origin=\"off\">The <a href=\"guide/router-tutorial-toh#activated-route-in-action\">ActivatedRoute in action</a> section of the <a href=\"guide/router-tutorial-toh\">Router tutorial: tour of heroes</a> guide covers <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> in more detail.</p>\n\n</div>\n<p translation-result=\"on\">通过操纵注入到组件构造函数中的这个 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，测试可以探查 <code>HeroDetailComponent</code> 是如何对不同的 <code>id</code> 参数值做出响应的。</p><p translation-origin=\"off\">Tests can explore how the <code>HeroDetailComponent</code> responds to different <code>id</code> parameter values\nby manipulating the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> injected into the component's constructor.</p>\n\n<p translation-result=\"on\">你已经知道了如何给 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 和数据服务安插间谍。</p><p translation-origin=\"off\">You know how to spy on the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> and a data service.</p>\n\n<p translation-result=\"on\">不过对于 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>，你要采用另一种方式，因为：</p><p translation-origin=\"off\">You'll take a different approach with <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> because</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 在测试期间，<code>paramMap</code> 会返回一个能发出多个值的 <code>Observable</code>。</p><p translation-origin=\"off\"><code>paramMap</code> returns an <code>Observable</code> that can emit more than one value\nduring a test.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 你需要路由器的辅助函数 <code><a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>()</code> 来创建 <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code>。</p><p translation-origin=\"off\">You need the router helper function, <code><a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>()</code>, to create a <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 针对<em>路由目标组件</em>的其它测试需要一个 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 的测试替身。</p><p translation-origin=\"off\">Other <em>routed component</em> tests need a test double for <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">这些差异表明你需要一个可复用的桩类（stub）。</p><p translation-origin=\"off\">These differences argue for a re-usable stub class.</p>\n\n<h4 id=\"activatedroutestub\"><em>ActivatedRouteStub</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#activatedroutestub\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">下面的 <code>ActivatedRouteStub</code> 类就是作为 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> 类的测试替身使用的。</p><p translation-origin=\"off\">The following <code>ActivatedRouteStub</code> class serves as a test double for <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.</p>\n\n<code-example path=\"testing/src/testing/activated-route-stub.ts\" region=\"activated-route-stub\" header=\"testing/activated-route-stub.ts (ActivatedRouteStub)\">\nimport { <a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>, <a href=\"api/router/Params\" class=\"code-anchor\">Params</a> } from '@angular/router';\nimport { ReplaySubject } from 'rxjs';\n\n/**\n * An ActivateRoute test double with a `paramMap` observable.\n * Use the `setParamMap()` method to add the next `paramMap` value.\n */\nexport class ActivatedRouteStub {\n  // Use a ReplaySubject to share previous values with subscribers\n  // and pump new values into the `paramMap` observable\n  private subject = new ReplaySubject&#x3C;<a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>>();\n\n  constructor(initialParams?: <a href=\"api/router/Params\" class=\"code-anchor\">Params</a>) {\n    this.setParamMap(initialParams);\n  }\n\n  /** The mock paramMap observable */\n  readonly paramMap = this.subject.asObservable();\n\n  /** Set the paramMap observable's next value */\n  setParamMap(params: <a href=\"api/router/Params\" class=\"code-anchor\">Params</a> = {}) {\n    this.subject.next(<a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>(params));\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">考虑把这类辅助函数放进一个紧邻 <code>app</code> 文件夹的 <code>testing</code> 文件夹。\n这个例子把 <code>ActivatedRouteStub</code> 放在了 <code>testing/activated-route-stub.ts</code> 中。</p><p translation-origin=\"off\">Consider placing such helpers in a <code>testing</code> folder sibling to the <code>app</code> folder.\nThis sample puts <code>ActivatedRouteStub</code> in <code>testing/activated-route-stub.ts</code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  可以考虑使用<a href=\"guide/testing-components-scenarios#marble-testing\">弹珠测试库</a>来为此测试桩编写一个更强力的版本。</p><p translation-origin=\"off\">Consider writing a more capable version of this stub class with\nthe <a href=\"guide/testing-components-scenarios#marble-testing\"><em>marble testing library</em></a>.</p>\n\n</div>\n<a id=\"tests-w-test-double\"></a>\n<h4 id=\"testing-with-activatedroutestub\" translation-result=\"on\">使用 <code>ActivatedRouteStub</code> 进行测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#testing-with-activatedroutestub\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"testing-with-activatedroutestub\">Testing with <em>ActivatedRouteStub</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#testing-with-activatedroutestub\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">下面的测试程序是演示组件在被观察的 <code>id</code> 指向现有英雄时的行为：</p><p translation-origin=\"off\">Here's a test demonstrating the component's behavior when the observed <code>id</code> refers to an existing hero:</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"route-good-id\" header=\"app/hero/hero-detail.component.spec.ts (existing id)\">\ndescribe('when navigate to existing hero', () => {\n  let expectedHero: Hero;\n\n  beforeEach(async () => {\n    expectedHero = firstHero;\n    activatedRoute.setParamMap({id: expectedHero.id});\n    await createComponent();\n  });\n\n  it('should display that hero\\'s name', () => {\n    expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n  });\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><code>createComponent()</code> 方法和 <code>page</code> 对象会在<a href=\"guide/testing-components-scenarios#page-object\">稍后</a>进行讨论。\n不过目前，你只要凭直觉来理解就行了。</p><p translation-origin=\"off\">The <code>createComponent()</code> method and <code>page</code> object are discussed <a href=\"guide/testing-components-scenarios#page-object\">below</a>.\nRely on your intuition for now.</p>\n\n</div>\n<p translation-result=\"on\">当找不到 <code>id</code> 的时候，组件应该重新路由到 <code>HeroListComponent</code>。</p><p translation-origin=\"off\">When the <code>id</code> cannot be found, the component should re-route to the <code>HeroListComponent</code>.</p>\n\n<p translation-result=\"on\">测试套件的准备代码提供了一个和<a href=\"guide/testing-components-scenarios#routing-component\">前面</a>一样的路由器间谍，它会充当路由器的角色，而不用发起实际的导航。</p><p translation-origin=\"off\">The test suite setup provided the same router spy <a href=\"guide/testing-components-scenarios#routing-component\">described above</a> which spies on the router without actually navigating.</p>\n\n<p translation-result=\"on\">这个测试中会期待该组件尝试导航到 <code>HeroListComponent</code>。</p><p translation-origin=\"off\">This test expects the component to try to navigate to the <code>HeroListComponent</code>.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"route-bad-id\" header=\"app/hero/hero-detail.component.spec.ts (bad id)\">\ndescribe('when navigate to non-existent hero id', () => {\n  beforeEach(async () => {\n    activatedRoute.setParamMap({id: 99999});\n    await createComponent();\n  });\n\n  it('should try to navigate back to hero list', () => {\n    expect(page.gotoListSpy.calls.any()).toBe(true, 'comp.gotoList called');\n    expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n  });\n});\n\n</code-example>\n<p translation-result=\"on\">虽然本应用没有在缺少 <code>id</code> 参数的时候，继续导航到 <code>HeroDetailComponent</code> 的路由，但是，将来它可能会添加这样的路由。\n当没有 <code>id</code> 时，该组件应该作出合理的反应。</p><p translation-origin=\"off\">While this app doesn't have a route to the <code>HeroDetailComponent</code> that omits the <code>id</code> parameter, it might add such a route someday.\nThe component should do something reasonable when there is no <code>id</code>.</p>\n\n<p translation-result=\"on\">在本例中，组件应该创建和显示新英雄。\n新英雄的 <code>id</code> 为零，<code>name</code> 为空。本测试程序确认组件是按照预期的这样做的：</p><p translation-origin=\"off\">In this implementation, the component should create and display a new hero.\nNew heroes have <code>id=0</code> and a blank <code>name</code>. This test confirms that the component behaves as expected:</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"route-no-id\" header=\"app/hero/hero-detail.component.spec.ts (no id)\">\ndescribe('when navigate with no hero id', () => {\n  beforeEach(async () => {\n    await createComponent();\n  });\n\n  it('should have hero.id === 0', () => {\n    expect(component.hero.id).toBe(0);\n  });\n\n  it('should display empty hero name', () => {\n    expect(page.nameDisplay.textContent).toBe('');\n  });\n});\n\n</code-example>\n<h2 id=\"nested-component-tests\" translation-result=\"on\">对嵌套组件的测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#nested-component-tests\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"nested-component-tests\">Nested component tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#nested-component-tests\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">组件的模板中通常还会有嵌套组件，嵌套组件的模板还可能包含更多组件。</p><p translation-origin=\"off\">Component templates often have nested components, whose templates\nmay contain more components.</p>\n\n<p translation-result=\"on\">这棵组件树可能非常深，并且大多数时候在测试这棵树顶部的组件时，这些嵌套的组件都无关紧要。</p><p translation-origin=\"off\">The component tree can be very deep and, most of the time, the nested components\nplay no role in testing the component at the top of the tree.</p>\n\n<p translation-result=\"on\">比如，<code>AppComponent</code> 会显示一个带有链接及其 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令的导航条。</p><p translation-origin=\"off\">The <code>AppComponent</code>, for example, displays a navigation bar with anchors and their <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directives.</p>\n\n<code-example path=\"testing/src/app/app.component.html\" header=\"app/app.component.html\">\n&#x3C;app-banner>&#x3C;/app-banner>\n&#x3C;app-welcome>&#x3C;/app-welcome>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/about\">About&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n\n</code-example>\n<p translation-result=\"on\">虽然 <code>AppComponent</code> <em>类</em>是空的，不过，由于<a href=\"guide/testing-components-scenarios#why-stubbed-routerlink-tests\">稍后解释的原因</a>，你可能会希望写个单元测试来确认这些链接是否正确使用了 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令。</p><p translation-origin=\"off\">While the <code>AppComponent</code> <em>class</em> is empty,\nyou may want to write unit tests to confirm that the links are wired properly\nto the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directives, perhaps for the reasons <a href=\"guide/testing-components-scenarios#why-stubbed-routerlink-tests\">explained below</a>.</p>\n\n<p translation-result=\"on\">要想验证这些链接，你不必用 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 进行导航，也不必使用 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 来指出 <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> 应该把<em>路由目标组件</em>插入到什么地方。</p><p translation-origin=\"off\">To validate the links, you don't need the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> to navigate and you don't\nneed the <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> to mark where the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> inserts <em>routed components</em>.</p>\n\n<p translation-result=\"on\">而 <code>BannerComponent</code> 和 <code>WelcomeComponent</code>（写作 <code>&#x3C;app-banner></code> 和 <code>&#x3C;app-welcome></code>）也同样风马牛不相及。</p><p translation-origin=\"off\">The <code>BannerComponent</code> and <code>WelcomeComponent</code>\n(indicated by <code>&#x3C;app-banner></code> and <code>&#x3C;app-welcome></code>) are also irrelevant.</p>\n\n<p translation-result=\"on\">然而，任何测试，只要能在 DOM 中创建 <code>AppComponent</code>，也就同样能创建这三个组件的实例。如果要创建它们，你就要配置 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>。</p><p translation-origin=\"off\">Yet any test that creates the <code>AppComponent</code> in the DOM will also create instances of\nthese three components and, if you let that happen,\nyou'll have to configure the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> to create them.</p>\n\n<p translation-result=\"on\">如果你忘了声明它们，Angular 编译器就无法在 <code>AppComponent</code> 模板中识别出 <code>&#x3C;app-banner></code>、<code>&#x3C;app-welcome></code> 和 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 标记，并抛出一个错误。</p><p translation-origin=\"off\">If you neglect to declare them, the Angular compiler won't recognize the\n<code>&#x3C;app-banner></code>, <code>&#x3C;app-welcome></code>, and <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> tags in the <code>AppComponent</code> template\nand will throw an error.</p>\n\n<p translation-result=\"on\">如果你声明的这些都是真实的组件，那么也同样要声明<em>它们</em>的嵌套组件，并要为这棵组件树中的<em>任何</em>组件提供要注入的<em>所有</em>服务。</p><p translation-origin=\"off\">If you declare the real components, you'll also have to declare <em>their</em> nested components\nand provide for <em>all</em> services injected in <em>any</em> component in the tree.</p>\n\n<p translation-result=\"on\">如果只是想回答关于链接的一些简单问题，做这些显然就太多了。</p><p translation-origin=\"off\">That's too much effort just to answer a few simple questions about links.</p>\n\n<p translation-result=\"on\">本节会讲减少此类准备工作的两项技术。\n单独使用或组合使用它们，可以让这些测试聚焦于要测试的主要组件上。</p><p translation-origin=\"off\">This section describes two techniques for minimizing the setup.\nUse them, alone or in combination, to stay focused on testing the primary component.</p>\n\n<a id=\"stub-component\"></a>\n<h5 id=\"stubbing-unneeded-components\" translation-result=\"on\">对不需要的组件提供桩（stub）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#stubbing-unneeded-components\"><i class=\"material-icons\">link</i></a></h5><h5 translation-origin=\"off\" id=\"stubbing-unneeded-components\">Stubbing unneeded components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#stubbing-unneeded-components\"><i class=\"material-icons\">link</i></a></h5>\n\n<p translation-result=\"on\">这项技术中，你要为那些在测试中无关紧要的组件或指令创建和声明一些测试桩。</p><p translation-origin=\"off\">In the first technique, you create and declare stub versions of the components\nand directive that play little or no role in the tests.</p>\n\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"component-stubs\" header=\"app/app.component.spec.ts (stub declaration)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'app-banner', template: ''})\nclass BannerStubComponent {\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: '<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>', template: ''})\nclass RouterOutletStubComponent {\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'app-welcome', template: ''})\nclass WelcomeStubComponent {\n}\n\n</code-example>\n<p translation-result=\"on\">这些测试桩的选择器要和其对应的真实组件一致，但其模板和类是空的。</p><p translation-origin=\"off\">The stub selectors match the selectors for the corresponding real components.\nBut their templates and classes are empty.</p>\n\n<p translation-result=\"on\">然后在 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 的配置中那些真正有用的组件、指令、管道之后声明它们。</p><p translation-origin=\"off\">Then declare them in the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration next to the\ncomponents, directives, and pipes that need to be real.</p>\n\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"testbed-stubs\" header=\"app/app.component.spec.ts (TestBed stubs)\">\n<a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n    .configureTestingModule({\n      declarations: [\n        AppComponent, RouterLinkDirectiveStub, BannerStubComponent, RouterOutletStubComponent,\n        WelcomeStubComponent\n      ]\n    })\n\n</code-example>\n<p translation-result=\"on\"><code>AppComponent</code> 是该测试的主角，因此当然要用它的真实版本。</p><p translation-origin=\"off\">The <code>AppComponent</code> is the test subject, so of course you declare the real version.</p>\n\n<p translation-result=\"on\">而 <code>RouterLinkDirectiveStub</code>（<a href=\"guide/testing-components-scenarios#routerlink\">稍后讲解</a>）是一个真实的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的测试版，它能帮你对链接进行测试。</p><p translation-origin=\"off\">The <code>RouterLinkDirectiveStub</code>, <a href=\"guide/testing-components-scenarios#routerlink\">described later</a>, is a test version\nof the real <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> that helps with the link tests.</p>\n\n<p translation-result=\"on\">其它都是测试桩。</p><p translation-origin=\"off\">The rest are stubs.</p>\n\n<a id=\"no-errors-schema\"></a>\n<h4 id=\"no_errors_schema\"><em>NO_ERRORS_SCHEMA</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#no_errors_schema\"><i class=\"material-icons\">link</i></a></h4>\n<p translation-result=\"on\">第二种办法就是把 <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> 添加到 <code>TestBed.schemas</code> 的元数据中。</p><p translation-origin=\"off\">In the second approach, add <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> to the <code>TestBed.schemas</code> metadata.</p>\n\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"no-errors-schema\" header=\"app/app.component.spec.ts (NO_ERRORS_SCHEMA)\">\n<a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n    .configureTestingModule({\n      declarations: [\n        AppComponent,\n        RouterLinkDirectiveStub\n      ],\n      schemas: [<a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a>]\n    })\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> 会要求 Angular 编译器忽略不认识的那些元素和属性。</p><p translation-origin=\"off\">The <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> tells the Angular compiler to ignore unrecognized elements and attributes.</p>\n\n<p translation-result=\"on\">编译器将会识别出 <code>&#x3C;app-root></code> 元素和 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 属性，因为你在 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 的配置中声明了相应的\n<code>AppComponent</code> 和 <code>RouterLinkDirectiveStub</code>。</p><p translation-origin=\"off\">The compiler will recognize the <code>&#x3C;app-root></code> element and the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute\nbecause you declared a corresponding <code>AppComponent</code> and <code>RouterLinkDirectiveStub</code>\nin the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration.</p>\n\n<p translation-result=\"on\">但编译器在遇到 <code>&#x3C;app-banner></code>、<code>&#x3C;app-welcome></code> 或 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 时不会报错。\n它只会把它们渲染成空白标签，而浏览器会忽略这些标签。</p><p translation-origin=\"off\">But the compiler won't throw an error when it encounters <code>&#x3C;app-banner></code>, <code>&#x3C;app-welcome></code>, or <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>.\nIt simply renders them as empty tags and the browser ignores them.</p>\n\n<p translation-result=\"on\">你不用再提供桩组件了。</p><p translation-origin=\"off\">You no longer need the stub components.</p>\n\n<h4 id=\"use-both-techniques-together\" translation-result=\"on\">同时使用这两项技术<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#use-both-techniques-together\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"use-both-techniques-together\">Use both techniques together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#use-both-techniques-together\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">这些是进行<em>浅层</em>测试要用到的技术，之所以叫浅层测试是因为只包含本测试所关心的这个组件模板中的元素。</p><p translation-origin=\"off\">These are techniques for <em>Shallow Component Testing</em> ,\nso-named because they reduce the visual surface of the component to just those elements\nin the component's template that matter for tests.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> 方法在这两者中比较简单，但也不要过度使用它。</p><p translation-origin=\"off\">The <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> approach is the easier of the two but don't overuse it.</p>\n\n<p translation-result=\"on\"><code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> 还会阻止编译器告诉你因为的疏忽或拼写错误而缺失的组件和属性。\n你如果人工找出这些 bug 可能要浪费几个小时，但编译器可以立即捕获它们。</p><p translation-origin=\"off\">The <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> also prevents the compiler from telling you about the missing\ncomponents and attributes that you omitted inadvertently or misspelled.\nYou could waste hours chasing phantom bugs that the compiler would have caught in an instant.</p>\n\n<p translation-result=\"on\"><em>桩组件</em>方式还有其它优点。\n虽然<em>这个</em>例子中的桩是空的，但你如果想要和它们用某种形式互动，也可以给它们一些裁剪过的模板和类。</p><p translation-origin=\"off\">The <em>stub component</em> approach has another advantage.\nWhile the stubs in <em>this</em> example were empty,\nyou could give them stripped-down templates and classes if your tests\nneed to interact with them in some way.</p>\n\n<p translation-result=\"on\">在实践中，你可以在准备代码中组合使用这两种技术，例子如下：</p><p translation-origin=\"off\">In practice you will combine the two techniques in the same setup,\nas seen in this example.</p>\n\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"mixed-setup\" header=\"app/app.component.spec.ts (mixed setup)\">\n<a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n    .configureTestingModule({\n      declarations: [\n        AppComponent,\n        BannerStubComponent,\n        RouterLinkDirectiveStub\n      ],\n      schemas: [<a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a>]\n    })\n\n</code-example>\n<p translation-result=\"on\">Angular 编译器会为 <code>&#x3C;app-banner></code> 元素创建 <code>BannerComponentStub</code>，并把 <code>RouterLinkStubDirective</code> 应用到带有 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 属性的链接上，不过它会忽略 <code>&#x3C;app-welcome></code> 和 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 标签。</p><p translation-origin=\"off\">The Angular compiler creates the <code>BannerComponentStub</code> for the <code>&#x3C;app-banner></code> element\nand applies the <code>RouterLinkStubDirective</code> to the anchors with the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute,\nbut it ignores the <code>&#x3C;app-welcome></code> and <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> tags.</p>\n\n<a id=\"routerlink\"></a>\n<h2 id=\"components-with-routerlink\" translation-result=\"on\">带有 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#components-with-routerlink\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"components-with-routerlink\">Components with <em>RouterLink</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#components-with-routerlink\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">真实的 <code>RouterLinkDirective</code> 太复杂了，而且与 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 中的其它组件和指令有着千丝万缕的联系。\n要在准备阶段 Mock 它以及在测试中使用它具有一定的挑战性。</p><p translation-origin=\"off\">The real <code>RouterLinkDirective</code> is quite complicated and entangled with other components\nand directives of the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.\nIt requires challenging setup to mock and use in tests.</p>\n\n<p translation-result=\"on\">这段范例代码中的 <code>RouterLinkDirectiveStub</code> 用一个代用品替换了真实的指令，这个代用品用来验证 <code>AppComponent</code> 中所用链接的类型。</p><p translation-origin=\"off\">The <code>RouterLinkDirectiveStub</code> in this sample code replaces the real directive\nwith an alternative version designed to validate the kind of anchor tag wiring\nseen in the <code>AppComponent</code> template.</p>\n\n<code-example path=\"testing/src/testing/router-link-directive-stub.ts\" region=\"router-link\" header=\"testing/router-link-directive-stub.ts (RouterLinkDirectiveStub)\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]'\n})\nexport class RouterLinkDirectiveStub {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>') linkParams: any;\n  navigatedTo: any = null;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('click')\n  onClick() {\n    this.navigatedTo = this.linkParams;\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">这个 URL 被绑定到了 <code>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</code> 属性，它的值流入了该指令的 <code>linkParams</code> 属性。</p><p translation-origin=\"off\">The URL bound to the <code>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</code> attribute flows in to the directive's <code>linkParams</code> property.</p>\n\n<p translation-result=\"on\">它的元数据中的 <code>host</code> 属性把宿主元素（即 <code>AppComponent</code> 中的 <code>&#x3C;a></code> 元素）的 <code>click</code> 事件关联到了这个桩指令的 <code>onClick</code> 方法。</p><p translation-origin=\"off\">The <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> wires the click event of the host element\n(the <code>&#x3C;a></code> anchor elements in <code>AppComponent</code>) to the stub directive's <code>onClick</code> method.</p>\n\n<p translation-result=\"on\">点击这个链接应该触发 <code>onClick()</code> 方法，其中会设置该桩指令中的警示器属性 <code>navigatedTo</code>。\n测试中检查 <code>navigatedTo</code> 以确认点击该链接确实如预期的那样根据路由定义设置了该属性。</p><p translation-origin=\"off\">Clicking the anchor should trigger the <code>onClick()</code> method,\nwhich sets the stub's telltale <code>navigatedTo</code> property.\nTests inspect <code>navigatedTo</code> to confirm that clicking the anchor\nsets the expected route definition.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">路由器的配置是否正确和是否能按照那些路由定义进行导航，是测试中一组独立的问题。</p><p translation-origin=\"off\">Whether the router is configured properly to navigate with that route definition is a\nquestion for a separate set of tests.</p>\n\n</div>\n<a id=\"by-directive\"></a>\n<a id=\"inject-directive\"></a>\n<h4 id=\"bydirective-and-injected-directives\" translation-result=\"on\"><code>By.directive</code> 与注入的指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#bydirective-and-injected-directives\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"bydirective-and-injected-directives\"><em>By.directive</em> and injected directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#bydirective-and-injected-directives\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">再一步配置触发了数据绑定的初始化，获取导航链接的引用：</p><p translation-origin=\"off\">A little more setup triggers the initial data binding and gets references to the navigation links:</p>\n\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"test-setup\" header=\"app/app.component.spec.ts (test setup)\">\nbeforeEach(() => {\n  fixture.detectChanges();  // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> initial data binding\n\n  // find DebugElements with an attached RouterLinkStubDirective\n  linkDes = fixture.debugElement.queryAll(By.directive(RouterLinkDirectiveStub));\n\n  // get attached link directive instances\n  // using each <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>'s injector\n  routerLinks = linkDes.map(de => de.injector.get(RouterLinkDirectiveStub));\n});\n\n</code-example>\n<p translation-result=\"on\">有三点特别重要：</p><p translation-origin=\"off\">Three points of special interest:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">你可以使用 <code>By.directive</code> 来定位一个带附属指令的链接元素。</p><p translation-origin=\"off\">You can locate the anchor elements with an attached directive using <code>By.directive</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">该查询返回包含了匹配元素的 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> 包装器。</p><p translation-origin=\"off\">The query returns <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> wrappers around the matching elements.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">每个 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> 都会导出该元素中的一个依赖注入器，其中带有指定的指令实例。</p><p translation-origin=\"off\">Each <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> exposes a dependency injector with the\nspecific instance of the directive attached to that element.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\"><code>AppComponent</code> 中要验证的链接如下：</p><p translation-origin=\"off\">The <code>AppComponent</code> links to validate are as follows:</p>\n\n<code-example path=\"testing/src/app/app.component.html\" region=\"links\" header=\"app/app.component.html (navigation links)\">\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/about\">About&#x3C;/a>\n&#x3C;/nav>\n\n</code-example>\n<a id=\"app-component-tests\"></a>\n<p translation-result=\"on\">下面这些测试用来确认那些链接是否如预期般连接到了 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 指令中：</p><p translation-origin=\"off\">Here are some tests that confirm those links are wired to the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directives\nas expected:</p>\n\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"tests\" header=\"app/app.component.spec.ts (selected tests)\">\nit('can get RouterLinks from template', () => {\n  expect(routerLinks.length).toBe(3, 'should have 3 routerLinks');\n  expect(routerLinks[0].linkParams).toBe('/dashboard');\n  expect(routerLinks[1].linkParams).toBe('/heroes');\n  expect(routerLinks[2].linkParams).toBe('/about');\n});\n\nit('can click Heroes link in template', () => {\n  const heroesLinkDe = linkDes[1];    // heroes link <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>\n  const heroesLink = routerLinks[1];  // heroes link directive\n\n  expect(heroesLink.navigatedTo).toBeNull('should not have navigated yet');\n\n  heroesLinkDe.triggerEventHandler('click', null);\n  fixture.detectChanges();\n\n  expect(heroesLink.navigatedTo).toBe('/heroes');\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">其实<em>这个例子中</em>的“click”测试误入歧途了。\n它测试的重点其实是 <code>RouterLinkDirectiveStub</code>，而不是该组件。\n这是写桩指令时常见的错误。</p><p translation-origin=\"off\">The \"click\" test <em>in this example</em> is misleading.\nIt tests the <code>RouterLinkDirectiveStub</code> rather than the <em>component</em>.\nThis is a common failing of directive stubs.</p>\n\n<p translation-result=\"on\">在本章中，它有存在的必要。\n它演示了如何在不涉及完整路由器机制的情况下，如何找到 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 元素、点击它并检查结果。\n要测试更复杂的组件，你可能需要具备这样的能力，能改变视图和重新计算参数，或者当用户点击链接时，有能力重新安排导航选项。</p><p translation-origin=\"off\">It has a legitimate purpose in this guide.\nIt demonstrates how to find a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> element, click it, and inspect a result,\nwithout engaging the full router machinery.\nThis is a skill you may need to test a more sophisticated component, one that changes the display,\nre-calculates parameters, or re-arranges navigation options when the user clicks the link.</p>\n\n</div>\n<a id=\"why-stubbed-routerlink-tests\"></a>\n<h4 id=\"what-good-are-these-tests\" translation-result=\"on\">这些测试有什么优点？<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#what-good-are-these-tests\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"what-good-are-these-tests\">What good are these tests?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#what-good-are-these-tests\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">用 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> 的桩指令进行测试可以确认带有链接和 outlet 的组件的设置的正确性，确认组件有应该有的链接，确认它们都指向了正确的方向。\n这些测试程序不关心用户点击链接时，也不关心应用是否会成功的导航到目标组件。</p><p translation-origin=\"off\">Stubbed <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> tests can confirm that a component with links and an outlet is setup properly,\nthat the component has the links it should have, and that they are all pointing in the expected direction.\nThese tests do not concern whether the app will succeed in navigating to the target component when the user clicks a link.</p>\n\n<p translation-result=\"on\">对于这些有限的测试目标，使用 RouterLink 桩指令和 RouterOutlet 桩组件 是最佳选择。\n依靠真正的路由器会让它们很脆弱。\n它们可能因为与组件无关的原因而失败。\n例如，一个导航守卫可能防止没有授权的用户访问 <code>HeroListComponent</code>。\n这并不是 <code>AppComponent</code> 的过错，并且无论该组件怎么改变都无法修复这个失败的测试程序。</p><p translation-origin=\"off\">Stubbing the RouterLink and RouterOutlet is the best option for such limited testing goals.\nRelying on the real router would make them brittle.\nThey could fail for reasons unrelated to the component.\nFor example, a navigation guard could prevent an unauthorized user from visiting the <code>HeroListComponent</code>.\nThat's not the fault of the <code>AppComponent</code> and no change to that component could cure the failed test.</p>\n\n<p translation-result=\"on\">一组不同的测试程序可以探索当存在影响守卫的条件时（比如用户是否已认证和授权），该应用是否如期望般导航。</p><p translation-origin=\"off\">A <em>different</em> battery of tests can explore whether the application navigates as expected\nin the presence of conditions that influence guards such as whether the user is authenticated and authorized.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">未来对本章的更新将介绍如何使用 <code><a href=\"api/router/testing/RouterTestingModule\" class=\"code-anchor\">RouterTestingModule</a></code> 来编写这样的测试程序。</p><p translation-origin=\"off\">A future guide update will explain how to write such\ntests with the <code><a href=\"api/router/testing/RouterTestingModule\" class=\"code-anchor\">RouterTestingModule</a></code>.</p>\n\n</div>\n<a id=\"page-object\"></a>\n<h2 id=\"use-a-page-object\" translation-result=\"on\">使用页面（page）对象<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#use-a-page-object\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"use-a-page-object\">Use a <em>page</em> object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#use-a-page-object\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 是带有标题、两个英雄字段和两个按钮的简单视图。</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> is a simple view with a title, two hero fields, and two buttons.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/testing/hero-detail.component.png\" alt=\"HeroDetailComponent in action\" width=\"269\" height=\"170\">\n</div>\n<p translation-result=\"on\">但即使是这么简单的表单，其模板中也涉及到不少复杂性。</p><p translation-origin=\"off\">But there's plenty of template complexity even in this simple form.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.html\" header=\"app/hero/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n  &#x3C;h2>&#x3C;span>{{hero.name | <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">titlecase</a>}}&#x3C;/span> Details&#x3C;/h2>\n  &#x3C;div>\n    &#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label for=\"name\">name: &#x3C;/label>\n    &#x3C;input id=\"name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\" />\n  &#x3C;/div>\n  &#x3C;button (click)=\"save()\">Save&#x3C;/button>\n  &#x3C;button (click)=\"cancel()\">Cancel&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\">这些供练习用的组件需要 ……</p><p translation-origin=\"off\">Tests that exercise the component need ...</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> 等获取到英雄之后才能让元素出现在 DOM 中。</p><p translation-origin=\"off\">to wait until a hero arrives before elements appear in the DOM.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 一个对标题文本的引用。</p><p translation-origin=\"off\">a reference to the title text.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 一个对 name 输入框的引用，以便对它进行探查和修改。</p><p translation-origin=\"off\">a reference to the name input box to inspect and set it.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 引用两个按钮，以便点击它们。</p><p translation-origin=\"off\">references to the two buttons so they can click them.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 为组件和路由器的方法安插间谍。</p><p translation-origin=\"off\">spies for some of the component and router methods.</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">即使是像这样一个很小的表单，也能产生令人疯狂的错综复杂的条件设置和 CSS 元素选择。</p><p translation-origin=\"off\">Even a small form such as this one can produce a mess of tortured conditional setup and CSS element selection.</p>\n\n<p translation-result=\"on\">可以使用 <code>Page</code> 类来征服这种复杂性。<code>Page</code> 类可以处理对组件属性的访问，并对设置这些属性的逻辑进行封装。</p><p translation-origin=\"off\">Tame the complexity with a <code>Page</code> class that handles access to component properties\nand encapsulates the logic that sets them.</p>\n\n<p translation-result=\"on\">下面是一个供 <code>hero-detail.component.spec.ts</code> 使用的 <code>Page</code> 类</p><p translation-origin=\"off\">Here is such a <code>Page</code> class for the <code>hero-detail.component.spec.ts</code></p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"page\" header=\"app/hero/hero-detail.component.spec.ts (Page)\">\nclass Page {\n  // getter properties wait to <a href=\"api/animations/query\" class=\"code-anchor\">query</a> the DOM until called.\n  get buttons() {\n    return this.queryAll&#x3C;HTMLButtonElement>('button');\n  }\n  get saveBtn() {\n    return this.buttons[0];\n  }\n  get cancelBtn() {\n    return this.buttons[1];\n  }\n  get nameDisplay() {\n    return this.query&#x3C;HTMLElement>('span');\n  }\n  get nameInput() {\n    return this.query&#x3C;HTMLInputElement>('input');\n  }\n\n  gotoListSpy: jasmine.Spy;\n  navigateSpy: jasmine.Spy;\n\n  constructor(someFixture: <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;HeroDetailComponent>) {\n    // get the navigate spy from the injected router spy object\n    const routerSpy = someFixture.debugElement.injector.get(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) as any;\n    this.navigateSpy = routerSpy.navigate;\n\n    // spy on component's `gotoList()` method\n    const someComponent = someFixture.componentInstance;\n    this.gotoListSpy = spyOn(someComponent, 'gotoList').and.callThrough();\n  }\n\n  //// <a href=\"api/animations/query\" class=\"code-anchor\">query</a> helpers ////\n  private <a href=\"api/animations/query\" class=\"code-anchor\">query</a>&#x3C;T>(selector: string): T {\n    return fixture.nativeElement.querySelector(selector);\n  }\n\n  private queryAll&#x3C;T>(selector: string): T[] {\n    return fixture.nativeElement.querySelectorAll(selector);\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">现在，用来操作和检查组件的重要钩子都被井然有序的组织起来了，可以通过 <code>page</code> 实例来使用它们。</p><p translation-origin=\"off\">Now the important hooks for component manipulation and inspection are neatly organized and accessible from an instance of <code>Page</code>.</p>\n\n<p translation-result=\"on\"><code>createComponent</code> 方法会创建一个 <code>page</code> 对象，并在 <code>hero</code> 到来时自动填补空白。</p><p translation-origin=\"off\">A <code>createComponent</code> method creates a <code>page</code> object and fills in the blanks once the <code>hero</code> arrives.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"create-component\" header=\"app/hero/hero-detail.component.spec.ts (createComponent)\">\n/** Create the HeroDetailComponent, initialize it, set test variables  */\nfunction createComponent() {\n  fixture = TestBed.createComponent(HeroDetailComponent);\n  component = fixture.componentInstance;\n  page = new Page(fixture);\n\n  // 1st change detection triggers ngOnInit which gets a hero\n  fixture.detectChanges();\n  return fixture.whenStable().then(() => {\n    // 2nd change detection displays the async-fetched hero\n    fixture.detectChanges();\n  });\n}\n\n</code-example>\n<p translation-result=\"on\">前面小节中的 <a href=\"guide/testing-components-scenarios#tests-w-test-double\"><code>HeroDetailComponent</code> 测试</a>示范了如何 <code>createComponent</code>，而 <code>page</code> 让这些测试保持简短而富有表达力。\n而且还不用分心：不用等待承诺被解析，不必在 DOM 中找出元素的值才能进行比较。</p><p translation-origin=\"off\">The <a href=\"guide/testing-components-scenarios#tests-w-test-double\"><em>HeroDetailComponent</em> tests</a> in an earlier section demonstrate how <code>createComponent</code> and <code>page</code>\nkeep the tests short and <em>on message</em>.\nThere are no distractions: no waiting for promises to resolve and no searching the DOM for element values to compare.</p>\n\n<p translation-result=\"on\">还有更多的 <code>HeroDetailComponent</code> 测试可以证明这一点。</p><p translation-origin=\"off\">Here are a few more <code>HeroDetailComponent</code> tests to reinforce the point.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"selected-tests\" header=\"app/hero/hero-detail.component.spec.ts (selected tests)\">\nit('should display that hero\\'s name', () => {\n  expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n});\n\nit('should navigate when click cancel', () => {\n  click(page.cancelBtn);\n  expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n});\n\nit('should save when click save but not navigate immediately', () => {\n  // Get service injected into component and spy on its`saveHero` method.\n  // It delegates to fake `HeroService.updateHero` which delivers a safe test result.\n  const hds = fixture.debugElement.injector.get(HeroDetailService);\n  const saveSpy = spyOn(hds, 'saveHero').and.callThrough();\n\n  click(page.saveBtn);\n  expect(saveSpy.calls.any()).toBe(true, 'HeroDetailService.save called');\n  expect(page.navigateSpy.calls.any()).toBe(false, 'router.navigate not called');\n});\n\nit('should navigate when click save and save resolves', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     click(page.saveBtn);\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();  // wait for async save to complete\n     expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n   }));\n\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () => {\n  // get the name's input and display elements from the DOM\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  // simulate user entering a new name into the input box\n  nameInput.value = 'quick BROWN  fOx';\n\n  // Dispatch a DOM event so that Angular learns of input value change.\n  // In older browsers, such as IE, you might need a CustomEvent instead. See\n  // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n  nameInput.dispatchEvent(new <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>('input'));\n\n  // Tell Angular to update the display binding through the title pipe\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n</code-example>\n<a id=\"compile-components\"></a>\n<h2 id=\"calling-compilecomponents\" translation-result=\"on\">调用 <code>compileComponents()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#calling-compilecomponents\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"calling-compilecomponents\">Calling <em>compileComponents()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#calling-compilecomponents\"><i class=\"material-icons\">link</i></a></h2>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果你<em>只想</em>使用 CLI 的 <code>ng test</code> 命令来运行测试，那么可以忽略这一节。</p><p translation-origin=\"off\">You can ignore this section if you <em>only</em> run tests with the CLI <code>ng test</code> command\nbecause the CLI compiles the application before running the tests.</p>\n\n</div>\n<p translation-result=\"on\">如果你在<strong>非 CLI 环境</strong>中运行测试，这些测试可能会报错，错误信息如下：</p><p translation-origin=\"off\">If you run tests in a <strong>non-CLI environment</strong>, the tests may fail with a message like this one:</p>\n\n<code-example language=\"sh\" hidecopy=\"\">\nError: This test module uses the component BannerComponent\nwhich is using a \"templateUrl\" or \"styleUrls\", but they were never compiled.\nPlease call \"TestBed.compileComponents\" before your test.\n</code-example>\n<p translation-result=\"on\">问题的根源在于这个测试中至少有一个组件引用了外部模板或外部 CSS 文件，就像下面这个版本的 <code>BannerComponent</code> 所示：</p><p translation-origin=\"off\">The root of the problem is at least one of the components involved in the test\nspecifies an external template or CSS file as\nthe following version of the <code>BannerComponent</code> does.</p>\n\n<code-example path=\"testing/src/app/banner/banner-external.component.ts\" header=\"app/banner/banner-external.component.ts (external template &#x26; css)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-banner',\n  templateUrl: './banner-external.component.html',\n  styleUrls:  ['./banner-external.component.css']\n})\nexport class BannerComponent {\n  title = 'Test Tour of Heroes';\n}\n\n\n</code-example>\n<p translation-result=\"on\">当 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 视图创建组件时，这个测试失败了：</p><p translation-origin=\"off\">The test fails when the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> tries to create the component.</p>\n\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"configure-and-create\" header=\"app/banner/banner.component.spec.ts (setup that fails)\" avoid=\"\">\nbeforeEach(async () => {\n  await TestBed.configureTestingModule({\n    declarations: [ BannerComponent ],\n  });\n  fixture = TestBed.createComponent(BannerComponent);\n});\n\n</code-example>\n<p translation-result=\"on\">回想一下，这个应用从未编译过。\n所以当你调用 <code>createComponent()</code> 的时候，<code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 就会进行隐式编译。</p><p translation-origin=\"off\">Recall that the app hasn't been compiled.\nSo when you call <code>createComponent()</code>, the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> compiles implicitly.</p>\n\n<p translation-result=\"on\">当它的源码都在内存中的时候，这样做没问题。\n不过 <code>BannerComponent</code> 需要一些外部文件，编译时必须从文件系统中读取它，而这是一个天生的<em>异步</em>操作。</p><p translation-origin=\"off\">That's not a problem when the source code is in memory.\nBut the <code>BannerComponent</code> requires external files\nthat the compiler must read from the file system,\nan inherently <em>asynchronous</em> operation.</p>\n\n<p translation-result=\"on\">如果 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 继续执行，这些测试就会继续运行，并在编译器完成这些异步工作之前导致莫名其妙的失败。</p><p translation-origin=\"off\">If the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> were allowed to continue, the tests would run and fail mysteriously\nbefore the compiler could finished.</p>\n\n<p translation-result=\"on\">这些错误信息告诉你要使用 <code>compileComponents()</code> 进行显式的编译。</p><p translation-origin=\"off\">The preemptive error message tells you to compile explicitly with <code>compileComponents()</code>.</p>\n\n<h4 id=\"compilecomponents-is-async\" translation-result=\"on\"><code>compileComponents()</code> 是异步的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#compilecomponents-is-async\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"compilecomponents-is-async\"><em>compileComponents()</em> is async<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#compilecomponents-is-async\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你必须在异步测试函数中调用 <code>compileComponents()</code>。</p><p translation-origin=\"off\">You must call <code>compileComponents()</code> within an asynchronous test function.</p>\n\n<div class=\"alert is-critical\">\n<p translation-result=\"on\">如果你忘了把测试函数标为异步的（比如忘了像稍后的代码中那样使用 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 关键字），就会看到下列错误。</p><p translation-origin=\"off\">If you neglect to make the test function async\n(e.g., forget to use the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> keyword as described below),\nyou'll see this error message</p>\n\n<code-example language=\"sh\" hidecopy=\"\">\nError: ViewDestroyedError: Attempt to use a destroyed view\n</code-example>\n</div>\n<p translation-result=\"on\">典型的做法是把准备逻辑拆成两个独立的 <code>beforeEach()</code> 函数：</p><p translation-origin=\"off\">A typical approach is to divide the setup logic into two separate <code>beforeEach()</code> functions:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">异步的 <code>beforeEach()</code> 负责编译组件</p><p translation-origin=\"off\">An async <code>beforeEach()</code> that compiles the components</p>\n\n</li>\n<li>\n<p translation-result=\"on\">同步的 <code>beforeEach()</code> 负责执行其余的准备代码。</p><p translation-origin=\"off\">A synchronous <code>beforeEach()</code> that performs the remaining setup.</p>\n\n</li>\n</ol>\n<h4 id=\"the-async-beforeeach\" translation-result=\"on\">异步的 <code>beforeEach</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-async-beforeeach\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"the-async-beforeeach\">The async <em>beforeEach</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-async-beforeeach\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">像下面这样编写第一个异步的 <code>beforeEach</code>。</p><p translation-origin=\"off\">Write the first async <code>beforeEach</code> like this.</p>\n\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"async-before-each\" header=\"app/banner/banner-external.component.spec.ts (async beforeEach)\">\nbeforeEach(async () => {\n  <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n      .configureTestingModule({\n        declarations: [BannerComponent],\n      })\n      .compileComponents();  // compile template and css\n});\n\n</code-example>\n<p translation-result=\"on\"><code>TestBed.configureTestingModule()</code> 方法返回 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 类，所以你可以链式调用其它 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 中的静态方法，比如 <code>compileComponents()</code>。</p><p translation-origin=\"off\">The <code>TestBed.configureTestingModule()</code> method returns the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> class so you can chain\ncalls to other <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> static methods such as <code>compileComponents()</code>.</p>\n\n<p translation-result=\"on\">在这个例子中，<code>BannerComponent</code> 是仅有的待编译组件。\n其它例子中可能会使用多个组件来配置测试模块，并且可能引入某些具有其它组件的应用模块。\n它们中的任何一个都可能需要外部文件。</p><p translation-origin=\"off\">In this example, the <code>BannerComponent</code> is the only component to compile.\nOther examples configure the testing module with multiple components\nand may import application modules that hold yet more components.\nAny of them could require external files.</p>\n\n<p translation-result=\"on\"><code>TestBed.compileComponents</code> 方法会异步编译测试模块中配置过的所有组件。</p><p translation-origin=\"off\">The <code>TestBed.compileComponents</code> method asynchronously compiles all components configured in the testing module.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">在调用了 <code>compileComponents()</code> 之后就不能再重新配置 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 了。</p><p translation-origin=\"off\">Do not re-configure the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> after calling <code>compileComponents()</code>.</p>\n\n</div>\n<p translation-result=\"on\">调用 <code>compileComponents()</code> 会关闭当前的 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 实例，不再允许进行配置。\n你不能再调用任何 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 中的配置方法，既不能调 <code>configureTestingModule()</code>，也不能调用任何 <code>override...</code> 方法。如果你试图这么做，<code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 就会抛出错误。</p><p translation-origin=\"off\">Calling <code>compileComponents()</code> closes the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> instance to further configuration.\nYou cannot call any more <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration methods, not <code>configureTestingModule()</code>\nnor any of the <code>override...</code> methods. The <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> throws an error if you try.</p>\n\n<p translation-result=\"on\">确保 <code>compileComponents()</code> 是调用 <code>TestBed.createComponent()</code> 之前的最后一步。</p><p translation-origin=\"off\">Make <code>compileComponents()</code> the last step\nbefore calling <code>TestBed.createComponent()</code>.</p>\n\n<h4 id=\"the-synchronous-beforeeach\" translation-result=\"on\">同步的 <code>beforeEach</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-synchronous-beforeeach\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"the-synchronous-beforeeach\">The synchronous <em>beforeEach</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-synchronous-beforeeach\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">第二个同步 <code>beforeEach()</code> 的例子包含剩下的准备步骤，\n包括创建组件和查询那些要检查的元素。</p><p translation-origin=\"off\">The second, synchronous <code>beforeEach()</code> contains the remaining setup steps,\nwhich include creating the component and querying for elements to inspect.</p>\n\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"sync-before-each\" header=\"app/banner/banner-external.component.spec.ts (synchronous beforeEach)\">\nbeforeEach(() => {\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance;  // BannerComponent test instance\n  h1 = fixture.nativeElement.querySelector('h1');\n});\n\n</code-example>\n<p translation-result=\"on\">测试运行器（runner）会先等待第一个异步 <code>beforeEach</code> 函数执行完再调用第二个。</p><p translation-origin=\"off\">You can count on the test runner to wait for the first asynchronous <code>beforeEach</code> to finish before calling the second.</p>\n\n<h4 id=\"consolidated-setup\" translation-result=\"on\">整理过的准备代码<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#consolidated-setup\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"consolidated-setup\">Consolidated setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#consolidated-setup\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">你可以把这两个 <code>beforeEach()</code> 函数重整成一个异步的 <code>beforeEach()</code>。</p><p translation-origin=\"off\">You can consolidate the two <code>beforeEach()</code> functions into a single, async <code>beforeEach()</code>.</p>\n\n<p translation-result=\"on\"><code>compileComponents()</code> 方法返回一个承诺，所以你可以通过把同步代码移到 <code>then(...)</code> 回调中，\n以便在编译完成<em>之后</em> 执行那些同步准备任务。</p><p translation-origin=\"off\">The <code>compileComponents()</code> method returns a promise so you can perform the\nsynchronous setup tasks <em>after</em> compilation by moving the synchronous code\ninto a <code>then(...)</code> callback.</p>\n\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"one-before-each\" header=\"app/banner/banner-external.component.spec.ts (one beforeEach)\">\nbeforeEach(async () => {\n  await TestBed.configureTestingModule({\n    declarations: [BannerComponent],\n  }).compileComponents();\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance;\n  h1 = fixture.nativeElement.querySelector('h1');\n});\n\n</code-example>\n<h4 id=\"compilecomponents-is-harmless\" translation-result=\"on\"><code>compileComponents()</code> 是无害的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#compilecomponents-is-harmless\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"compilecomponents-is-harmless\"><em>compileComponents()</em> is harmless<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#compilecomponents-is-harmless\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">在不需要 <code>compileComponents()</code> 的时候调用它也不会有害处。</p><p translation-origin=\"off\">There's no harm in calling <code>compileComponents()</code> when it's not required.</p>\n\n<p translation-result=\"on\">虽然在运行 <code>ng test</code> 时永远都不需要调用 <code>compileComponents()</code>，但 CLI 生成的组件测试文件还是会调用它。</p><p translation-origin=\"off\">The component test file generated by the CLI calls <code>compileComponents()</code>\neven though it is never required when running <code>ng test</code>.</p>\n\n<p translation-result=\"on\">但这篇指南中的这些测试只会在必要时才调用 <code>compileComponents</code>。</p><p translation-origin=\"off\">The tests in this guide only call <code>compileComponents</code> when necessary.</p>\n\n<a id=\"import-module\"></a>\n<h2 id=\"setup-with-module-imports\" translation-result=\"on\">准备模块的 <code>imports</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#setup-with-module-imports\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"setup-with-module-imports\">Setup with module imports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#setup-with-module-imports\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">此前的组件测试程序使用了一些 <code>declarations</code> 来配置模块，就像这样：</p><p translation-origin=\"off\">Earlier component tests configured the testing module with a few <code>declarations</code> like this:</p>\n\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"config-testbed\" header=\"app/dashboard/dashboard-hero.component.spec.ts (configure TestBed)\">\n<a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n    .configureTestingModule({declarations: [DashboardHeroComponent]})\n\n</code-example>\n<p translation-result=\"on\"><code>DashbaordComponent</code> 非常简单。它不需要帮助。\n但是更加复杂的组件通常依赖其它组件、指令、管道和提供者，\n所以这些必须也被添加到测试模块中。</p><p translation-origin=\"off\">The <code>DashboardComponent</code> is simple. It needs no help.\nBut more complex components often depend on other components, directives, pipes, and providers\nand these must be added to the testing module too.</p>\n\n<p translation-result=\"on\">幸运的是，<code>TestBed.configureTestingModule</code> 参数与传入 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 装饰器的元数据一样，也就是所你也可以指定 <code>providers</code> 和 <code>imports</code>.</p><p translation-origin=\"off\">Fortunately, the <code>TestBed.configureTestingModule</code> parameter parallels\nthe metadata passed to the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator\nwhich means you can also specify <code>providers</code> and <code>imports</code>.</p>\n\n<p translation-result=\"on\">虽然 <code>HeroDetailComponent</code> 很小，结构也很简单，但是它需要很多帮助。\n除了从默认测试模块 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 中获得的支持，它还需要：</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> requires a lot of help despite its small size and simple construction.\nIn addition to the support it receives from the default testing module <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>, it needs:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"> <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 里的 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> 和其它，来进行双向数据绑定</p><p translation-origin=\"off\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and friends in the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to enable two-way data binding.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> <code>shared</code> 目录里的 <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code></p><p translation-origin=\"off\">The <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code> from the <code>shared</code> folder.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 一些路由器服务（测试程序将 stub 伪造它们）</p><p translation-origin=\"off\">Router services (which these tests are stubbing).</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 英雄数据访问服务（同样被 stub 伪造了）</p><p translation-origin=\"off\">Hero data access services (also stubbed).</p>\n\n</li>\n</ul>\n<p translation-result=\"on\">一种方法是从各个部分配置测试模块，就像这样：</p><p translation-origin=\"off\">One approach is to configure the testing module from the individual pieces as in this example:</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-forms-module\" header=\"app/hero/hero-detail.component.spec.ts (FormsModule setup)\">\nbeforeEach(async () => {\n  const routerSpy = createRouterSpy();\n\n  await <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n      .configureTestingModule({\n        imports: [<a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>],\n        declarations: [HeroDetailComponent, <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a>],\n        providers: [\n          {provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: activatedRoute},\n          {provide: HeroService, useClass: TestHeroService},\n          {provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, useValue: routerSpy},\n        ]\n      })\n      .compileComponents();\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">注意，<code>beforeEach()</code> 是异步的，它调用 <code>TestBed.compileComponents</code> 是因为 <code>HeroDetailComponent</code> 有外部模板和 CSS 文件。</p><p translation-origin=\"off\">Notice that the <code>beforeEach()</code> is asynchronous and calls <code>TestBed.compileComponents</code>\nbecause the <code>HeroDetailComponent</code> has an external template and css file.</p>\n\n<p translation-result=\"on\">如前面的<a href=\"guide/testing-components-scenarios#compile-components\">调用 <code>compileComponents()</code></a> 中所解释的那样，这些测试可以运行在非 CLI 环境下，那里 Angular 并不会在浏览器中编译它们。</p><p translation-origin=\"off\">As explained in <a href=\"guide/testing-components-scenarios#compile-components\"><em>Calling compileComponents()</em></a> above,\nthese tests could be run in a non-CLI environment\nwhere Angular would have to compile them in the browser.</p>\n\n</div>\n<h4 id=\"import-a-shared-module\" translation-result=\"on\">导入共享模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#import-a-shared-module\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"import-a-shared-module\">Import a shared module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#import-a-shared-module\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">因为很多应用组件都需要 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 和 <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code>，所以开发者创建了 <code>SharedModule</code> 来把它们及其它常用的部分组合在一起。</p><p translation-origin=\"off\">Because many app components need the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and the <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code>, the developer created\na <code>SharedModule</code> to combine these and other frequently requested parts.</p>\n\n<p translation-result=\"on\">这些测试配置也可以使用 <code>SharedModule</code>，如下所示：</p><p translation-origin=\"off\">The test configuration can use the <code>SharedModule</code> too as seen in this alternative setup:</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-shared-module\" header=\"app/hero/hero-detail.component.spec.ts (SharedModule setup)\">\nbeforeEach(async () => {\n  const routerSpy = createRouterSpy();\n\n  await <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n      .configureTestingModule({\n        imports: [SharedModule],\n        declarations: [HeroDetailComponent],\n        providers: [\n          {provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: activatedRoute},\n          {provide: HeroService, useClass: TestHeroService},\n          {provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, useValue: routerSpy},\n        ]\n      })\n      .compileComponents();\n});\n\n</code-example>\n<p translation-result=\"on\">它的导入声明少一些（未显示），稍微干净一些，小一些。</p><p translation-origin=\"off\">It's a bit tighter and smaller, with fewer import statements (not shown).</p>\n\n<a id=\"feature-module-import\"></a>\n<h4 id=\"import-a-feature-module\" translation-result=\"on\">导入特性模块<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#import-a-feature-module\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"import-a-feature-module\">Import a feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#import-a-feature-module\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 是 <code>HeroModule</code> 这个<a href=\"guide/feature-modules\">特性模块</a>的一部分，它聚合了更多相互依赖的片段，包括 <code>SharedModule</code>。\n试试下面这个导入了 <code>HeroModule</code> 的测试配置：</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> is part of the <code>HeroModule</code> <a href=\"guide/feature-modules\">Feature Module</a> that aggregates more of the interdependent pieces\nincluding the <code>SharedModule</code>.\nTry a test configuration that imports the <code>HeroModule</code> like this one:</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-hero-module\" header=\"app/hero/hero-detail.component.spec.ts (HeroModule setup)\">\nbeforeEach(async () => {\n  const routerSpy = createRouterSpy();\n\n  await <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n      .configureTestingModule({\n        imports: [HeroModule],\n        providers: [\n          {provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: activatedRoute},\n          {provide: HeroService, useClass: TestHeroService},\n          {provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, useValue: routerSpy},\n        ]\n      })\n      .compileComponents();\n});\n\n</code-example>\n<p translation-result=\"on\">这样特别清爽。只有 <code>providers</code> 里面的测试替身被保留。连 <code>HeroDetailComponent</code> 声明都消失了。</p><p translation-origin=\"off\">That's <em>really</em> crisp. Only the <em>test doubles</em> in the <code>providers</code> remain. Even the <code>HeroDetailComponent</code> declaration is gone.</p>\n\n<p translation-result=\"on\">事实上，如果你试图声明它，Angular 就会抛出一个错误，因为 <code>HeroDetailComponent</code> 同时声明在了 <code>HeroModule</code> 和 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 创建的 <code>DynamicTestModule</code> 中。</p><p translation-origin=\"off\">In fact, if you try to declare it, Angular will throw an error because\n<code>HeroDetailComponent</code> is declared in both the <code>HeroModule</code> and the <code>DynamicTestModule</code>\ncreated by the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果模块中有很多共同依赖，并且该模块很小（这也是特性模块的应有形态），那么直接导入组件的特性模块可以成为配置这些测试的简易方式。</p><p translation-origin=\"off\">Importing the component's feature module can be the easiest way to configure tests\nwhen there are many mutual dependencies within the module and\nthe module is small, as feature modules tend to be.</p>\n\n</div>\n<a id=\"component-override\"></a>\n<h2 id=\"override-component-providers\" translation-result=\"on\">改写组件的服务提供者<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#override-component-providers\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"override-component-providers\">Override component providers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#override-component-providers\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code>HeroDetailComponent</code> 提供自己的 <code>HeroDetailService</code> 服务。</p><p translation-origin=\"off\">The <code>HeroDetailComponent</code> provides its own <code>HeroDetailService</code>.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.ts\" region=\"prototype\" header=\"app/hero/hero-detail.component.ts (prototype)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector:    'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls:  ['./hero-detail.component.css' ],\n  providers:  [ HeroDetailService ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(\n    private heroDetailService: HeroDetailService,\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n  }\n}\n\n</code-example>\n<p translation-result=\"on\">在 <code>TestBed.configureTestingModule</code> 的 <code>providers</code> 中 stub 伪造组件的 <code>HeroDetailService</code> 是不可行的。\n这些是<strong>测试模块</strong>的提供者，而非组件的。组件级别的供应商应该在<strong>fixture 级别</strong>准备的依赖注入器。</p><p translation-origin=\"off\">It's not possible to stub the component's <code>HeroDetailService</code> in the <code>providers</code> of the <code>TestBed.configureTestingModule</code>.\nThose are providers for the <em>testing module</em>, not the component. They prepare the dependency injector at the <em>fixture level</em>.</p>\n\n<p translation-result=\"on\">Angular 会使用自己的注入器来创建这些组件，这个注入器是夹具的注入器的子注入器。\n它使用这个子注入器注册了该组件服务提供者（这里是 <code>HeroDetailService</code> ）。</p><p translation-origin=\"off\">Angular creates the component with its <em>own</em> injector, which is a <em>child</em> of the fixture injector.\nIt registers the component's providers (the <code>HeroDetailService</code> in this case) with the child injector.</p>\n\n<p translation-result=\"on\">测试没办法从测试夹具的注入器中获取子注入器中的服务，而 <code>TestBed.configureTestingModule</code> 也没法配置它们。</p><p translation-origin=\"off\">A test cannot get to child injector services from the fixture injector.\nAnd <code>TestBed.configureTestingModule</code> can't configure them either.</p>\n\n<p translation-result=\"on\">Angular 始终都在创建真实 <code>HeroDetailService</code> 的实例。</p><p translation-origin=\"off\">Angular has been creating new instances of the real <code>HeroDetailService</code> all along!</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果 <code>HeroDetailService</code> 向远程服务器发出自己的 XHR 请求，这些测试可能会失败或者超时。\n这个远程服务器可能根本不存在。</p><p translation-origin=\"off\">These tests could fail or timeout if the <code>HeroDetailService</code> made its own XHR calls to a remote server.\nThere might not be a remote server to call.</p>\n\n<p translation-result=\"on\">幸运的是，<code>HeroDetailService</code> 将远程数据访问的责任交给了注入进来的 <code>HeroService</code>。</p><p translation-origin=\"off\">Fortunately, the <code>HeroDetailService</code> delegates responsibility for remote data access to an injected <code>HeroService</code>.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.service.ts\" region=\"prototype\" header=\"app/hero/hero-detail.service.ts (prototype)\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroDetailService {\n  constructor(private heroService: HeroService) {  }\n/* . . . */\n}\n\n</code-example>\n<p translation-result=\"on\"><a href=\"guide/testing-components-scenarios#feature-module-import\">前面的测试配置</a>使用 <code>TestHeroService</code> 替换了真实的 <code>HeroService</code>，它拦截了发往服务器的请求，并伪造了服务器的响应。</p><p translation-origin=\"off\">The <a href=\"guide/testing-components-scenarios#feature-module-import\">previous test configuration</a> replaces the real <code>HeroService</code> with a <code>TestHeroService</code>\nthat intercepts server requests and fakes their responses.</p>\n\n</div>\n<p translation-result=\"on\">如果你没有这么幸运怎么办？如果伪造 <code>HeroService</code> 很难怎么办？如果 <code>HeroDetailService</code> 自己发出服务器请求怎么办？</p><p translation-origin=\"off\">What if you aren't so lucky. What if faking the <code>HeroService</code> is hard?\nWhat if <code>HeroDetailService</code> makes its own server requests?</p>\n\n<p translation-result=\"on\"><code>TestBed.overrideComponent</code> 方法可以将组件的 <code>providers</code> 替换为容易管理的<strong>测试替身</strong>，参阅下面的变体准备代码：</p><p translation-origin=\"off\">The <code>TestBed.overrideComponent</code> method can replace the component's <code>providers</code> with easy-to-manage <em>test doubles</em>\nas seen in the following setup variation:</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-override\" header=\"app/hero/hero-detail.component.spec.ts (Override setup)\">\nbeforeEach(async () => {\n  const routerSpy = createRouterSpy();\n\n  await <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>\n      .configureTestingModule({\n        imports: [HeroModule],\n        providers: [\n          {provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: activatedRoute},\n          {provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>, useValue: routerSpy},\n        ]\n      })\n\n      // Override component's own provider\n      .overrideComponent(\n          HeroDetailComponent,\n          {set: {providers: [{provide: HeroDetailService, useClass: HeroDetailServiceSpy}]}})\n\n      .compileComponents();\n});\n\n</code-example>\n<p translation-result=\"on\">注意，<code>TestBed.configureTestingModule</code> 不再提供（伪造的）<code>HeroService</code>，因为<a href=\"guide/testing-components-scenarios#spy-stub\">并不需要</a>。</p><p translation-origin=\"off\">Notice that <code>TestBed.configureTestingModule</code> no longer provides a (fake) <code>HeroService</code> because it's <a href=\"guide/testing-components-scenarios#spy-stub\">not needed</a>.</p>\n\n<a id=\"override-component-method\"></a>\n<h4 id=\"the-overridecomponent-method\" translation-result=\"on\"><code>overrideComponent</code> 方法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-overridecomponent-method\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"the-overridecomponent-method\">The <em>overrideComponent</em> method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-overridecomponent-method\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">注意这个 <code>overrideComponent</code> 方法。</p><p translation-origin=\"off\">Focus on the <code>overrideComponent</code> method.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"override-component-method\" header=\"app/hero/hero-detail.component.spec.ts (overrideComponent)\">\n.overrideComponent(\n    HeroDetailComponent,\n    {set: {providers: [{provide: HeroDetailService, useClass: HeroDetailServiceSpy}]}})\n\n</code-example>\n<p translation-result=\"on\">它接受两个参数：要改写的组件类型（<code>HeroDetailComponent</code>），以及用于改写的元数据对象。\n<a href=\"guide/testing-utility-apis#metadata-override-object\">用于改写的元数据对象</a>是一个泛型，其定义如下：</p><p translation-origin=\"off\">It takes two arguments: the component type to override (<code>HeroDetailComponent</code>) and an override metadata object.\nThe <a href=\"guide/testing-utility-apis#metadata-override-object\">override metadata object</a> is a generic defined as follows:</p>\n\n<code-example language=\"javascript\">\n  type <a href=\"api/core/testing/MetadataOverride\" class=\"code-anchor\">MetadataOverride</a>&#x3C;T> = {\n    add?: Partial&#x3C;T>;\n    remove?: Partial&#x3C;T>;\n    set?: Partial&#x3C;T>;\n  };\n</code-example>\n<p translation-result=\"on\">元数据重载对象可以添加和删除元数据属性的项目，也可以彻底重设这些属性。\n这个例子重新设置了组件的 <code>providers</code> 元数据。</p><p translation-origin=\"off\">A metadata override object can either add-and-remove elements in metadata properties or completely reset those properties.\nThis example resets the component's <code>providers</code> metadata.</p>\n\n<p translation-result=\"on\">这个类型参数 <code>T</code> 就是你传给 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 装饰器的元数据：</p><p translation-origin=\"off\">The type parameter, <code>T</code>, is the kind of metadata you'd pass to the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator:</p>\n\n<code-example language=\"javascript\">\n  selector?: string;\n  template?: string;\n  templateUrl?: string;\n  providers?: any[];\n  ...\n</code-example>\n<a id=\"spy-stub\"></a>\n<h4 id=\"provide-a-spy-stub-herodetailservicespy\" translation-result=\"on\">提供 <code>间谍桩</code> (<code>HeroDetailServiceSpy</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#provide-a-spy-stub-herodetailservicespy\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"provide-a-spy-stub-herodetailservicespy\">Provide a <em>spy stub</em> (<em>HeroDetailServiceSpy</em>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#provide-a-spy-stub-herodetailservicespy\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">这个例子把组件的 <code>providers</code> 数组完全替换成了一个包含 <code>HeroDetailServiceSpy</code> 的新数组。</p><p translation-origin=\"off\">This example completely replaces the component's <code>providers</code> array with a new array containing a <code>HeroDetailServiceSpy</code>.</p>\n\n<p translation-result=\"on\"><code>HeroDetailServiceSpy</code> 是实际 <code>HeroDetailService</code> 服务的桩版本，它伪造了该服务的所有必要特性。\n但它既不需要注入也不会委托给低层的 <code>HeroService</code> 服务，因此不用为 <code>HeroService</code> 提供测试替身。</p><p translation-origin=\"off\">The <code>HeroDetailServiceSpy</code> is a stubbed version of the real <code>HeroDetailService</code>\nthat fakes all necessary features of that service.\nIt neither injects nor delegates to the lower level <code>HeroService</code>\nso there's no need to provide a test double for that.</p>\n\n<p translation-result=\"on\">通过对该服务的方法进行刺探，<code>HeroDetailComponent</code> 的关联测试将会对 <code>HeroDetailService</code> 是否被调用过进行断言。\n因此，这个桩类会把它的方法实现为刺探方法：</p><p translation-origin=\"off\">The related <code>HeroDetailComponent</code> tests will assert that methods of the <code>HeroDetailService</code>\nwere called by spying on the service methods.\nAccordingly, the stub implements its methods as spies:</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"hds-spy\" header=\"app/hero/hero-detail.component.spec.ts (HeroDetailServiceSpy)\">\nclass HeroDetailServiceSpy {\n  testHero: Hero = {id: 42, name: 'Test Hero'};\n\n  /* emit cloned test hero */\n  getHero = jasmine.createSpy('getHero').and.callFake(\n      () => asyncData(Object.assign({}, this.testHero)));\n\n  /* emit clone of test hero, with changes merged in */\n  saveHero = jasmine.createSpy('saveHero')\n                 .and.callFake((hero: Hero) => asyncData(Object.assign(this.testHero, hero)));\n}\n\n\n</code-example>\n<a id=\"override-tests\"></a>\n<h4 id=\"the-override-tests\" translation-result=\"on\">改写测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-override-tests\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"the-override-tests\">The override tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#the-override-tests\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">现在，测试程序可以通过操控这个 spy-stub 的 <code>testHero</code>，直接控制组件的英雄，并确认那个服务方法被调用过。</p><p translation-origin=\"off\">Now the tests can control the component's hero directly by manipulating the spy-stub's <code>testHero</code>\nand confirm that service methods were called.</p>\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"override-tests\" header=\"app/hero/hero-detail.component.spec.ts (override tests)\">\nlet hdsSpy: HeroDetailServiceSpy;\n\nbeforeEach(async () => {\n  await createComponent();\n  // get the component's injected HeroDetailServiceSpy\n  hdsSpy = fixture.debugElement.injector.get(HeroDetailService) as any;\n});\n\nit('should have called `getHero`', () => {\n  expect(hdsSpy.getHero.calls.count()).toBe(1, 'getHero called once');\n});\n\nit('should display stub hero\\'s name', () => {\n  expect(page.nameDisplay.textContent).toBe(hdsSpy.testHero.name);\n});\n\nit('should save stub hero change', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     const origName = hdsSpy.testHero.name;\n     const newName = 'New Name';\n\n     page.nameInput.value = newName;\n\n     // In older browsers, such as IE, you might need a CustomEvent instead. See\n     // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n     page.nameInput.dispatchEvent(new <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>('input')); // tell Angular\n\n     expect(component.hero.name).toBe(newName, 'component hero has new name');\n     expect(hdsSpy.testHero.name).toBe(origName, 'service hero unchanged before save');\n\n     click(page.saveBtn);\n     expect(hdsSpy.saveHero.calls.count()).toBe(1, 'saveHero called once');\n\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();  // wait for async save to complete\n     expect(hdsSpy.testHero.name).toBe(newName, 'service hero has new name after save');\n     expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n   }));\n\n</code-example>\n<a id=\"more-overrides\"></a>\n<h4 id=\"more-overrides\" translation-result=\"on\">更多的改写<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#more-overrides\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"more-overrides\">More overrides<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-components-scenarios#more-overrides\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\"><code>TestBed.overrideComponent</code> 方法可以在相同或不同的组件中被反复调用。\n<code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 还提供了类似的 <code>overrideDirective</code>、<code>overrideModule</code> 和 <code>overridePipe</code> 方法，用来深入并重载这些其它类的部件。</p><p translation-origin=\"off\">The <code>TestBed.overrideComponent</code> method can be called multiple times for the same or different components.\nThe <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> offers similar <code>overrideDirective</code>, <code>overrideModule</code>, and <code>overridePipe</code> methods\nfor digging into and replacing parts of these other classes.</p>\n\n<p translation-result=\"on\">自己探索这些选项和组合。</p><p translation-origin=\"off\">Explore the options and combinations on your own.</p>\n\n\n  \n</div>\n\n\n<!-- links to this doc:\n - guide/testing\n - guide/testing-attribute-directives\n - guide/testing-components-basics\n - guide/testing-utility-apis\n - guide/upgrade-setup\n-->\n<!-- links from this doc:\n - api/animations/query\n - api/animations/trigger\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/TitleCasePipe\n - api/common/UpperCasePipe\n - api/common/http/HttpClient\n - api/core/AfterViewInit\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/Component#template\n - api/core/Component#templateUrl\n - api/core/DebugElement\n - api/core/Directive\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/HostListener\n - api/core/Injectable\n - api/core/Input\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgModule\n - api/core/OnInit\n - api/core/Output\n - api/core/ViewChild\n - api/core/testing/ComponentFixture\n - api/core/testing/ComponentFixtureAutoDetect\n - api/core/testing/MetadataOverride\n - api/core/testing/TestBed\n - api/core/testing/fakeAsync\n - api/core/testing/flush\n - api/core/testing/tick\n - api/core/testing/waitForAsync\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/Title\n - api/router/ActivatedRoute\n - api/router/ActivatedRoute#paramMap\n - api/router/Event\n - api/router/ParamMap\n - api/router/Params\n - api/router/Router\n - api/router/Router#events\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/convertToParamMap\n - api/router/testing/RouterTestingModule\n - guide/feature-modules\n - guide/http\n - guide/lifecycle-hooks\n - guide/router-tutorial-toh\n - guide/router-tutorial-toh#activated-route-in-action\n - guide/testing-components-basics#component-class-testing\n - guide/testing-components-scenarios#activatedroutestub\n - guide/testing-components-scenarios#async-observable-helpers\n - guide/testing-components-scenarios#async-observables\n - guide/testing-components-scenarios#async-test-with-fakeasync\n - guide/testing-components-scenarios#async-test-with-waitforasync\n - guide/testing-components-scenarios#automatic-change-detection\n - guide/testing-components-scenarios#bydirective-and-injected-directives\n - guide/testing-components-scenarios#calling-compilecomponents\n - guide/testing-components-scenarios#change-an-input-value-with-dispatchevent\n - guide/testing-components-scenarios#click-helper\n - guide/testing-components-scenarios#click-the-element\n - guide/testing-components-scenarios#clicking\n - guide/testing-components-scenarios#cold-observable\n - guide/testing-components-scenarios#comparing-dates-inside-fakeasync\n - guide/testing-components-scenarios#compile-components\n - guide/testing-components-scenarios#compilecomponents-is-async\n - guide/testing-components-scenarios#compilecomponents-is-harmless\n - guide/testing-components-scenarios#component-binding\n - guide/testing-components-scenarios#component-inside-a-test-host\n - guide/testing-components-scenarios#component-marble-tests\n - guide/testing-components-scenarios#component-override\n - guide/testing-components-scenarios#component-testing-scenarios\n - guide/testing-components-scenarios#component-with-a-dependency\n - guide/testing-components-scenarios#component-with-async-service\n - guide/testing-components-scenarios#component-with-external-files\n - guide/testing-components-scenarios#component-with-inputs-and-outputs\n - guide/testing-components-scenarios#components-with-routerlink\n - guide/testing-components-scenarios#consolidated-setup\n - guide/testing-components-scenarios#createcomponent-does-not-bind-data\n - guide/testing-components-scenarios#dashboard-hero-component\n - guide/testing-components-scenarios#detectchanges\n - guide/testing-components-scenarios#feature-module-import\n - guide/testing-components-scenarios#final-setup-and-tests\n - guide/testing-components-scenarios#get-injected-services\n - guide/testing-components-scenarios#import-a-feature-module\n - guide/testing-components-scenarios#import-a-shared-module\n - guide/testing-components-scenarios#jasmine-done\n - guide/testing-components-scenarios#jasmineclock-with-fakeasync\n - guide/testing-components-scenarios#learn-about-marble-testing\n - guide/testing-components-scenarios#marble-error-testing\n - guide/testing-components-scenarios#marble-frame\n - guide/testing-components-scenarios#marble-testing\n - guide/testing-components-scenarios#more-async-tests\n - guide/testing-components-scenarios#more-overrides\n - guide/testing-components-scenarios#nested-component-tests\n - guide/testing-components-scenarios#no_errors_schema\n - guide/testing-components-scenarios#override-component-providers\n - guide/testing-components-scenarios#page-object\n - guide/testing-components-scenarios#provide-a-spy-stub-herodetailservicespy\n - guide/testing-components-scenarios#provide-service-test-doubles\n - guide/testing-components-scenarios#query-for-the-h1\n - guide/testing-components-scenarios#routed-components\n - guide/testing-components-scenarios#routerlink\n - guide/testing-components-scenarios#routing-component\n - guide/testing-components-scenarios#setup-with-module-imports\n - guide/testing-components-scenarios#spy-stub\n - guide/testing-components-scenarios#stubbing-unneeded-components\n - guide/testing-components-scenarios#support-more-macrotasks\n - guide/testing-components-scenarios#synchronous-tests\n - guide/testing-components-scenarios#test-dashboardherocomponent-stand-alone\n - guide/testing-components-scenarios#testbedinject\n - guide/testing-components-scenarios#testing-with-a-spy\n - guide/testing-components-scenarios#testing-with-activatedroutestub\n - guide/testing-components-scenarios#tests-w-test-double\n - guide/testing-components-scenarios#the-async-beforeeach\n - guide/testing-components-scenarios#the-override-tests\n - guide/testing-components-scenarios#the-overridecomponent-method\n - guide/testing-components-scenarios#the-synchronous-beforeeach\n - guide/testing-components-scenarios#the-tick-function\n - guide/testing-components-scenarios#tickoptions\n - guide/testing-components-scenarios#triggereventhandler\n - guide/testing-components-scenarios#use-a-page-object\n - guide/testing-components-scenarios#use-both-techniques-together\n - guide/testing-components-scenarios#using-the-rxjs-scheduler-inside-fakeasync\n - guide/testing-components-scenarios#waitForAsync\n - guide/testing-components-scenarios#what-good-are-these-tests\n - guide/testing-components-scenarios#whenstable\n - guide/testing-components-scenarios#why-stubbed-routerlink-tests\n - guide/testing-utility-apis#metadata-override-object\n - http://reactivex.io/documentation/operators/defer.html\n - https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/testing-components-scenarios.md?message=docs%3A%20请简述你的修改...\n - https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support\n - https://plnkr.co/\n - https://rxjs.dev/guide/testing/marble-testing\n - https://rxmarbles.com/\n-->"}