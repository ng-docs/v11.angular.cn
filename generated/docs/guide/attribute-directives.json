{"id":"guide/attribute-directives","title":"Attribute directives","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/attribute-directives.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"attribute-directives\" translation-result=\"on\">属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#attribute-directives\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"attribute-directives\">Attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#attribute-directives\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">使用属性型指令，可以更改 DOM 元素和 Angular 组件的外观或行为。</p><p translation-origin=\"off\">With attribute directives, you can change the appearance or behavior of DOM elements and Angular components.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">有关包含本指南中代码片段的有效示例，请参见<live-example></live-example></p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<h2 id=\"building-an-attribute-directive\" translation-result=\"on\">建立属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#building-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"building-an-attribute-directive\">Building an attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#building-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节将引导你创建“突出显示”指令，该指令会将宿主元素的背景色设置为黄色。</p><p translation-origin=\"off\">This section walks you through creating a highlight directive that sets the background color of the host element to yellow.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">   要创建指令，请使用 CLI 命令 <a href=\"cli/generate\"><code>ng generate directive</code></a>。</p><p translation-origin=\"off\">To create a directive, use the CLI command <a href=\"cli/generate\"><code>ng generate directive</code></a>.</p>\n\n  <code-example language=\"sh\">\nng generate directive highlight\n</code-example>\n<p translation-result=\"on\">  CLI 创建 <code>src/app/highlight.directive.ts</code> 以及相应的测试文件 <code>src/app/highlight.directive.spec.ts</code>，并在 <code>AppModule</code> 中声明此指令类。</p><p translation-origin=\"off\">  The CLI creates <code>src/app/highlight.directive.ts</code>, a corresponding test file <code>src/app/highlight.directive.spec.ts</code>, and declares the directive class in the <code>AppModule</code>.</p>\n\n<p translation-result=\"on\">  CLI 生成默认的 <code>src/app/highlight.directive.ts</code>，如下所示：</p><p translation-origin=\"off\">  The CLI generates the default <code>src/app/highlight.directive.ts</code> as follows:</p>\n\n<p>  <code-example path=\"attribute-directives/src/app/highlight.directive.0.ts\" header=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor() { }\n}\n\n\n</code-example></p>\n<p translation-result=\"on\">  <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> 装饰器的配置属性会指定指令的 CSS 属性选择器 <code>[appHighlight]</code>。</p><p translation-origin=\"off\">  The <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> decorator's configuration property specifies the directive's CSS attribute selector, <code>[appHighlight]</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"> 从 <code>@angular/core</code> 导入 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>。<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 的 <code>nativeElement</code> 属性会提供对宿主 DOM 元素的直接访问权限。</p><p translation-origin=\"off\">Import <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> from <code>@angular/core</code>.\n<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> grants direct access to the host DOM element through its <code>nativeElement</code> property.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在指令的 <code>constructor()</code> 中添加 <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> 以<a href=\"guide/dependency-injection\">注入</a>对宿主 DOM 元素的引用，该元素就是 <code>appHighlight</code> 的作用目标。</p><p translation-origin=\"off\">Add <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> in the directive's <code>constructor()</code> to <a href=\"guide/dependency-injection\">inject</a> a reference to the host DOM element, the element to which you apply <code>appHighlight</code>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">向 <code>HighlightDirective</code> 类中添加逻辑，将背景设置为黄色</p><p translation-origin=\"off\">Add logic to the <code>HighlightDirective</code> class that sets the background to yellow.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.1.ts\" header=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n    constructor(el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n       el.nativeElement.style.backgroundColor = 'yellow';\n    }\n}\n\n\n</code-example>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  指令<em>不</em>支持名称空间。</p><p translation-origin=\"off\">  Directives <em>do not</em> support namespaces.</p>\n\n<p>  <code-example path=\"attribute-directives/src/app/app.component.avoid.html\" header=\"src/app/app.component.avoid.html (unsupported)\" region=\"unsupported\">\n&#x3C;p app:Highlight>This is invalid&#x3C;/p>\n\n</code-example></p>\n</div>\n<a id=\"apply-directive\"></a>\n<h2 id=\"applying-an-attribute-directive\" translation-result=\"on\">应用属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#applying-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"applying-an-attribute-directive\">Applying an attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#applying-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<ol>\n<li>\n<p translation-result=\"on\">要使用 <code>HighlightDirective</code>，请将 <code>&#x3C;p></code> 元素添加到 HTML 模板中，并以伪指令作为属性。</p><p translation-origin=\"off\">To use the <code>HighlightDirective</code>, add a <code>&#x3C;p></code> element to the HTML template with the directive as an attribute.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" header=\"src/app/app.component.html\" region=\"applied\">\n&#x3C;p appHighlight>Highlight me!&#x3C;/p>\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">Angualr 会创建 <code>HighlightDirective</code> 类的实例，并将 <code>&#x3C;p></code> 元素的引用注入到该指令的构造函数中，它会将 <code>&#x3C;p></code> 元素的背景样式设置为黄色。</p><p translation-origin=\"off\">Angular creates an instance of the <code>HighlightDirective</code> class and injects a reference to the <code>&#x3C;p></code> element into the directive's constructor, which sets the <code>&#x3C;p></code> element's background style to yellow.</p>\n\n<a id=\"respond-to-user\"></a>\n<h2 id=\"handling-user-events\" translation-result=\"on\">处理用户事件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#handling-user-events\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"handling-user-events\">Handling user events<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#handling-user-events\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节会展示如何检测用户何时将鼠标移入或移出元素以及如何通过设置或清除突出显示颜色来进行响应。</p><p translation-origin=\"off\">This section shows you how to detect when a user mouses into or out of the element and to respond by setting or clearing the highlight color.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">从 '@angular/core' 导入 <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code></p><p translation-origin=\"off\">Import <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> from '@angular/core'.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts (imports)\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">添加两个事件处理程序，它们会在鼠标进入或离开时做出响应，每个事件处理程序都带有 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>()</code> 装饰器。</p><p translation-origin=\"off\">Add two event handlers that respond when the mouse enters or leaves, each with the <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>()</code> decorator.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts (mouse-methods)\" region=\"mouse-methods\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight('yellow');\n}\n\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n  this.highlight(null);\n}\n\nprivate highlight(color: string) {\n  this.el.nativeElement.style.backgroundColor = color;\n}\n\n</code-example>\n<p translation-result=\"on\">使用 <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>()</code> 装饰器，你可以订阅本属性型指令宿主 DOM 元素上的事件（在本例中是 <code>&#x3C;p></code>）。</p><p translation-origin=\"off\">With the <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>()</code> decorator, you can subscribe to events of the DOM element that hosts an attribute directive, the <code>&#x3C;p></code> in this case.</p>\n\n<p translation-result=\"on\">处理程序会委托给一个辅助方法 <code>highlight()</code>，该方法会设置宿主 DOM 元素 <code>el</code> 的颜色。</p><p translation-origin=\"off\">The handlers delegate to a helper method, <code>highlight()</code>, that sets the color on the host DOM element, <code>el</code>.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">完整的指令如下：</p><p translation-origin=\"off\">The complete directive is as follows:</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" header=\"src/app/highlight.directive.ts\">\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight('yellow');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n}\n\n</code-example>\n<p translation-result=\"on\">当指针悬停在 p 元素上时，背景颜色就会出现；而当指针移出时，背景颜色就会消失。</p><p translation-origin=\"off\">The background color appears when the pointer hovers over the paragraph element and disappears as the pointer moves out.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-anim.gif\" alt=\"Second Highlight\" width=\"204\" height=\"72\">\n</div>\n<a id=\"bindings\"></a>\n<h2 id=\"passing-values-into-an-attribute-directive\" translation-result=\"on\">将值传递给属性型指令<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#passing-values-into-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"passing-values-into-an-attribute-directive\">Passing values into an attribute directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#passing-values-into-an-attribute-directive\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节将引导你在应用 <code>HighlightDirective</code> 时设置突出显示颜色。</p><p translation-origin=\"off\">This section walks you through setting the highlight color while applying the <code>HighlightDirective</code>.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>highlight.directive.ts</code> 中，从 <code>@angular/core</code> 导入 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p><p translation-origin=\"off\">In <code>highlight.directive.ts</code>, import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> from <code>@angular/core</code>.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" header=\"src/app/highlight.directive.ts (imports)\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">添加一个 <code>appHighlight</code> 的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性。</p><p translation-origin=\"off\">Add an <code>appHighlight</code> <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" header=\"src/app/highlight.directive.ts\" region=\"input\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() appHighlight: string;\n\n</code-example>\n<p translation-result=\"on\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 装饰器会将元数据添加到此类，以便让该指令的 <code>appHighlight</code> 属性可用于绑定。</p><p translation-origin=\"off\">The <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator adds metadata to the class that makes the directive's <code>appHighlight</code> property available for binding.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在 <code>app.component.ts</code>，将 <code>color</code> 属性添加到 <code>AppComponent</code>。</p><p translation-origin=\"off\">In <code>app.component.ts</code>, add a <code>color</code> property to the <code>AppComponent</code>.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.1.ts\" header=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color = 'yellow';\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">要同时应用指令和颜色，请通过 <code>appHighlight</code> 指令选择器使用属性绑定，将其设置为 <code>color</code>。</p><p translation-origin=\"off\">To simultaneously apply the directive and the color, use property binding with the <code>appHighlight</code> directive selector, setting it equal to <code>color</code>.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" header=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\"><code>[appHighlight]</code> 属性绑定执行两项任务：</p><p translation-origin=\"off\">The <code>[appHighlight]</code> attribute binding performs two tasks:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">将突出显示指令应用于 <code>&#x3C;p></code> 元素</p><p translation-origin=\"off\">applies the highlighting directive to the <code>&#x3C;p></code> element</p>\n\n</li>\n<li>\n<p translation-result=\"on\">通过属性绑定设置指令的突出显示颜色</p><p translation-origin=\"off\">sets the directive's highlight color with a property binding</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"setting-the-value-with-user-input\" translation-result=\"on\">通过用户输入来设置值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#setting-the-value-with-user-input\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"setting-the-value-with-user-input\">Setting the value with user input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#setting-the-value-with-user-input\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本节指导你添加单选按钮，将你选择的颜色绑定到 <code>appHighlight</code> 指令。</p><p translation-origin=\"off\">This section guides you through adding radio buttons to bind your color choice to the <code>appHighlight</code> directive.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">将标记添加到 <code>app.component.html</code> 以选择颜色，如下所示：</p><p translation-origin=\"off\">Add markup to <code>app.component.html</code> for choosing a color as follows:</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" header=\"src/app/app.component.html (v2)\" region=\"v2\">\n&#x3C;h1>My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&#x3C;/h1>\n\n&#x3C;h2>Pick a highlight color&#x3C;/h2>\n&#x3C;div>\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan\n&#x3C;/div>\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">修改 <code>AppComponent.color</code>，使其没有初始值。</p><p translation-origin=\"off\">Revise the <code>AppComponent.color</code> so that it has no initial value.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.ts\" header=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">启动本应用的开发服务器，以验证用户可以通过单选按钮选择颜色。</p><p translation-origin=\"off\">Serve your application to verify that the user can choose the color with the radio buttons.</p>\n\n<div class=\"lightbox\">\n    <img src=\"generated/images/guide/attribute-directives/highlight-directive-v2-anim.gif\" alt=\"Animated gif of the refactored highlight directive changing color according to the radio button the user selects\" width=\"432\" height=\"172\">\n</div>\n</li>\n</ol>\n<a id=\"second-property\"></a>\n<h2 id=\"binding-to-a-second-property\" translation-result=\"on\">绑定到第二个属性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#binding-to-a-second-property\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"binding-to-a-second-property\">Binding to a second property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#binding-to-a-second-property\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">本节将指导你配置应用程序，以便开发人员可以设置默认颜色。</p><p translation-origin=\"off\">This section guides you through configuring your application so the developer can set the default color.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">将第二个 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 属性 <code>defaultColor</code> 添加到 <code>HighlightDirective</code>。</p><p translation-origin=\"off\">Add a second <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property to <code>HighlightDirective</code> called <code>defaultColor</code>.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" header=\"src/app/highlight.directive.ts (defaultColor)\" region=\"defaultColor\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor: string;\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">修改指令的 <code>onMouseEnter</code>，使其首先尝试使用 <code>highlightColor</code> 进行突出显示，然后尝试 <code>defaultColor</code>，如果两个属性都 <code>undefined</code>，则变回 <code>red</code>。</p><p translation-origin=\"off\">Revise the directive's <code>onMouseEnter</code> so that it first tries to highlight with the <code>highlightColor</code>, then with the <code>defaultColor</code>, and falls back to <code>red</code> if both properties are <code>undefined</code>.</p>\n\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" header=\"src/app/highlight.directive.ts (mouse-enter)\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || this.defaultColor || 'red');\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">若要绑定到 <code>AppComponent.color</code> 并回退为默认颜色“紫罗兰（violet）”，请添加以下 HTML。在这里，<code>defaultColor</code> 绑定没有使用方括号 <code>[]</code>，因为它是静态的。</p><p translation-origin=\"off\">To bind to the <code>AppComponent.color</code> and fall back to \"violet\" as the default color, add the following HTML.\nIn this case,  the <code>defaultColor</code> binding doesn't use square brackets, <code>[]</code>, because it is static.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" header=\"src/app/app.component.html (defaultColor)\" region=\"defaultColor\">\n&#x3C;p [appHighlight]=\"color\" defaultColor=\"violet\">\n  Highlight me too!\n&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">与组件一样，你可以将指令的多个属性绑定添加到宿主元素上。</p><p translation-origin=\"off\">As with components, you can add multiple directive property bindings to a host element.</p>\n\n</li>\n</ol>\n<p translation-result=\"on\">如果没有默认颜色（defaultColor）绑定，则默认为红色。当用户选择一种颜色时，所选的颜色将成为突出显示的颜色。</p><p translation-origin=\"off\">The default color is red if there is no default color binding.\nWhen the user chooses a color the selected color becomes the active highlight color.</p>\n\n  <div class=\"lightbox\">\n    <img src=\"generated/images/guide/attribute-directives/highlight-directive-final-anim.gif\" alt=\"Animated gif of final highlight directive that shows red color with no binding and violet with the default color set. When user selects color, the selection takes precedence.\" width=\"440\" height=\"212\">\n  </div>\n<a id=\"ngNonBindable\"></a>\n<h2 id=\"deactivating-angular-processing-with-ngnonbindable\" translation-result=\"on\">通过 <code>NgNonBindable</code> 停用 Angular 处理过程<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#deactivating-angular-processing-with-ngnonbindable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"deactivating-angular-processing-with-ngnonbindable\">Deactivating Angular processing with <code>NgNonBindable</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#deactivating-angular-processing-with-ngnonbindable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">要防止在浏览器中进行表达式求值，请将 <code>ngNonBindable</code> 添加到宿主元素。<code>ngNonBindable</code> 会停用模板中的插值、指令和绑定。</p><p translation-origin=\"off\">To prevent expression evaluation in the browser, add <code>ngNonBindable</code> to the host element.\n<code>ngNonBindable</code> deactivates interpolation, directives, and binding in templates.</p>\n\n<p translation-result=\"on\">在下面的示例中，表达式 <code>{{ 1 + 1 }}</code> 的渲染方式会和在代码编辑器的一样，而不会显示 <code>2</code>。</p><p translation-origin=\"off\">In the following example, the expression <code>{{ 1 + 1 }}</code> renders just as it does in your code editor, and does not display <code>2</code>.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" header=\"src/app/app.component.html\" region=\"ngNonBindable\">\n&#x3C;p>Use ngNonBindable to stop evaluation.&#x3C;/p>\n&#x3C;p ngNonBindable>This should not evaluate: {{ 1 + 1 }}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">将 <code>ngNonBindable</code> 应用于元素将停止对该元素的子元素的绑定。但是，<code>ngNonBindable</code> 仍然允许指令在应用 <code>ngNonBindable</code> 的元素上工作。在以下示例中，<code>appHighlight</code> 指令仍处于活跃状态，但 Angular 不会对表达式 <code>{{ 1 + 1 }}</code> 求值。</p><p translation-origin=\"off\">Applying <code>ngNonBindable</code> to an element stops binding for that element's child elements.\nHowever, <code>ngNonBindable</code> still allows directives to work on the element where you apply <code>ngNonBindable</code>.\nIn the following example, the <code>appHighlight</code> directive is still active but Angular does not evaluate the expression <code>{{ 1 + 1 }}</code>.</p>\n\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" header=\"src/app/app.component.html\" region=\"ngNonBindable-with-directive\">\n&#x3C;h3>ngNonBindable with a directive&#x3C;/h3>\n&#x3C;div ngNonBindable [appHighlight]=\"'yellow'\">This should not evaluate: {{ 1 +1 }}, but will highlight yellow.\n&#x3C;/div>\n\n</code-example>\n<p translation-result=\"on\">如果将 <code>ngNonBindable</code> 应用于父元素，则 Angular 会禁用该元素的子元素的任何插值和绑定，例如属性绑定或事件绑定。</p><p translation-origin=\"off\">If you apply <code>ngNonBindable</code> to a parent element, Angular disables interpolation and binding of any sort, such as property binding or event binding, for the element's children.</p>\n\n\n  \n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/bootstrapping\n - guide/built-in-directives\n - guide/dependency-injection-in-action\n - guide/example-apps-list\n - guide/glossary\n-->\n<!-- links from this doc:\n - api/core/Attribute\n - api/core/Directive\n - api/core/ElementRef\n - api/core/HostListener\n - api/core/Input\n - cli/generate\n - guide/attribute-directives#applying-an-attribute-directive\n - guide/attribute-directives#attribute-directives\n - guide/attribute-directives#binding-to-a-second-property\n - guide/attribute-directives#building-an-attribute-directive\n - guide/attribute-directives#deactivating-angular-processing-with-ngnonbindable\n - guide/attribute-directives#handling-user-events\n - guide/attribute-directives#passing-values-into-an-attribute-directive\n - guide/attribute-directives#setting-the-value-with-user-input\n - guide/dependency-injection\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/attribute-directives.md?message=docs%3A%20请简述你的修改...\n-->"}