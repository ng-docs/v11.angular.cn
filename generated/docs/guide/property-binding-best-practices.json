{"id":"guide/property-binding-best-practices","title":"Property binding best practices","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/property-binding-best-practices.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"property-binding-best-practices\" translation-result=\"on\">属性绑定的最佳实践<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#property-binding-best-practices\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"property-binding-best-practices\">Property binding best practices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#property-binding-best-practices\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">通过遵循一些指导原则，你可以使用属性绑定来帮助你最大限度地减少错误并让代码保持可读性。</p><p translation-origin=\"off\">By following a few guidelines, you can use property binding in a way that helps you minimize bugs and keep your code readable.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">本章包含代码片段的工作实例参阅<live-example name=\"property-binding\"></live-example>。</p><p translation-origin=\"off\">See the <live-example name=\"property-binding\"></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<h2 id=\"avoid-side-effects\" translation-result=\"on\">避免副作用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"avoid-side-effects\">Avoid side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">模板表达式的计算应该没有明显的副作用。使用模板表达式的语法来帮你避免副作用。通常，正确的语法会阻止你为属性绑定表达式中的任何东西赋值。该语法还会阻止你使用递增和递减运算符。</p><p translation-origin=\"off\">Evaluation of a template expression should have no visible side effects.\nUse the syntax for template expressions to help avoid side effects.\nIn general, the correct syntax prevents you from assigning a value to anything in a property binding expression.\nThe syntax also prevents you from using increment and decrement operators.</p>\n\n<h3 id=\"an-example-of-producing-side-effects\" translation-result=\"on\">产生副作用的一个例子<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#an-example-of-producing-side-effects\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"an-example-of-producing-side-effects\">An example of producing side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#an-example-of-producing-side-effects\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">如果你的表达式改变了你所绑定的其它东西的值，那么这种更改就会产生副作用。 Angular 可能显示也可能不显示更改后的值。如果 Angular 确实检测到了这个变化，就会抛出一个错误。</p><p translation-origin=\"off\">If you had an expression that changed the value of something else that you were binding to, that change of value would be a side effect.\nAngular might or might not display the changed value.\nIf Angular does detect the change, it throws an error.</p>\n\n<p translation-result=\"on\">作为一项最佳实践，请只使用属性和仅会返回值的方法。</p><p translation-origin=\"off\">As a best practice, use only properties and methods that return values.</p>\n\n<h2 id=\"return-the-proper-type\" translation-result=\"on\">返回合适的类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"return-the-proper-type\">Return the proper type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">模板表达式应该求值为目标属性所期望的值类型。例如，如果目标属性需要一个字符串，就返回一个字符串；如果需要一个数字，就返回一个数字；如果需要一个对象，就返回一个对象。</p><p translation-origin=\"off\">A template expression should evaluate to the type of value that the target property expects.\nFor example, return a string if the target property expects a string, a number if it expects a number, or an object if it expects an object.</p>\n\n<h3 id=\"passing-in-a-string\" translation-result=\"on\">传入字符串<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-a-string\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"passing-in-a-string\">Passing in a string<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-a-string\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在下面的例子中，<code>ItemDetailComponent</code> 的 <code>childItem</code> 属性需要一个字符串。</p><p translation-origin=\"off\">In the following example, the <code>childItem</code> property of the <code>ItemDetailComponent</code> expects a string.</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [childItem]=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p translation-result=\"on\">你可以通过查看 <code>ItemDetailComponent</code> 来确认这种预期，其中的 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 类型为 <code>string</code> ：</p><p translation-origin=\"off\">You can confirm this expectation by looking in the <code>ItemDetailComponent</code> where the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> type is <code>string</code>:</p>\n\n<code-example path=\"property-binding/src/app/item-detail/item-detail.component.ts\" region=\"input-type\" header=\"src/app/item-detail/item-detail.component.ts (setting the @Input() type)\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() childItem: string;\n\n</code-example>\n<p translation-result=\"on\"><code>AppComponent</code> 中的 <code>parentItem</code> 是一个字符串，这意味着 <code>[childItem]=\"parentItem\"</code> 中的 <code>parentItem</code> 应该求值为一个字符串。</p><p translation-origin=\"off\">The <code>parentItem</code> in <code>AppComponent</code> is a string, which means that the expression, <code>parentItem</code> within <code>[childItem]=\"parentItem\"</code>, evaluates to a string.</p>\n\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"parent-data-type\" header=\"src/app/app.component.ts\">\nparentItem = 'lamp';\n\n</code-example>\n<p translation-result=\"on\">如果 <code>parentItem</code> 是其它类型的，你同样应该把 <code>childItem</code> 这个 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 指定为那个类型。</p><p translation-origin=\"off\">If <code>parentItem</code> were some other type, you would need to specify <code>childItem</code>  <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> as that type as well.</p>\n\n<h3 id=\"passing-in-an-object\" translation-result=\"on\">传入一个对象<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"passing-in-an-object\">Passing in an object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding-best-practices#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在这个例子中， <code>ItemListComponent</code> 是 <code>AppComponent</code> 的子组件，其 <code>items</code> 属性需要一个对象数组。</p><p translation-origin=\"off\">In this example, <code>ItemListComponent</code> is a child component of <code>AppComponent</code> and the <code>items</code> property expects an array of objects.</p>\n\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"pass-object\" header=\"src/app/app.component.html\">\n&#x3C;app-item-list [items]=\"currentItems\">&#x3C;/app-item-list>\n\n</code-example>\n<p translation-result=\"on\">在 <code>ItemListComponent</code> 中，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> <code>items</code> 的类型为 <code>Item[]</code>。</p><p translation-origin=\"off\">In the <code>ItemListComponent</code> the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, <code>items</code>, has a type of <code>Item[]</code>.</p>\n\n<code-example path=\"property-binding/src/app/item-list/item-list.component.ts\" region=\"item-input\" header=\"src/app/item-list.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() items: Item[];\n\n</code-example>\n<p translation-result=\"on\">注意 <code>Item</code> 是一个有两个属性的对象。一个是 <code>id</code>，一个是 <code>name</code>。</p><p translation-origin=\"off\">Notice that <code>Item</code> is an object that it has two properties; an <code>id</code> and a <code>name</code>.</p>\n\n<code-example path=\"property-binding/src/app/item.ts\" region=\"item-class\" header=\"src/app/item.ts\">\nexport interface Item {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p translation-result=\"on\">在 <code>app.component.ts</code> 中，<code>currentItems</code> 是一个对象数组，与 <code>items.ts</code> 中的 <code>Item</code> 对象具有相同的形态：有一个 <code>id</code>，有一个 <code>name</code>。</p><p translation-origin=\"off\">In <code>app.component.ts</code>, <code>currentItems</code> is an array of objects in the same shape as the <code>Item</code> object in <code>items.ts</code>, with an <code>id</code> and a <code>name</code>.</p>\n\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"pass-object\" header=\"src/app.component.ts\">\ncurrentItems = [{\n  id: 21,\n  name: 'phone'\n}];\n\n</code-example>\n<p translation-result=\"on\">通过提供一个形态相同的对象，你就可以满足 Angular 在计算表达式 <code>currentItems</code>  时对 <code>items</code> 的期待。</p><p translation-origin=\"off\">By supplying an object in the same shape, you satisfy the expectations of <code>items</code> when Angular evaluates the expression <code>currentItems</code>.</p>\n\n\n  \n</div>\n\n\n<!-- links to this doc:\n - guide/property-binding\n-->\n<!-- links from this doc:\n - api/core/Input\n - guide/property-binding-best-practices#an-example-of-producing-side-effects\n - guide/property-binding-best-practices#avoid-side-effects\n - guide/property-binding-best-practices#passing-in-a-string\n - guide/property-binding-best-practices#passing-in-an-object\n - guide/property-binding-best-practices#property-binding-best-practices\n - guide/property-binding-best-practices#return-the-proper-type\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/property-binding-best-practices.md?message=docs%3A%20请简述你的修改...\n-->"}