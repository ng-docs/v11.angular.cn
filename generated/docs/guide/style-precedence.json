{
  "id": "guide/style-precedence",
  "title": "Style Precedence",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/style-precedence.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"style-precedence\" translation-result=\"on\">样式的优先级<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#style-precedence\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"style-precedence\">Style Precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#style-precedence\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">当存在多个绑定具有相同的类名或样式属性名时，Angular 会使用一组优先级规则来确定要应用于此元素的类或样式。这些规则指定了与样式和类相关的绑定的优先顺序。最有特异性的优先级最高，最宽松的优先级最低，样式优先级如下：</p><p translation-origin=\"off\">When there are multiple bindings to the same class name or style attribute, Angular uses a set of precedence rules to determine which classes or styles to apply to the element.\nThese rules specify an order for which style and class related bindings have priority.\nThis styling precedence is as follows, from the most specific with the highest priority to least specific with the lowest priority:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\"> 模板绑定是最有特异性的，因为它们直接且排他地应用于此元素，因此它们具有最高的优先级。</p><p translation-origin=\"off\">Template bindings are the most specific because they apply to the element directly and exclusively, so they have the highest precedence.</p>\n\n<table width=\"100%\">\n  <colgroup><col width=\"40%\">\n  <col width=\"60%\">\n  </colgroup><thead>\n    <tr>\n      <th>Binding type</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Property binding</td>\n      <td><code>&#x3C;div [class.foo]=\"hasFoo\"></code><br><code>&#x3C;div [style.color]=\"color\"></code></td>\n    </tr>\n    <tr>\n      <td>Map binding</td>\n      <td><code>&#x3C;div [class]=\"classExpression\"></code><br><code>&#x3C;div [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"></code></td>\n    </tr>\n    <tr>\n      <td>Static value</td>\n      <td><code>&#x3C;div class=\"foo\"></code><br><code>&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"></code></td>\n    </tr>\n  </tbody>\n</table>\n</li>\n<li>\n<p translation-result=\"on\"> 指令的宿主绑定不太有特异性，因为你可以在多个位置使用该指令，因此它们的优先级比模板绑定低。</p><p translation-origin=\"off\">Directive host bindings are less specific because you can use directives in multiple locations, so they have a lower precedence than template bindings.</p>\n\n<table width=\"100%\">\n  <colgroup><col width=\"40%\">\n  <col width=\"60%\">\n  </colgroup><thead>\n    <tr>\n      <th>Binding type</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Property binding</td>\n      <td><code>host: {'[class.foo]': 'hasFoo'}</code><br><code>host: {'[style.color]': 'color'}</code></td>\n    </tr>\n    <tr>\n      <td>Map binding</td>\n      <td><code>host: {'[class]': 'classExpr'}</code><br><code>host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'}</code></td>\n    </tr>\n    <tr>\n      <td>Static value</td>\n      <td><code>host: {'class': 'foo'}</code><br><code>host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code></td>\n    </tr>\n  </tbody>\n</table>\n</li>\n<li>\n<p translation-result=\"on\"> 组件宿主绑定的优先级最低。</p><p translation-origin=\"off\">Component host bindings have the lowest precedence.</p>\n\n  <table width=\"100%\">\n  <colgroup><col width=\"40%\">\n  <col width=\"60%\">\n  </colgroup><thead>\n    <tr>\n      <th>Binding type</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Property binding</td>\n      <td><code>host: {'[class.foo]': 'hasFoo'}</code><br><code>host: {'[style.color]': 'color'}</code></td>\n    </tr>\n    <tr>\n      <td>Map binding</td>\n      <td><code>host: {'[class]': 'classExpression'}</code><br><code>host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpression'}</code></td>\n    </tr>\n    <tr>\n      <td>Static value</td>\n      <td><code>host: {'class': 'foo'}</code><br><code>host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code></td>\n    </tr>\n  </tbody>\n</table>\n</li>\n</ol>\n<h2 id=\"precedence-and-specificity\" translation-result=\"on\">优先级与特异性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-and-specificity\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"precedence-and-specificity\">Precedence and specificity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-and-specificity\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在下面的示例中，与 <code>[class.special]</code> 对特定类的绑定优先于一般性的 <code>[class]</code> 绑定。同样，到特定样式的绑定（例如 <code>[style.color]</code> ）要优先于一般性的 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 绑定。</p><p translation-origin=\"off\">In the following example, binding to a specific class, as in <code>[class.special]</code>, takes precedence over a generic <code>[class]</code> binding.\nSimilarly, binding to a specific style, as in <code>[style.color]</code>, takes precedence over a generic <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> binding.</p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"basic-specificity\" header=\"src/app/app.component.html\">\n&#x3C;h3>Basic specificity&#x3C;/h3>\n\n&#x3C;!-- The `class.special` binding overrides any value for the `special` class in `classExpression`.  -->\n&#x3C;div [class.special]=\"isSpecial\" [class]=\"classExpression\">Some text.&#x3C;/div>\n\n&#x3C;!-- The `style.color` binding overrides any value for the `color` property in `styleExpression`.  -->\n&#x3C;div [style.color]=\"color\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\">Some text.&#x3C;/div>\n\n</code-example>\n<h2 id=\"precedence-and-bindings-from-different-sources\" translation-result=\"on\">来自不同来源的优先级和绑定<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-and-bindings-from-different-sources\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"precedence-and-bindings-from-different-sources\">Precedence and bindings from different sources<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-and-bindings-from-different-sources\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">特异性规则也作用于绑定，即使它们来自不同的来源。元素可以具有源自针对自身模板的绑定、源自其匹配指令的宿主绑定以及源自匹配其组件的宿主绑定。</p><p translation-origin=\"off\">Specificity rules also apply to bindings even when they originate from different sources.\nAn element can have bindings that originate from its own template, from host bindings on matched directives, and from host bindings on matched components.</p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"source-specificity\" header=\"src/app/app.component.html\">\n&#x3C;h3>Source specificity&#x3C;/h3>\n\n&#x3C;!-- The `class.special` template binding overrides any host binding to the `special` class set by `dirWithClassBinding` or `comp-with-host-binding`.-->\n&#x3C;comp-with-host-binding [class.special]=\"isSpecial\" dirWithClassBinding>Some text.&#x3C;/comp-with-host-binding>\n\n&#x3C;!-- The `style.color` template binding overrides any host binding to the `color` property set by `dirWithStyleBinding` or `comp-with-host-binding`. -->\n&#x3C;comp-with-host-binding [style.color]=\"color\" dirWithStyleBinding>Some text.&#x3C;/comp-with-host-binding>\n\n</code-example>\n<h2 id=\"precedence-of-bindings-and-static-attributes\" translation-result=\"on\">绑定和静态 Attribute 的优先级<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-of-bindings-and-static-attributes\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"precedence-of-bindings-and-static-attributes\">Precedence of bindings and static attributes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#precedence-of-bindings-and-static-attributes\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">绑定优先于静态属性，因为它们是动态的。在以下情况下，<code>class</code> 和 <code>[class]</code> 具有相似的特异性，但是 <code>[class]</code> 绑定更有优先权。</p><p translation-origin=\"off\">Bindings take precedence over static attributes because they are dynamic.\nIn the following case, <code>class</code> and <code>[class]</code> have similar specificity, but the <code>[class]</code> binding takes precedence.</p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"dynamic-priority\" header=\"src/app/app.component.html\">\n&#x3C;h3>Dynamic vs <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>&#x3C;/h3>\n\n&#x3C;!-- If `classExpression` has a value for the `special` class, this value overrides the `class=\"special\"` below -->\n&#x3C;div class=\"special\" [class]=\"classExpression\">Some text.&#x3C;/div>\n\n&#x3C;!-- If `styleExpression` has a value for the `color` property, this value overrides the `<a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"` below -->\n&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\">Some text.&#x3C;/div>\n\n\n</code-example>\n<a id=\"styling-delegation\"></a>\n<h2 id=\"delegating-to-styles-with-lower-precedence\" translation-result=\"on\">用较低的优先级委托到某些样式<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#delegating-to-styles-with-lower-precedence\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"delegating-to-styles-with-lower-precedence\">Delegating to styles with lower precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/style-precedence#delegating-to-styles-with-lower-precedence\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">通过使用 <code>undefined</code> 值，较高优先级的样式也可以让位于较低优先级的样式。例如，考虑以下模板：</p><p translation-origin=\"off\">Higher precedence styles can defer to lower precedence styles using <code>undefined</code> values.\nFor example, consider the following template:</p>\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"style-delegation\" header=\"src/app/app.component.html\">\n&#x3C;comp-with-host-binding dirWithHostBinding>&#x3C;/comp-with-host-binding>\n\n</code-example>\n<p translation-result=\"on\">假设 <code>dirWithHostBinding</code> 指令和 <code>comp-with-host-binding</code> 组件都具有 <code>[style.width]</code> 宿主绑定。</p><p translation-origin=\"off\">Imagine that the <code>dirWithHostBinding</code> directive and the <code>comp-with-host-binding</code> component both have a <code>[style.width]</code> host binding.</p>\n\n<code-example path=\"attribute-binding/src/app/comp-with-host-binding.component.ts\" region=\"hostbinding\" header=\"src/app/comp-with-host-binding.component.ts and dirWithHostBinding.directive.ts\">\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.width')\nwidth = '200px';\n\n</code-example>\n<p translation-result=\"on\">如果 <code>dirWithHostBinding</code> 将其绑定设置为 <code>undefined</code> ，则 <code>width</code> 属性将回退到 <code>comp-with-host-binding</code> 宿主绑定的值。</p><p translation-origin=\"off\">If <code>dirWithHostBinding</code> sets its binding to <code>undefined</code>, the <code>width</code> property falls back to the value of the <code>comp-with-host-binding</code> host binding.</p>\n\n<code-example header=\"dirWithHostBinding directive\">\n@<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.width')\nwidth = ''; // undefined\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">  但如果 <code>dirWithHostBinding</code> 将其绑定设置为 <code>null</code>（只有 undefined 是例外），则 Angular 会完全移除 <code>width</code> 属性。</p><p translation-origin=\"off\">  If <code>dirWithHostBinding</code> sets its binding to <code>null</code>, Angular removes the <code>width</code> property entirely.</p>\n\n  <code-example header=\"dirWithHostBinding\">\n  @<a href=\"api/core/HostBinding\" class=\"code-anchor\">HostBinding</a>('style.width')\n  width = null;\n  </code-example>\n</div>\n\n  \n</div>\n\n\n<!-- links to this doc:\n - guide/attribute-binding\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/core/HostBinding\n - api/upgrade/static\n - guide/style-precedence#delegating-to-styles-with-lower-precedence\n - guide/style-precedence#precedence-and-bindings-from-different-sources\n - guide/style-precedence#precedence-and-specificity\n - guide/style-precedence#precedence-of-bindings-and-static-attributes\n - guide/style-precedence#style-precedence\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/style-precedence.md?message=docs%3A%20请简述你的修改...\n-->"
}