{"id":"guide/template-expression-operators","title":"Template expression operators","contents":"\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/template-expression-operators.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"template-expression-operators\" translation-result=\"on\">模板表达式运算符<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#template-expression-operators\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"template-expression-operators\">Template expression operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#template-expression-operators\"><i class=\"material-icons\">link</i></a></h1>\n\n<div class=\"callout is-critical\">\n<header translation-result=\"on\">已标记为归档</header><header translation-origin=\"off\">Marked for archiving</header>\n\n<p translation-result=\"on\">为确保你拥有最佳的体验，本主题已标记为存档，直到我们确定其清楚地传达了最准确的信息为止。</p><p translation-origin=\"off\">To ensure that you have the best experience possible, this topic is marked for archiving until we determine that it clearly conveys the most accurate information possible.</p>\n\n<p translation-result=\"on\">同时，下列主题可能会有所帮助：<a href=\"guide/hierarchical-dependency-injection\">分层注入器</a>。</p><p translation-origin=\"off\">In the meantime, this topic might be helpful: <a href=\"guide/hierarchical-dependency-injection\">Hierarchical injectors</a>.</p>\n\n<p translation-result=\"on\">如果你认为不应将此内容存档，请提交 <a href=\"https://github.com/angular/angular/issues/new?template=3-docs-bug.md\">GitHub 问题</a>。</p><p translation-origin=\"off\">If you think this content should not be archived, please file a <a href=\"https://github.com/angular/angular/issues/new?template=3-docs-bug.md\">GitHub issue</a>.</p>\n\n</div>\n<p translation-result=\"on\">Angular 模板表达语言采用了 JavaScript 语法的子集，并为特定情况添加了一些特殊的运算符。</p><p translation-origin=\"off\">The Angular template expression language employs a subset of JavaScript syntax supplemented with a few special operators\nfor specific scenarios.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">有关包含本指南中代码片段的有效示例，请参见<live-example></live-example></p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<a id=\"non-null-assertion-operator\"></a>\n<h2 id=\"the-non-null-assertion-operator---\" translation-result=\"on\">非空断言运算符（ <code>!</code> ）<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-non-null-assertion-operator---\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-non-null-assertion-operator---\">The non-null assertion operator ( <code>!</code> )<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-non-null-assertion-operator---\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 TypeScript 的 <code>--strictNullChecks</code> 标志时，可以防止类型检查器使用 Angular 的非空断言运算符 <code>!</code> 。</p><p translation-origin=\"off\">When you use TypeScript's <code>--strictNullChecks</code> flag, you can prevent the type checker from throwing an error with Angular's non-null assertion operator, <code>!</code>.</p>\n\n<p translation-result=\"on\">Angular 非空断言运算符使 TypeScript 类型检查器暂停对特定属性表达式的 <code>null</code> 和 <code>undefined</code> 的严格检查。</p><p translation-origin=\"off\">The Angular non-null assertion operator causes the TypeScript type checker to suspend strict <code>null</code> and <code>undefined</code> checks for a specific property expression.</p>\n\n<p translation-result=\"on\">例如，你可以断言 <code>item</code> 也是已定义的。</p><p translation-origin=\"off\">For example, you can assert that <code>item</code> properties are also defined.</p>\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"non-null\" header=\"src/app/app.component.html\">\n&#x3C;!-- Assert color is defined, even if according to the `Item` type it could be undefined. -->\n&#x3C;p>The item's color is: {{item.color!.toUpperCase()}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">通常，你要确保任何属性绑定都不为 <code>null</code> 或 <code>undefined</code> 。但是，在某些情况下，这种状态是可以接受的。对于这些情况，可以使用 Angular 的非空断言运算符来防止 TypeScript 报告某个属性为 <code>null</code> 或 <code>undefined</code>。</p><p translation-origin=\"off\">Often, you want to make sure that any property bindings aren't <code>null</code> or <code>undefined</code>.\nHowever, there are situations in which such states are acceptable.\nFor those situations, you can use Angular's non-null assertion operator to prevent TypeScript from reporting that a property is <code>null</code> or <code>undefined</code>.</p>\n\n<p translation-result=\"on\">非空断言运算符 <code>!</code> 是可选的，除非你要启用严格的空检查。</p><p translation-origin=\"off\">The non-null assertion operator, <code>!</code>, is optional unless you turn on strict null checks.</p>\n\n<p translation-result=\"on\">有关更多信息，请参见 TypeScript 的<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"TypeScript 中严格的 null 检查\">严格空检查</a>。</p><p translation-origin=\"off\">For more information, see TypeScript's <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"Strict null checking in TypeScript\">strict null checking</a>.</p>\n\n<a id=\"any-type-cast-function\"></a>\n<h2 id=\"the-any-type-cast-function\" translation-result=\"on\"><code>$any()</code> 类型转换函数<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-any-type-cast-function\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"the-any-type-cast-function\">The <code>$any()</code> type cast function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-any-type-cast-function\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">有时，绑定表达式会在 <a href=\"guide/aot-compiler\">AOT 编译</a>期间触发类型错误，并且不可能或很难完全指定类型。要使此错误静音，可以使用 <code>$any()</code> 强制转换函数把表达式强制转换为 <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> 类型</a>，如下例所示：</p><p translation-origin=\"off\">Sometimes a binding expression triggers a type error during <a href=\"guide/aot-compiler\">AOT compilation</a> and it is not possible or difficult to fully specify the type.\nTo silence the error, you can use the <code>$any()</code> cast function to cast\nthe expression to the <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> type</a> as in the following example:</p>\n\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-1\" header=\"src/app/app.component.html\">\n&#x3C;p>The item's undeclared best by date is: {{$any(item).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\">使用 <code>$any()</code> 可以防止 TypeScript 报告 <code>bestByDate</code> 不是 <code>item</code> 对象成员的错误。</p><p translation-origin=\"off\">Using <code>$any()</code> prevents TypeScript from reporting that <code>bestByDate</code> is not a member of the <code>item</code> object.</p>\n\n<p translation-result=\"on\"><code>$any()</code> 强制转换函数也可以与 <code>this</code> 一起使用，以允许访问组件的未声明成员。</p><p translation-origin=\"off\">The <code>$any()</code> cast function also works with <code>this</code> to allow access to undeclared members of the component.</p>\n\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-2\" header=\"src/app/app.component.html\">\n&#x3C;p>The item's undeclared best by date is: {{$any(this).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p translation-result=\"on\"><code>$any()</code> 强制转换函数可在绑定表达式中任何进行方法调用的地方使用。</p><p translation-origin=\"off\">The <code>$any()</code> cast function works anywhere in a binding expression where a method call is valid.</p>\n\n\n  \n</div>\n\n\n<!-- links to this doc:\n - guide/aot-compiler\n - guide/example-apps-list\n - guide/interpolation\n - guide/template-syntax\n - guide/template-typecheck\n-->\n<!-- links from this doc:\n - guide/aot-compiler\n - guide/hierarchical-dependency-injection\n - guide/template-expression-operators#template-expression-operators\n - guide/template-expression-operators#the-any-type-cast-function\n - guide/template-expression-operators#the-non-null-assertion-operator---\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/template-expression-operators.md?message=docs%3A%20请简述你的修改...\n - https://github.com/angular/angular/issues/new?template=3-docs-bug.md\n - https://www.typescriptlang.org/docs/handbook/basic-types.html#any\n-->"}