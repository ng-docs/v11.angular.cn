{
  "id": "guide/template-reference-variables",
  "title": "Template variables",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/template-reference-variables.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"template-variables\" translation-result=\"on\">模板变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-variables\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"template-variables\">Template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-variables\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">模板变量可以帮助你在模板的另一部分使用这个部分的数据。使用模板变量，你可以执行某些任务，比如响应用户输入或微调应用的表单。</p><p translation-origin=\"off\">Template variables help you use data from one part of a template in another part of the template.\nWith template variables, you can perform tasks such as respond to user input or finely tune your application's forms.</p>\n\n<p translation-result=\"on\">模板变量可以引用这些东西：</p><p translation-origin=\"off\">A template variable can refer to the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">模板中的 DOM 元素</p><p translation-origin=\"off\">a DOM element within a template</p>\n\n</li>\n<li>\n<p translation-result=\"on\">指令</p><p translation-origin=\"off\">a directive</p>\n\n</li>\n<li>\n<p translation-result=\"on\">元素</p><p translation-origin=\"off\">an element</p>\n\n</li>\n<li>\n<p><a href=\"api/core/TemplateRef\">TemplateRef</a></p>\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN：Web Components\">Web 组件</a></p><p translation-origin=\"off\">a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a></p>\n\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">本章包含代码片段的工作实例参阅<live-example></live-example>。</p><p translation-origin=\"off\">See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n\n</div>\n<h2 id=\"syntax\" translation-result=\"on\">语法<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#syntax\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"syntax\">Syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#syntax\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在模板中，要使用井号 <code>#</code> 来声明一个模板变量。下列模板变量 <code>#phone</code> 语法在 <code>&#x3C;input></code> 元素上声明了一个名为 <code>phone</code> 的变量</p><p translation-origin=\"off\">In the template, you use the hash symbol, <code>#</code>, to declare a template variable.\nThe following template variable, <code>#phone</code>, declares a <code>phone</code> variable on an <code>&#x3C;input></code> element.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n</code-example>\n<p translation-result=\"on\">你可以在组件模板中的任何地方引用某个模板变量。这里的 <code>&#x3C;button></code> 就引用了 <code>phone</code> 变量。</p><p translation-origin=\"off\">You can refer to a template variable anywhere in the component's template.\nHere, a <code>&#x3C;button></code> further down the template refers to the <code>phone</code> variable.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n&#x3C;!-- lots of other elements -->\n\n&#x3C;!-- phone refers to the input element; pass its `value` to an event handler -->\n&#x3C;button (click)=\"callPhone(phone.value)\">Call&#x3C;/button>\n\n</code-example>\n<h2 id=\"how-angular-assigns-values-to-template-variables\" translation-result=\"on\">Angular 是如何为模板变量赋值的<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#how-angular-assigns-values-to-template-variables\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"how-angular-assigns-values-to-template-variables\">How Angular assigns values to template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#how-angular-assigns-values-to-template-variables\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 根据你所声明的变量的位置给模板变量赋值：</p><p translation-origin=\"off\">Angular assigns a template variable a value based on where you declare the variable:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">如果在组件上声明变量，该变量就会引用该组件实例。</p><p translation-origin=\"off\">If you declare the variable on a component, the variable refers to the component instance.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果在标准的 HTML 标记上声明变量，该变量就会引用该元素。</p><p translation-origin=\"off\">If you declare the variable on a standard HTML tag, the variable refers to the element.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果你在 <code>&#x3C;ng-template></code> 元素上声明变量，该变量就会引用一个 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 实例来代表此模板。关于 <code>&#x3C;ng-template></code> 的更多信息，请参阅<a href=\"guide/structural-directives#asterisk\">结构型指令</a> 中的 <a href=\"guide/structural-directives#asterisk\">Angular 如何使用 <code>*</code> 语法</a>部分。</p><p translation-origin=\"off\">If you declare the variable on an <code>&#x3C;ng-template></code> element, the variable refers to a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> instance, which represents the template.\nFor more information on <code>&#x3C;ng-template></code>, see <a href=\"guide/structural-directives#asterisk\">How Angular uses the asterisk, <code>*</code>, syntax</a> in <a href=\"guide/structural-directives\">Structural directives</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">如果该变量在右侧指定了一个名字，比如 <code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code> ，那么该变量就会引用所在元素上具有这个 <code>exportAs</code> 名字的指令或组件。</p><p translation-origin=\"off\">If the variable specifies a name on the right-hand side, such as <code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>, the variable refers to the directive or component on the element with a matching <code>exportAs</code> name.</p>\n\n</li>\n</ul>\n<!-- What does the second half of this mean?^^ Can we explain this more fully? Could I see a working example? -kw -->\n<h3 id=\"using-ngform-with-template-variables\" translation-result=\"on\">将 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 与模板变量一起使用<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#using-ngform-with-template-variables\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"using-ngform-with-template-variables\">Using <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> with template variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#using-ngform-with-template-variables\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在大多数情况下，Angular 会把模板变量的值设置为它所在的元素。在前面的例子中， <code>phone</code> 引用的是电话号码 <code>&#x3C;input></code> 。该按钮的 click 处理程序会把这个 <code>&#x3C;input></code> 的值传给该组件的 <code>callPhone()</code> 方法。</p><p translation-origin=\"off\">In most cases, Angular sets the template variable's value to the element on which it occurs.\nIn the previous example, <code>phone</code> refers to the phone number <code>&#x3C;input></code>.\nThe button's click handler passes the <code>&#x3C;input></code> value to the component's <code>callPhone()</code> method.</p>\n\n<p translation-result=\"on\">这里的 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令演示了如何通过引用指令的的 <code>exportAs</code> 名字来引用不同的值。在下面的例子中，模板变量 <code>itemForm</code> 在 HTML 中分别出现了三次。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive demonstrates getting a reference to a different value by reference a directive's <code>exportAs</code> name.\nIn the following example, the template variable, <code>itemForm</code>, appears three times separated by HTML.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&#x3C;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\">\n  &#x3C;label for=\"name\">Name &#x3C;input class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required />\n  &#x3C;/label>\n  &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form>\n\n&#x3C;div [hidden]=\"!itemForm.form.valid\">\n  &#x3C;p>{{ submitMessage }}&#x3C;/p>\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\">如果没有 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> 这个属性值，<code>itemForm</code> 引用的值将是 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a> 也就是 <code>&#x3C;form></code> 元素。而 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 和 <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 之间的差异在于 Angular 在没有指定属性值的情况下，Angular 会引用 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>，而 <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 不会改变这种隐式引用（即它的宿主元素）。</p><p translation-origin=\"off\">Without the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> attribute value, the reference value of <code>itemForm</code> would be\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>, <code>&#x3C;form></code>.\nThere is, however, a difference between a <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> and a <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> in that Angular references a <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> without specifying the attribute value, and a <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> does not change the implicit reference, or the element.</p>\n\n<!-- What is the train of thought from talking about a form element to the difference between a component and a directive? Why is the component directive conversation relevant here?  -kw -->\n<p translation-result=\"on\">而使用了 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 之后，<code>itemForm</code> 就是对 <a href=\"api/forms/NgForm\" title=\"API：NgForm\">NgForm</a> 指令的引用，可以用它来跟踪表单中每一个控件的值和有效性。</p><p translation-origin=\"off\">With <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code>, <code>itemForm</code> is a reference to the <a href=\"api/forms/NgForm\" title=\"API: NgForm\">NgForm</a> directive with the ability to track the value and validity of every control in the form.</p>\n\n<p translation-result=\"on\">与原生的 <code>&#x3C;form></code> 元素不同， <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 指令有一个 <code>form</code> 属性。如果 <code>itemForm.form.valid</code> 无效，那么 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 的 <code>form</code> 属性就会让你禁用提交按钮。</p><p translation-origin=\"off\">Unlike the native <code>&#x3C;form></code> element, the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive has a <code>form</code> property.\nThe <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> <code>form</code> property allows you to disable the submit button if the <code>itemForm.form.valid</code> is invalid.</p>\n\n<h2 id=\"template-variable-scope\" translation-result=\"on\">模板变量的作用域<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-variable-scope\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-variable-scope\">Template variable scope<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-variable-scope\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">你可以在包含此模板变量的模板中的任何地方引用它。而 <a href=\"guide/built-in-directives\">结构型指令</a>（如 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 和 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 或 <code>&#x3C;ng-template></code> 同样充当了模板的边界。你不能在这些边界之外访问其中的模板变量。</p><p translation-origin=\"off\">You can refer to a template variable anywhere within its surrounding template.\n<a href=\"guide/built-in-directives\">Structural directives</a>, such as <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>, or <code>&#x3C;ng-template></code> act as a template boundary.\nYou cannot access template variables outside of these boundaries.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">同名变量在模板中只能定义一次，这样运行时它的值就是可预测的。</p><p translation-origin=\"off\">Define a variable only once in the template so the runtime value remains predictable.</p>\n\n</div>\n<h3 id=\"accessing-in-a-nested-template\" translation-result=\"on\">在嵌套模板中访问<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#accessing-in-a-nested-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"accessing-in-a-nested-template\">Accessing in a nested template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#accessing-in-a-nested-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">内部模板可以访问外模板定义的模板变量。</p><p translation-origin=\"off\">An inner template can access template variables that the outer template defines.</p>\n\n<p translation-result=\"on\">在下面的例子中，修改 <code>&#x3C;input></code> 中的文本值也会改变 <code>&#x3C;span></code> 中的值，因为 Angular 会立即通过模板变量 <code>ref1</code> 来更新这种变化。</p><p translation-origin=\"off\">In the following example, changing the text in the <code>&#x3C;input></code> changes the value in the <code>&#x3C;span></code> because Angular immediately updates changes through the template variable, <code>ref1</code>.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"template-ref-vars-scope1\" header=\"src/app/app.component.html\">\n&#x3C;input #ref1 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"firstExample\" />\n&#x3C;span *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\">Value: {{ ref1.value }}&#x3C;/span>\n\n</code-example>\n<p translation-result=\"on\">在这种情况下，有一个包含这个 <code>&#x3C;span></code> 的隐式 <code>&#x3C;ng-template></code>，而该变量的定义在该隐式模板之外。访问父模板中的模板变量是可行的，因为子模板会从父模板继承上下文。</p><p translation-origin=\"off\">In this case, there is an implied <code>&#x3C;ng-template></code> around the <code>&#x3C;span></code> and the definition of the variable is outside of it.\nAccessing a template variable from the parent template works because the child template inherits the context from the parent template.</p>\n\n<p translation-result=\"on\">我们用更啰嗦的形式重写上述的代码，可以明确地显示出 <code>&#x3C;ng-template></code>。</p><p translation-origin=\"off\">Rewriting the above code in a more verbose form explicitly shows the <code>&#x3C;ng-template></code>.</p>\n\n<code-example language=\"html\">\n&#x3C;input #ref1 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"firstExample\" />\n\n&#x3C;!-- New template -->\n&#x3C;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"true\">\n  &#x3C;!-- Since the context is inherited, the value is available to the new template -->\n  &#x3C;span>Value: {{ ref1.value }}&#x3C;/span>\n&#x3C;/ng-template>\n</code-example>\n<p translation-result=\"on\">但是，从外部的父模板访问本模板中的变量是行不通的。</p><p translation-origin=\"off\">However, accessing a template variable from outside the parent template doesn't work.</p>\n\n<code-example language=\"html\">\n  &#x3C;input *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"true\" #ref2 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"secondExample\" />\n  &#x3C;span>Value: {{ ref2?.value }}&#x3C;/span> &#x3C;!-- doesn't work -->\n</code-example>\n<p translation-result=\"on\">这个更啰嗦的形式表明 <code>ref2</code> 位于外部的父模板中。</p><p translation-origin=\"off\">The verbose form shows that <code>ref2</code> is outside the parent template.</p>\n\n<code-example>\n&#x3C;ng-template [<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>]=\"true\">\n  &#x3C;!-- The reference is defined within a template -->\n  &#x3C;input #ref2 type=\"text\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"secondExample\" />\n&#x3C;/ng-template>\n&#x3C;!-- ref2 accessed from outside that template doesn't work -->\n&#x3C;span>Value: {{ ref2?.value }}&#x3C;/span>\n</code-example>\n<p translation-result=\"on\">考虑下面这个带 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的使用范例。</p><p translation-origin=\"off\">Consider the following example that uses <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>.</p>\n\n<code-example>\n&#x3C;ng-container *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let i of [1,2]\">\n  &#x3C;input #ref type=\"text\" [value]=\"i\" />\n&#x3C;/ng-container>\n{{ ref.value }}\n</code-example>\n<p translation-result=\"on\">这里，<code>ref.value</code> 不起作用。结构型指令 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 将模板实例化了两次，因为 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 在对数组中的两个条目进行迭代。因此不可能定义出 <code>ref.value</code> 指向的是谁。</p><p translation-origin=\"off\">Here, <code>ref.value</code> doesn't work.\nThe structural directive, <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> instantiates the template twice because <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> iterates over the two items in the array.\nIt is impossible to define what the <code>ref.value</code> reference signifies.</p>\n\n<p translation-result=\"on\">对于结构型指令，比如 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 或 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> ，Angular 也无法知道模板是否曾被实例化过。</p><p translation-origin=\"off\">With structural directives, such as <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> or <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>, there is no way for Angular to know if a template is ever instantiated.</p>\n\n<p translation-result=\"on\">结果，Angular 无法访问该值并返回错误。</p><p translation-origin=\"off\">As a result, Angular isn't able to access the value and returns an error.</p>\n\n<h3 id=\"accessing-a-template-variable-within-ng-template\" translation-result=\"on\">访问 <code>&#x3C;ng-template></code> 的模板变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#accessing-a-template-variable-within-ng-template\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"accessing-a-template-variable-within-ng-template\">Accessing a template variable within <code>&#x3C;ng-template></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#accessing-a-template-variable-within-ng-template\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">在 <code>&#x3C;ng-template></code> 上声明变量时，该变量会引用一个 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 实例来表示该模板。</p><p translation-origin=\"off\">When you declare the variable on an <code>&#x3C;ng-template></code>, the variable refers to a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> instance, which represents the template.</p>\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"template-ref\" header=\"src/app/app.component.html\">\n&#x3C;ng-template #ref3>&#x3C;/ng-template>\n&#x3C;button (click)=\"log(ref3)\">Log type of #ref&#x3C;/button>\n\n</code-example>\n<p translation-result=\"on\">在这个例子中，单击该按钮会调用 <code>log()</code> 函数，它把 <code>#ref3</code> 的值输出到控制台。因为 <code>#ref</code> 变量在 <code>&#x3C;ng-template></code> 上，所以它的值是一个 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>。</p><p translation-origin=\"off\">In this example, clicking the button calls the <code>log()</code> function, which outputs the value of <code>#ref3</code> to the console.\nBecause the <code>#ref</code> variable is on an <code>&#x3C;ng-template></code>, the value is <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>.</p>\n\n<p translation-result=\"on\">下面是一个名为 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 的 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>()</code> 函数在浏览器控制台中展开时的输出。</p><p translation-origin=\"off\">The following is the expanded browser console output of the <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a>()</code> function with the name of <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code>.</p>\n\n<code-example language=\"sh\">\n\n▼ ƒ TemplateRef()\nname: \"TemplateRef\"\n__proto__: Function\n\n</code-example>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h2 id=\"template-input-variable\" translation-result=\"on\">模板输入变量<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-input-variable\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"template-input-variable\">Template input variable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-input-variable\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><em>模板输入变量</em>是可以在模板的单个实例中引用的变量。你可以用 <code>let</code> 关键字声明模板输入变量，比如 <code>let hero</code>。</p><p translation-origin=\"off\">A <em>template input variable</em> is a variable you can reference within a single instance of the template.\nYou declare a template input variable using the <code>let</code> keyword as in <code>let hero</code>.</p>\n\n<p translation-result=\"on\">在这个例子中，有几个这样的变量：<code>hero</code>、<code>i</code> 和 <code>odd</code>。</p><p translation-origin=\"off\">There are several such variables in this example: <code>hero</code>, <code>i</code>, and <code>odd</code>.</p>\n\n<p translation-result=\"on\">此变量的范围仅限于可复写模板中的单个实例。你可以在其他结构型指令的定义中再次使用相同的变量名。</p><p translation-origin=\"off\">The variable's scope is limited to a single instance of the repeated template.\nYou can use the same variable name again in the definition of other structural directives.</p>\n\n<p translation-result=\"on\">相反，你可以通过在变量名称前加上 <code>#</code> 来声明模板变量，如 <code>#var</code>。模板变量引用其附加的元素、组件或指令。</p><p translation-origin=\"off\">In contrast, you declare a template variable by prefixing the variable name with <code>#</code>, as in <code>#var</code>.\nA template variable refers to its attached element, component, or directive.</p>\n\n<p translation-result=\"on\">模板输入变量和模板变量名称具有各自的名称空间。<code>let hero</code> 中的模板输入变量 <code>hero</code> 和 <code>#hero</code> 中的模板变量 <code>hero</code> 是不同的。</p><p translation-origin=\"off\">Template input variables and template variables names have their own namespaces.\nThe template input variable <code>hero</code> in <code>let hero</code> is distinct from the template variable <code>hero</code> in <code>#hero</code>.</p>\n\n\n  \n</div>\n\n\n<!-- links to this doc:\n - api/common/NgForOf\n - guide/example-apps-list\n - guide/forms\n - guide/glossary\n - guide/inputs-outputs\n - guide/interpolation\n - guide/template-statements\n - guide/template-syntax\n - guide/user-input\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/Directive\n - api/core/TemplateRef\n - api/forms/NgForm\n - api/forms/NgModel\n - guide/built-in-directives\n - guide/structural-directives\n - guide/structural-directives#asterisk\n - guide/template-reference-variables#accessing-a-template-variable-within-ng-template\n - guide/template-reference-variables#accessing-in-a-nested-template\n - guide/template-reference-variables#how-angular-assigns-values-to-template-variables\n - guide/template-reference-variables#syntax\n - guide/template-reference-variables#template-input-variable\n - guide/template-reference-variables#template-variable-scope\n - guide/template-reference-variables#template-variables\n - guide/template-reference-variables#using-ngform-with-template-variables\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/template-reference-variables.md?message=docs%3A%20请简述你的修改...\n-->"
}