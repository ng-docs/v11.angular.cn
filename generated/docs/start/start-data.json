{
  "id": "start/start-data",
  "title": "Managing data",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/start/start-data.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"managing-data\" translation-result=\"on\">管理数据<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#managing-data\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"managing-data\">Managing data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#managing-data\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">本章基于<a href=\"start\">以一个基本 Anguluar 应用快速上手</a>的第二步 —— <a href=\"start/start-routing\" title=\"Adding navigation\">添加导航</a>。\n在此开发阶段，本商店应用具有一个包含两个视图的商品名录：商品列表和商品详情。用户点击清单中的某个商品名称，就会在新视图中看到具有专门的 URL 或路由的详情页。</p><p translation-origin=\"off\">This guide builds on the second step of the <a href=\"start\">Getting started with a basic Angular application</a> tutorial, <a href=\"start/start-routing\" title=\"Adding navigation\">Adding navigation</a>.\nAt this stage of development, the store application has a product catalog with two views: a product list and product details.\nUsers can click on a product name from the list to see details in a new view, with a distinct URL, or route.</p>\n\n<p translation-result=\"on\">本页将指导你分三个步骤创建购物车：</p><p translation-origin=\"off\">This step of the tutorial guides you through creating a shopping cart in the following phases:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">修改商品详情视图，让它包含一个 “Buy” 按钮，它会把当前商品添加到由 \"购物车服务\" 管理的商品列表中。</p><p translation-origin=\"off\">Update the product details view to include a <strong>Buy</strong> button, which adds the current product to a list of products that a cart service manages.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">添加一个购物车组件，它会显示购物车中的商品。</p><p translation-origin=\"off\">Add a cart component, which displays the items in the cart.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">添加一个配送组件，它会使用 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 从 <code>.json</code> 文件中检索配送数据来取得购物车中这些商品的运费。</p><p translation-origin=\"off\">Add a shipping component, which retrieves shipping prices for the items in the cart by using Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to retrieve shipping data from a <code>.json</code> file.</p>\n\n</li>\n</ul>\n<a id=\"create-cart-service\"></a>\n<h2 id=\"create-the-shopping-cart-service\" translation-result=\"on\">创建购物车服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-shopping-cart-service\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-the-shopping-cart-service\">Create the shopping cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-shopping-cart-service\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在 Angular 中, 服务是类的一个实例, 借助 Angular 的<a href=\"guide/glossary#dependency-injection-di\" title=\"Dependency injection definition\">依赖注入体系</a>，你可以在应用中的任意部分使用它。</p><p translation-origin=\"off\">In Angular, a service is an instance of a class that you can make available to any part of your application using Angular's <a href=\"guide/glossary#dependency-injection-di\" title=\"Dependency injection definition\">dependency injection system</a>.</p>\n\n<p translation-result=\"on\"> 现在, 用户可以浏览产品信息，而应用可以模拟分享产品，以及发出产品变更通知。</p><p translation-origin=\"off\">Currently, users can view product information, and the application can simulate sharing and  notifications about product changes.</p>\n\n<p translation-result=\"on\">下一步是为用户提供一种把产品添加到购物车中的方法。\n本章节将带领你添加一个 <strong>Buy</strong> 按钮并且建立一个购物车服务以保存购物车中的产品信息。</p><p translation-origin=\"off\">The next step is to build a way for users to add products to a cart.\nThis section walks you through adding a <strong>Buy</strong> button and setting up a cart service to store information about products in the cart.</p>\n\n<a id=\"generate-cart-service\"></a>\n<h3 id=\"define-a-cart-service\" translation-result=\"on\">定义购物车服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#define-a-cart-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"define-a-cart-service\">Define a cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#define-a-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\"> 要想生成购物车服务，请右键单击 <code>app</code> 文件夹，选择 <code>Angular Generator</code>，并选择 <code>Service</code>。把这个新服务命名为 <code>cart</code>。</p><p translation-origin=\"off\">To generate a cart service, right click on the <code>app</code> folder, choose <strong>Angular Generator</strong>, and choose <strong>Service</strong>.\nName the new service <code>cart</code>.</p>\n\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.1.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  constructor() {}\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>CartService</code> 类中，定义一个 <code>items</code> 属性来把当前商品的数组存储在购物车中。</p><p translation-origin=\"off\">In the <code>CartService</code> class, define an <code>items</code> property to store the array of the current products in the cart.</p>\n\n<code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"props\">\nexport class CartService {\n  items = [];\n}\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">定义把商品添加到购物车、返回购物车商品以及清除购物车商品的方法：</p><p translation-origin=\"off\">Define methods to add items to the cart, return cart items, and clear the cart items.</p>\n\n<code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"methods\">\nexport class CartService {\n  items = [];\n\n  addToCart(product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n}\n\n</code-example>\n</li>\n</ol>\n<ul>\n<li>\n<p translation-result=\"on\">   <code>addToCart()</code> 方法会将产品附加到 <code>items</code> 数组中。</p><p translation-origin=\"off\">The <code>addToCart()</code> method appends a product to an array of <code>items</code>. </p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><code>getItems()</code> 方法会收集用户加到购物车中的商品，并返回每个商品及其数量。</p><p translation-origin=\"off\">The <code>getItems()</code> method collects the items users add to the cart and returns each item with its associated quantity.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><code>clearCart()</code> 方法返回一个空数组。</p><p translation-origin=\"off\">The <code>clearCart()</code> method returns an empty array of items, which empties the cart. </p>\n\n</li>\n</ul>\n</li>\n</ul>\n<a id=\"product-details-use-cart-service\"></a>\n<h3 id=\"use-the-cart-service\" translation-result=\"on\">使用购物车服务<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#use-the-cart-service\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"use-the-cart-service\">Use the cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#use-the-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">本节会教你使用 <code>CartService</code> 来把一个商品添加到购物车中。</p><p translation-origin=\"off\">This section walks you through using the <code>CartService</code> to add a product to the cart.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>product-details.component.ts</code> 中导入购物车服务。</p><p translation-origin=\"off\">In <code>product-details.component.ts</code>, import the cart service.</p>\n\n   <code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"cart-service\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { products } from '../products';\nimport { CartService } from '../cart.service';\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">通过把购物车服务注入到这里的 <code>constructor()</code> 中来注入它。</p><p translation-origin=\"off\">Inject the cart service by adding it to the <code>constructor()</code>.</p>\n\n<code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" header=\"src/app/product-details/product-details.component.ts\" region=\"inject-cart-service\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">定义 <code>addToCart()</code> 方法，该方法会当前商品添加到购物车中。</p><p translation-origin=\"off\">Define the <code>addToCart()</code> method, which adds the current product to the cart.</p>\n\n<p> <code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" header=\"src/app/product-details/product-details.component.ts\" region=\"add-to-cart\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  addToCart(product) {\n    this.cartService.addToCart(product);\n    window.alert('Your product has been added to the cart!');\n  }\n}\n\n\n</code-example></p>\n<p translation-result=\"on\"> <code>addToCart()</code> 方法做了如下事情:</p><p translation-origin=\"off\"> The <code>addToCart()</code> method does the following:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">以当前'product'作为参数。</p><p translation-origin=\"off\">Takes the current <code>product</code> as an argument.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">使用 <code>CartService</code> <code>addToCart()</code> 方法去添加产品到购物车中。</p><p translation-origin=\"off\">Uses the <code>CartService</code> <code>addToCart()</code> method to add the product to the cart.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">显示一条你已经添加了一个产品到购物车到消息。</p><p translation-origin=\"off\">Displays a message that you've added a product to the cart.</p>\n\n</li>\n</ul>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>product-details.component.html</code> 中，添加一个带有 <strong>Buy</strong> 标签的按钮，并且把其 <code>click()</code> 事件绑定到  <code>addToCart()</code> 方法上。\n这段代码会为产品详情模板添加一个 <strong>Buy</strong> 按钮，并把当前产品添加到购物车中。</p><p translation-origin=\"off\">In <code>product-details.component.html</code>, add a button with the label <strong>Buy</strong>, and bind the <code>click()</code> event to the <code>addToCart()</code> method.\nThis code updates the product details template with a <strong>Buy</strong> button that adds the current product to the cart.</p>\n\n   <code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\">\n&#x3C;h2>Product Details&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product\">\n  &#x3C;h3>{{ product.name }}&#x3C;/h3>\n  &#x3C;h4>{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/h4>\n  &#x3C;p>{{ product.description }}&#x3C;/p>\n\n  &#x3C;button (click)=\"addToCart(product)\">Buy&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n \n \n</li>\n</ol>\n<ol>\n<li>\n<p translation-result=\"on\">刷新应用，以验证新的 <strong>Buy</strong> 按钮如预期般出现了，并且单击某个产品的名称，以展示其详情。</p><p translation-origin=\"off\">Verify that the new <strong>Buy</strong> button appears as expected by refreshing the application and clicking on a product's name to display its details.</p>\n\n <div class=\"lightbox\">\n   <img src=\"generated/images/guide/start/product-details-buy.png\" alt=\"Display details for selected product with a Buy button\" width=\"259\" height=\"233\">\n </div>\n</li>\n<li>\n<p translation-result=\"on\">点击“Buy”按钮来把该商品添加到购物车中存储的商品列表中，并显示一条确认消息。</p><p translation-origin=\"off\">Click the <strong>Buy</strong> button to add the product to the stored list of items in the cart and display a confirmation message.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/buy-alert.png\" alt=\"Display details for selected product with a Buy button\" width=\"329\" height=\"106\">\n</div>\n</li>\n</ol>\n<h2 id=\"create-the-cart-view\" translation-result=\"on\">创建购物车视图<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-cart-view\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-the-cart-view\">Create the cart view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-cart-view\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">为了让顾客看到他们的购物车，你可以用两步创建购物车视图：</p><p translation-origin=\"off\">For customers to see their cart, you can create the cart view in two steps:</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">创建一个购物车组件并配置指向这个新组件的路由。</p><p translation-origin=\"off\">Create a cart component and configure routing to the new component.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">显示购物车商品</p><p translation-origin=\"off\">Display the cart items.</p>\n\n</li>\n</ol>\n<h3 id=\"set-up-the-cart-component\" translation-result=\"on\">设置该组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#set-up-the-cart-component\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"set-up-the-cart-component\">Set up the cart component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#set-up-the-cart-component\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\"> 要创建购物车视图，可遵循与创建  <code>ProductDetailsComponent</code> 相同的步骤，并且为这个新组件配置路由。</p><p translation-origin=\"off\"> To create the cart view, follow the same steps you did to create the <code>ProductDetailsComponent</code> and configure routing for the new component.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">右键单击 <code>app</code> 文件夹，选择 <strong>Angular Generator</strong> 和 <strong>Component</strong> 以生成一个名为 <code>cart</code> 的购物车组件。</p><p translation-origin=\"off\">Generate a cart component named <code>cart</code> by right-clicking the <code>app</code> folder, choosing <strong>Angular Generator</strong>, and <strong>Component</strong>.</p>\n\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})\nexport class CartComponent {\n\n  constructor() { }\n\n}\n\n\n</code-example>\n<p translation-result=\"on\"> StackBlitz 默认还会在组件中生成一个 <code>ngOnInit()</code>。不过在本教程中，你可以忽略 <code>CartComponent</code> 的 <code>ngOnInit()</code>。</p><p translation-origin=\"off\"> StackBlitz also generates an <code>ngOnInit()</code> by default in components.  You can ignore the <code>CartComponent</code> <code>ngOnInit()</code> for this tutorial.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">打开 <code>app.module.ts</code>，为组件 <code>CartComponent</code> 添加一个路由，其路由为 <code>cart</code> ：</p><p translation-origin=\"off\">Open <code>app.module.ts</code> and add a route for the component <code>CartComponent</code>, with a <code>path</code> of <code>cart</code>.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"cart-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">修改 \"Checkout\" 按钮，以便让它路由到 <code>/cart</code>。\n在 <code>top-bar.component.html</code> 中添加一个指向 <code>/cart</code> 的 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 指令。</p><p translation-origin=\"off\">Update the <strong>Checkout</strong> button so that it routes to the <code>/cart</code> URL.\nIn <code>top-bar.component.html</code>, add a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directive pointing to <code>/cart</code>.</p>\n\n <code-example header=\"src/app/top-bar/top-bar.component.html\" path=\"getting-started/src/app/top-bar/top-bar.component.html\" region=\"cart-route\">\n&#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/cart\" class=\"button fancy-button\">\n  &#x3C;i class=\"material-icons\">shopping_cart&#x3C;/i>Checkout\n&#x3C;/a>\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">要查看新的购物车组件，请点击“Checkout”按钮。你会看到默认文本“cart works!”，该 URL 的格式为 <code>https://getting-started.stackblitz.io/cart</code>，其中的 getting-started.stackblitz.io 部分可能与你的 StackBlitz 项目不同。</p><p translation-origin=\"off\">Verify the new <code>CartComponent</code> works as expected by clicking the <strong>Checkout</strong> button.\nYou can see the \"cart works!\" default text, and the URL has the pattern <code>https://getting-started.stackblitz.io/cart</code>, where <code>getting-started.stackblitz.io</code> may be different for your StackBlitz project.</p>\n\n <div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/cart-works.png\" alt=\"Display cart view before customizing\" width=\"259\" height=\"193\">\n</div>\n</li>\n</ol>\n<h3 id=\"display-the-cart-items\" translation-result=\"on\">显示购物车商品<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#display-the-cart-items\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"display-the-cart-items\">Display the cart items<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#display-the-cart-items\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">  本节将告诉你如何修改购物车组件以使用购物车服务来显示购物车中的商品。</p><p translation-origin=\"off\">This section shows you how to use the cart service to display the products in the cart.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>cart.component.ts</code> 中，从 <code>cart.service.ts</code> 文件中导入 <code>CartService</code>。</p><p translation-origin=\"off\">In <code>cart.component.ts</code>, import the <code>CartService</code> from the <code>cart.service.ts</code> file.</p>\n\n   <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CartService } from '../cart.service';\n\n</code-example>\n<ol>\n<li>\n<p translation-result=\"on\">注入 <code>CartService</code>，以便购物车组件可以使用它。</p><p translation-origin=\"off\">Inject the <code>CartService</code> so that the <code>CartComponent</code> can use it by adding it to the <code>constructor()</code>.</p>\n\n<code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" header=\"src/app/cart/cart.component.ts\" region=\"inject-cart\">\nexport class CartComponent {\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">定义 <code>items</code> 属性，以便把商品存放在购物车中。</p><p translation-origin=\"off\">Define the <code>items</code> property to store the products in the cart.</p>\n\n<code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" header=\"src/app/cart/cart.component.ts\" region=\"items\">\nexport class CartComponent {\n  items = this.cartService.getItems();\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n<p translation-result=\"on\"> 这段代码使用 <code>CartService</code> 的 <code>getItems()</code> 方法来设置条目。你以前在<a href=\"start/start-data#generate-cart-service\">创建 <code>cart.service.ts</code></a> 时定义过此方法。</p><p translation-origin=\"off\"> This code sets the items using the <code>CartService</code> <code>getItems()</code> method.\nYou defined this method <a href=\"start/start-data#generate-cart-service\">when you created <code>cart.service.ts</code></a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">修改模板，加上标题，用带有 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 的 <code>&#x3C;div></code> 来显示每个购物车商品的名字和价格。</p><p translation-origin=\"off\">Update the cart template with a header, and use a <code>&#x3C;div></code> with an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> to display each of the cart items with its name and price.</p>\n\n<p translation-result=\"on\">生成的 <code>CartComponent</code> 模板如下：</p><p translation-origin=\"off\">The resulting <code>CartComponent</code> template is as follows.</p>\n\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\" region=\"prices\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">\n  &#x3C;span>{{ item.name }}&#x3C;/span>\n  &#x3C;span>{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">验证你的购物车如预期般工作：</p><p translation-origin=\"off\">Verify that your cart works as expected:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">点击 <strong>My Store</strong></p><p translation-origin=\"off\">Click <strong>My Store</strong></p>\n\n</li>\n<li>\n<p translation-result=\"on\">单击商品名称以显示其详细信息。</p><p translation-origin=\"off\">Click on a product name to display its details.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">点击<strong>Buy</strong> 将商品添加到购物车。</p><p translation-origin=\"off\">Click <strong>Buy</strong> to add the product to the cart.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">  点击<strong>Checkout</strong>查看购物车。</p><p translation-origin=\"off\">Click <strong>Checkout</strong> to see the cart.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/cart-page-full.png\" alt=\"Cart view with products added\" width=\"259\" height=\"238\">\n</div>\n</li>\n</ul>\n</li>\n</ol>\n<p translation-result=\"on\">要了解关于服务的更多信息，请参阅<a href=\"guide/architecture-services\" title=\"概念>服务简介和 DI\">“服务和依赖注入简介”</a>。</p><p translation-origin=\"off\">For more information about services, see <a href=\"guide/architecture-services\" title=\"Concepts > Intro to Services and DI\">Introduction to Services and Dependency Injection</a>.</p>\n\n<h2 id=\"retrieve-shipping-prices\" translation-result=\"on\">检索运费价格<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#retrieve-shipping-prices\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"retrieve-shipping-prices\">Retrieve shipping prices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#retrieve-shipping-prices\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">服务器通常采用流的形式返回数据。\n流是很有用的，因为它们可以很容易地转换返回的数据，也可以修改你请求数据的方式。\nAngular 的 HTTP 客户端（ <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> ）是一种内置的方式，可以从外部 API 中获取数据，并以流的形式提供给你的应用。</p><p translation-origin=\"off\">Servers often return data in the form of a stream.\nStreams are useful because they make it easy to transform the returned data and make modifications to the way you request that data.\nAngular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is a built-in way to fetch data from external APIs and provide them to your application as a stream.</p>\n\n<p translation-result=\"on\">本节会为你展示如何使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 从外部文件中检索运费。</p><p translation-origin=\"off\">This section shows you how to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to retrieve shipping prices from an external file.</p>\n\n<p translation-result=\"on\">在本指南的 StackBlitz 应用中，通过 <code>assets/shipping.json</code> 文件提供了一些预定义的配送数据。你可以利用这些数据为购物车中的商品添加运费。</p><p translation-origin=\"off\">The application that StackBlitz generates for this guide comes with predefined shipping data in <code>assets/shipping.json</code>.\nUse this data to add shipping prices for items in the cart.</p>\n\n<code-example header=\"src/assets/shipping.json\" path=\"getting-started/src/assets/shipping.json\">\n[\n  {\n    \"type\": \"Overnight\",\n    \"price\": 25.99\n  },\n  {\n    \"type\": \"2-Day\",\n    \"price\": 9.99\n  },\n  {\n    \"type\": \"Postal\",\n    \"price\": 2.99\n  }\n]\n\n</code-example>\n<h3 id=\"configure-appmodule-to-use-httpclient\" translation-result=\"on\">配置 <code>AppModule</code> 以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-appmodule-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configure-appmodule-to-use-httpclient\">Configure <code>AppModule</code> to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-appmodule-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要使用 Angular 的 HTTP 客户端之前，你必须先配置你的应用来使用 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>。</p><p translation-origin=\"off\">To use Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you must configure your application to use <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>.</p>\n\n<p translation-result=\"on\">Angular 的 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 中注册了在整个应用中使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务的单个实例所需的服务提供者。</p><p translation-origin=\"off\">Angular's <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> registers the providers your application needs to use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service throughout your application.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>app.module.ts</code> 的顶部从 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 包中导入 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 以及其它导入项。\n由于有很多其它导入项，因此这里的代码片段省略它们，以保持简洁。请确保现有的导入都还在原地。</p><p translation-origin=\"off\">In <code>app.module.ts</code>, import <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> from the <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package at the top of the file with the other imports.\nAs there are a number of other imports, this code snippet omits them for brevity.\nBe sure to leave the existing imports in place.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module-import\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> 添加到 <code>AppModule</code> <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> 的 <code>imports</code> 数组中，以便全局注册 Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p><p translation-origin=\"off\">To register Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> providers globally, add <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> to the <code>AppModule</code> <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <code>imports</code> array.</p>\n\n <code-example path=\"getting-started/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"http-client-module\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"configure-cartservice-to-use-httpclient\" translation-result=\"on\">配置 <code>CartService</code> 以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configure-cartservice-to-use-httpclient\">Configure <code>CartService</code> to use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-use-httpclient\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">下一步是注入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 服务到你的服务中, 这样你的应用可以获取数据并且与外部API和资源互动。</p><p translation-origin=\"off\">The next step is to inject the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service into your service so your application can fetch data and interact with external APIs and resources.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">从 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 包中导入 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>。</p><p translation-origin=\"off\">In <code>cart.service.ts</code>, import <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> from the <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package.</p>\n\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"import-http\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">把 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 注入到 <code>CartService</code> 的构造函数中：</p><p translation-origin=\"off\">Inject <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> into the <code>CartService</code> <code>constructor()</code>.</p>\n\n<code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"inject-http\">\nexport class CartService {\n  items = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n}\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"configure-cartservice-to-get-shipping-prices\" translation-result=\"on\">配置 <code>CartService</code> 以得到商品价格<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-get-shipping-prices\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configure-cartservice-to-get-shipping-prices\">Configure <code>CartService</code> to get shipping prices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configure-cartservice-to-get-shipping-prices\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">要从 <code>shapping.json</code> 中得到商品数据, 你可以使用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <code>get()</code> 方法。</p><p translation-origin=\"off\">To get shipping data, from <code>shipping.json</code>, You can use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <code>get()</code> method.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>cart.service.ts</code> 中 <code>clearCart()</code> 方法下面，定义一个新的 <code>getShippingPrices()</code> 方法，该方法会调用 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>#get()</code> 方法。</p><p translation-origin=\"off\">In <code>cart.service.ts</code>, below the <code>clearCart()</code> method, define a new <code>getShippingPrices()</code> method that uses the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <code>get()</code> method.</p>\n\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"get-shipping\">\nexport class CartService {\n  getShippingPrices() {\n    return this.http.get&#x3C;{type: string, price: number}[]>('/assets/shipping.json');\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n<p translation-result=\"on\">要了解关于 Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 的更多信息，请参阅<a href=\"guide/http\" title=\"HttpClient 指南\">客户端-服务器集成</a>指南。</p><p translation-origin=\"off\">For more information about Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, see the <a href=\"guide/http\" title=\"Server interaction through HTTP\">Client-Server Interaction</a> guide.</p>\n\n<h2 id=\"create-a-shipping-component\" translation-result=\"on\">创建配送组件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-a-shipping-component\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"create-a-shipping-component\">Create a shipping component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-a-shipping-component\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">现在你的应用已经可以检索配送数据了，你还要创建一个配送组件和相关的模板。</p><p translation-origin=\"off\">Now that you've configured your application to retrieve shipping data, you can create a place to render that data.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">右键单击 <code>app</code> 文件夹，选择 <strong>Angular Generator</strong> 和 <strong>Component</strong> 来生成一个名为 <code>shipping</code> 的新组件。</p><p translation-origin=\"off\">Generate a new component named <code>shipping</code> by right-clicking the <code>app</code> folder, choosing <strong>Angular Generator</strong>, and selecting <strong>Component</strong>.</p>\n\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-shipping',\n  templateUrl: './shipping.component.html',\n  styleUrls: ['./shipping.component.css']\n})\nexport class ShippingComponent {\n\n  constructor() { }\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">在 <code>app.module.ts</code> 中，添加一个配送路由。其 <code>path</code> 为 <code>shipping</code>，其 component 为 <code>ShippingComponent</code>。</p><p translation-origin=\"off\">In <code>app.module.ts</code>, add a route for shipping.\nSpecify a <code>path</code> of <code>shipping</code> and a component of <code>ShippingComponent</code>.</p>\n\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"shipping-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n      { path: 'shipping', component: ShippingComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n    ShippingComponent\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p translation-result=\"on\">新的配送组件尚未链接到任何其它组件，但你可以通过输入其路由指定的 URL 在预览窗格中看到它的模板。该 URL 具有以下模式：<code>https://getting-started.stackblitz.io/shipping</code>，其中的 gets-started.stackblitz.io 部分可能与你的 StackBlitz 项目不同。</p><p translation-origin=\"off\">There's no link to the new shipping component yet, but you can see its template in the preview pane by entering the URL its route specifies.\nThe URL has the pattern: <code>https://getting-started.stackblitz.io/shipping</code> where the <code>getting-started.stackblitz.io</code> part may be different for your StackBlitz project.</p>\n\n</li>\n</ol>\n<h3 id=\"configuring-the-shippingcomponent-to-use-cartservice\" translation-result=\"on\">配置 <code>ShippingComponent</code> 以使用 <code>CartService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configuring-the-shippingcomponent-to-use-cartservice\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configuring-the-shippingcomponent-to-use-cartservice\">Configuring the <code>ShippingComponent</code> to use <code>CartService</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#configuring-the-shippingcomponent-to-use-cartservice\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">这个章节将指导你修改 <code>ShappingComponent</code> 以通过HTTP从 <code>shipping.json</code> 文件中提取商品数据。</p><p translation-origin=\"off\">This section guides you through modifying the <code>ShippingComponent</code> to retrieve shipping data via HTTP from the <code>shipping.json</code> file.</p>\n\n<ol>\n<li>\n<p translation-result=\"on\">在 <code>shipping.component.ts</code> 中导入 <code>CartService</code>。</p><p translation-origin=\"off\">In <code>shipping.component.ts</code>, import <code>CartService</code>.</p>\n\n<p>   <code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { CartService } from '../cart.service';\n\n</code-example></p>\n</li>\n<li>\n<p translation-result=\"on\">把购物车服务注入到 <code>ShippingComponent</code> 的 <code>constructor()</code> 构造函数中：</p><p translation-origin=\"off\">Inject the cart service in the <code>ShippingComponent</code> <code>constructor()</code>.</p>\n\n<p>   <code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"inject-cart-service\">\nconstructor(private cartService: CartService) {\n}\n\n</code-example></p>\n<ol>\n<li>\n<p translation-result=\"on\">定义一个 <code>shippingCosts</code> 属性，并从 <code>CartService</code> 中利用购物车服务的 <code>getShippingPrices()</code> 方法设置它。</p><p translation-origin=\"off\">Define a <code>shippingCosts</code> property that sets the <code>shippingCosts</code> property using the <code>getShippingPrices()</code> method from the <code>CartService</code>.</p>\n\n<code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"props\">\nexport class ShippingComponent {\n  shippingCosts = this.cartService.getShippingPrices();\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p translation-result=\"on\">利用 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道修改配送组件的模板，以显示配送类型和价格：</p><p translation-origin=\"off\">Update the <code>ShippingComponent</code> template to display the shipping types and prices using the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe.</p>\n\n<code-example header=\"src/app/shipping/shipping.component.html\" path=\"getting-started/src/app/shipping/shipping.component.html\">\n&#x3C;h3>Shipping Prices&#x3C;/h3>\n\n&#x3C;div class=\"shipping-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let shipping of shippingCosts | <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a>\">\n  &#x3C;span>{{ shipping.type }}&#x3C;/span>\n  &#x3C;span>{{ shipping.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n\n</code-example>\n<p translation-result=\"on\"><code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道从数据流中返回最新值，并在所属组件的生命期内持续返回。当 Angular 销毁该组件时，<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道会自动停止。关于 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 管道的详细信息，请参阅 <a href=\"/api/common/AsyncPipe\">AsyncPipe API 文档</a>。</p><p translation-origin=\"off\">The <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe returns the latest value from a stream of data and continues to do so for the life of a given component.\nWhen Angular destroys that component, the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe automatically stops.\nFor detailed information about the <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> pipe\n, see the <a href=\"/api/common/AsyncPipe\">AsyncPipe API documentation</a>.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在购物车视图中添加一个到配送视图的链接：</p><p translation-origin=\"off\">Add a link from the <code>CartComponent</code> view to the <code>ShippingComponent</code> view.</p>\n\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;p>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/shipping\">Shipping Prices&#x3C;/a>\n&#x3C;/p>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">\n  &#x3C;span>{{ item.name }}&#x3C;/span>\n  &#x3C;span>{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\">点击 <strong>Checkout</strong> 按钮，查看更新后的购物车。注意，修改本应用会导致预览窗格刷新，这会清空购物车。</p><p translation-origin=\"off\">Click the <strong>Checkout</strong> button to see the updated cart.\nRemember that changing the application causes the preview to refresh, which empties the cart.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/cart-empty-with-shipping-prices.png\" alt=\"Cart with link to shipping prices\" width=\"301\" height=\"208\">\n</div>\n<p translation-result=\"on\">点击此链接可以导航到运费页。</p><p translation-origin=\"off\">Click on the link to navigate to the shipping prices.</p>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/shipping-prices.png\" alt=\"Display shipping prices\" width=\"301\" height=\"238\">\n</div>\n</li>\n</ol>\n<h2 id=\"whats-next\" translation-result=\"on\">下一步<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#whats-next\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"whats-next\">What's next<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#whats-next\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">现在你有了一个带有商品名录和购物车的商店应用了，而且你还可以查询运费。</p><p translation-origin=\"off\">You now have a store application with a product catalog, a shopping cart, and you can  look up shipping prices.</p>\n\n<p translation-result=\"on\">要继续探索 Angular，你可以：</p><p translation-origin=\"off\">To continue exploring Angular:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">继续阅读<a href=\"start/start-forms\" title=\"Forms for User Input\">表单与用户输入</a>部分，添加购物车视图和结账视图，以完成本应用。</p><p translation-origin=\"off\">Continue to <a href=\"start/start-forms\" title=\"Forms for User Input\">Forms for User Input</a> to finish the application by adding the shopping cart view and a checkout form.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">跳到<a href=\"start/start-deployment\" title=\"Deployment\">部署</a>部分来转为本地开发，或者把你的应用部署到 Firebase 或你自己的服务器上。</p><p translation-origin=\"off\">Skip ahead to <a href=\"start/start-deployment\" title=\"Deployment\">Deployment</a> to move to local development, or deploy your application to Firebase or your own server.</p>\n\n</li>\n</ul>\n\n  \n</div>\n\n\n<!-- links to this doc:\n - start/start-forms\n - start/start-routing\n-->\n<!-- links from this doc:\n - /api/common/AsyncPipe\n - api/common/AsyncPipe\n - api/common/CurrencyPipe\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/ReactiveFormsModule\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/RouterLink\n - guide/architecture-services\n - guide/glossary#dependency-injection-di\n - guide/http\n - start\n - start/start-data#configure-appmodule-to-use-httpclient\n - start/start-data#configure-cartservice-to-get-shipping-prices\n - start/start-data#configure-cartservice-to-use-httpclient\n - start/start-data#configuring-the-shippingcomponent-to-use-cartservice\n - start/start-data#create-a-shipping-component\n - start/start-data#create-the-cart-view\n - start/start-data#create-the-shopping-cart-service\n - start/start-data#define-a-cart-service\n - start/start-data#display-the-cart-items\n - start/start-data#generate-cart-service\n - start/start-data#managing-data\n - start/start-data#retrieve-shipping-prices\n - start/start-data#set-up-the-cart-component\n - start/start-data#use-the-cart-service\n - start/start-data#whats-next\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n - https://github.com/angular/angular-cn/edit/aio/aio/content/start/start-data.md?message=docs%3A%20请简述你的修改...\n-->"
}